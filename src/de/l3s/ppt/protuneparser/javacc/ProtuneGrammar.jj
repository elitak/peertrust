options 
{
  STATIC = false;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN( ProtuneParser )

package de.l3s.ppt.protuneparser.javacc;

import java.util.ArrayList;
import de.l3s.ppt.protuneparser.*;
import de.l3s.ppt.log.Logger;
import java.io.IOException;

public class ProtuneParser {
  private String str;
  private int commonOffset = 0;
  private static Logger logger = new Logger(ProtuneParser.class);
  public static final int TABS_SIZE = 8;

  public static ProtuneParser createParser( String str, int commonOffset ) 
  throws IOException
  {
    logger.debug("createParser() : ENTER");
    logger.debug("createParser() : string to parse = " + str);
    logger.debug("createParser() : commonOffset = " + commonOffset);
    java.io.StringReader sr = new java.io.StringReader( str );
    java.io.Reader r = new java.io.BufferedReader( sr );
    ProtuneParser protuneParser = new ProtuneParser( r );
    protuneParser.str  = str;
    protuneParser.commonOffset = commonOffset;
    logger.debug("createParser() : EXIT");
    return protuneParser;
  }

  public ArrayList parse()
  throws ParseException, IOException
  {
    logger.info("parse() : ENTER");
    ArrayList entries = new ArrayList();

    try {
      entries = Input(entries);
      logger.debug("parse() : input has been parsed in a single run");
    } catch( ParseException e ) {
      logger.debug("parse() : ParseException was thrown, exception was: " + e.toString());
      try {
        entries = skipDamagedPartAndParseAhead(entries);
      } catch (Exception ex) {
        logger.error("parse() : exception was thrown by skipDamagedPartAndParseAhead(), exception was: " + ex.toString());
        logger.error("parse() : marking unparsed tail as damaged part");
        if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
          entries.remove(entries.size() - 1);
          logger.debug("parse() : removing last entry");
        }
        entries.add(new Integer(str.length() - 1 + commonOffset));
        logger.debug("parse() : adding an entry");
      }
    } catch( TokenMgrError ex ) {
      logger.debug("parse() : TokenMgrError was thrown, exception was: " + ex.toString());
      try {
        entries = skipDamagedPartAndParseAhead(entries);
      } catch (Exception e) {
        logger.error("parse() : exception was thrown by skipDamagedPartAndParseAhead(), exception was: " + e.toString());
        logger.error("parse() : marking unparsed tail as damaged part");
        if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
          entries.remove(entries.size() - 1);
          logger.debug("parse() : removing last entry");
        }
        entries.add(new Integer(str.length() - 1 + commonOffset));
        logger.debug("parse() : adding an entry");
      }
    }
    logger.info("parse() : number of parsed entries = " + entries.size());
    logger.info("parse() : EXIT");
    return entries;
  }

  private int calculateOffset(int line, int column) {
    int offset = 0;
    for (int i = 0; i < line - 1; i++) {
      offset = str.indexOf('\n', offset) + 1;
      if (offset == 0) {
        logger.error("calculateOffset() : can not calculate offset for: line; column: " + line + "; " + column);
        offset = -1;
        break;
      }
    }
    if (offset != -1) {
      if (str.charAt(offset) == '\r') {
        offset++;
      }
      for (int columnNumber = 0; columnNumber < column - 1; columnNumber++) {
        if (str.charAt(offset) == '\t') {
          columnNumber += TABS_SIZE - (columnNumber - (int) (columnNumber / TABS_SIZE) * TABS_SIZE) - 1;
        }
        offset++;
      }
      offset += commonOffset;
    }
    return offset;
  }

  private ArrayList skipDamagedPartAndParseAhead(ArrayList parsedEntries)
    throws ParseException, IOException {

    logger.debug("skipDamagedPartAndParseAhead() : ENTER");
    ArrayList entries = (ArrayList)parsedEntries.clone();

    int offset = 0;
    if (entries == null) {
      entries = new ArrayList();
    }
    logger.debug("skipDamagedPartAndParseAhead() : entries size on enter: " + entries.size());
    if (entries.size() != 0) {
      if (entries.get(entries.size() - 1) instanceof Rule) {
        offset = ((Rule)entries.get(entries.size() - 1)).offsetInInput;
      } else if (entries.get(entries.size() - 1) instanceof Directive) {
        offset = ((Directive)entries.get(entries.size() - 1)).offsetInInput;
      } else if (entries.get(entries.size() - 1) instanceof MetaRule) {
        offset = ((MetaRule)entries.get(entries.size() - 1)).offsetInInput;
      } else if (entries.get(entries.size() - 1) instanceof StringDescription) {
        offset = ((StringDescription)entries.get(entries.size() - 1)).getEndOffset();
      } else {
        offset = ((Integer)entries.get(entries.size() - 1)).intValue();
      }
      offset++;
      offset -= commonOffset;
      if (offset < str.length() && str.charAt(offset) == '\r') {
        offset++;
      }
    }
    logger.debug("skipDamagedPartAndParseAhead() : offset on enter: " + offset);

    boolean done = false;
    int dotOffset = str.indexOf(Constants.DOT, offset);
    int delimiterOffset = str.indexOf('\n', offset);

    logger.debug("skipDamagedPartAndParseAhead() : dotOffset: " + dotOffset);
    logger.debug("skipDamagedPartAndParseAhead() : delimiterOffset: " + delimiterOffset);

    if (dotOffset == -1 && delimiterOffset == -1) {
      if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
        entries.remove(entries.size() - 1);
        logger.debug("skipDamagedPartAndParseAhead() : removing last entry");
      }
      entries.add(new Integer(str.length() - 1 + commonOffset));
      logger.debug("skipDamagedPartAndParseAhead() : adding an entry");
      done = true;
      logger.debug("skipDamagedPartAndParseAhead() : done: " + done);
    } else {
      if (dotOffset == -1 && delimiterOffset != -1) {
        offset = delimiterOffset + 1;
        if (offset < str.length() && str.charAt(offset) == '\r') {
          offset++;
        }
      }
      if (dotOffset != -1 && delimiterOffset == -1) {
        offset = dotOffset + Constants.DOT.length();
      }
      if (dotOffset != -1 && delimiterOffset != -1) {
        if (dotOffset < delimiterOffset) {
          offset = dotOffset + Constants.DOT.length();
        } else {
          offset = delimiterOffset + 1;
          if (offset < str.length() && str.charAt(offset) == '\r') {
            offset++;
          }
        }
      }
      logger.debug("skipDamagedPartAndParseAhead() : offset: " + offset);
      logger.debug("skipDamagedPartAndParseAhead() : done: " + done);
      if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
        entries.remove(entries.size() - 1);
        logger.debug("skipDamagedPartAndParseAhead() : removing last entry");
      }
      entries.add(new Integer(offset - 1 + commonOffset));
      logger.debug("skipDamagedPartAndParseAhead() : adding an entry");
    }
    if (!done) {
      ArrayList tail = new ArrayList();
      if (offset < str.length()) {
        logger.debug("skipDamagedPartAndParseAhead() : creating new parser to parse the tail");
        ProtuneParser parser = ProtuneParser.createParser(str.substring(offset), offset + commonOffset);
        tail = parser.parse();
        logger.debug("skipDamagedPartAndParseAhead() : tail size: " + tail.size());
        if (entries.size() != 0 
           && entries.get(entries.size() - 1) instanceof Integer 
           && tail.size() != 0 
           && tail.get(0) instanceof Integer) {
         entries.remove(entries.size() - 1);
         logger.debug("skipDamagedPartAndParseAhead() : removing last entry");
        }
        for (int i = 0; i < tail.size(); i++) {
          logger.debug("skipDamagedPartAndParseAhead() : adding tail element to the entries");
          Object obj = tail.get(i);
          entries.add(obj);
        }
      } else {
        if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
          entries.remove(entries.size() - 1);
          logger.debug("skipDamagedPartAndParseAhead() : removing last entry");
        }
        entries.add(new Integer(str.length() - 1 + commonOffset));
        logger.debug("skipDamagedPartAndParseAhead() : adding an entry");
      }
    }
    logger.debug("skipDamagedPartAndParseAhead() : entries size on exit: " + entries.size());
    logger.debug("skipDamagedPartAndParseAhead() : EXIT");
    return entries;
  }
}


PARSER_END( ProtuneParser )

ArrayList Input( ArrayList entries ) :
{
  Directive directive;
  StringDescription comment;
  Object obj;
}
{
  ( 
    directive = Directive()
    {entries.add(directive);}
  )* 
  ( 
    (
      (
        obj = RuleOrMetaRule()
        {entries.add(obj);}
      )
      |
      (
        comment = Comment()
        {entries.add(comment);}
      )
    )
  )* 
  <EOF>
  {return entries;}
}

Object RuleOrMetaRule() :
{
  HeadLiteral headLiteral;
  StringDescription ruleSeparator = null;
  StringDescription id = null;
  ArrayList list = null;
  Field field;
  Token t;
  int endOffset;
}
{
  (
    (
      headLiteral = HeadLiteral()
      (
        // ignore choice conflict here
        LOOKAHEAD( <DOT> Field() )
        (
          <DOT>
          field = Field()
          (
            ruleSeparator = RuleSeparator()
            list = MetaLiteralList()
          )?
          t = <DOT>
          {
          	endOffset = calculateOffset(t.endLine, t.endColumn);
        	return new MetaRule(new MetaHeadLiteral(headLiteral, field), ruleSeparator, list, endOffset);
          }
        )
        |
        (
          (
            ruleSeparator = RuleSeparator()
            list = LiteralList()
          )?
          t = <DOT>
          {
          	endOffset = calculateOffset(t.endLine, t.endColumn);
      	    return new Rule(null, headLiteral, ruleSeparator, list, endOffset);
          }
        )
      )
    )
    |
    (
      <OPENING_SQUARE_BRACKET>
      id = Id()
      <CLOSING_SQUARE_BRACKET>
      (
        (
          <DOT>
          field = Field()
          (
            ruleSeparator = RuleSeparator()
            list = MetaLiteralList()
          )?
          t = <DOT>
          {
          	endOffset = calculateOffset(t.endLine, t.endColumn);
          	return new MetaRule(new MetaHeadLiteral(id, field), ruleSeparator, list, endOffset);
          }
        )
        |
        (
          headLiteral = HeadLiteral()
          (
            ruleSeparator = RuleSeparator()
            list = LiteralList()
          )?
          t = <DOT>
          {
          	endOffset = calculateOffset(t.endLine, t.endColumn);
          	return new Rule(id, headLiteral, ruleSeparator, list, endOffset);
          }
        )
      )
    )
  )
}

Literal Literal() :
{
  SpecialLiteral specialLiteral;
  StringDescription negSymbol = null;
  StringDescription stringDescription = null;
  ArrayList list = null;
  StringDescription operator = null;
  StringDescription termAfter = null;
  StringDescription termBefore = null;
}
{
  (
    (
      specialLiteral = SpecialLiteral()
      {return new Literal(specialLiteral);}
    )
    |
    (
      negSymbol = NegSymbol()
    )
  )?
  (
    (
      termBefore = Number()
      operator = Operator()
      termAfter = Term()
      {return new Literal(negSymbol, termBefore, operator, termAfter);}
    )
    |
    (
      (
        (
          stringDescription = StringConstant()
        )
        |
        (
          stringDescription = Variable()
        )
      )
      (
        (
          <OPENING_SQUARE_BRACKET>
          list = FieldList()
          <CLOSING_SQUARE_BRACKET>
          {return new Literal(negSymbol, new HeadLiteral(new ComplexTerm(stringDescription, list)));}
        )
        |
        (
          operator = Operator()
          termAfter = Term()
          {return new Literal(negSymbol, stringDescription, operator, termAfter);}
        )
        |
        (
          (
            <OPENING_BRACKET>
            (
              list = ArgumentList()
            )?
            <CLOSING_BRACKET>
          )
        )
      )?
      {return new Literal(negSymbol, new HeadLiteral(new PredicateLiteral(stringDescription, list)));}
    )
  )
}

MetaLiteral MetaLiteral() :
{
  StringDescription negSymbol = null;
  SpecialLiteral specialLiteral;
  StringDescription termBefore;
  StringDescription operator;
  StringDescription termAfter;
  StringDescription id;
  StringDescription stringDescription;
  Field field = null;
  ArrayList list = null;
  boolean isPredicateLiteral = false;
}
{
  (
    (
      specialLiteral = SpecialLiteral()
      {return new MetaLiteral(new Literal(specialLiteral));}
    )
    |
    (
      negSymbol = NegSymbol()
    )
  )?
  (
    (
      <OPENING_SQUARE_BRACKET>
      id = Constant()
      <CLOSING_SQUARE_BRACKET>
      <DOT>
      field = Field()
      {return new MetaLiteral(negSymbol, new MetaHeadLiteral(id, field));}
    )
    |
    (
      termBefore = Number()
      operator = Operator()
      termAfter = Term()
      {return new MetaLiteral(new Literal(negSymbol, termBefore, operator, termAfter));}
    )
    |
    (
      stringDescription = Variable()
      (
        (
          <OPENING_SQUARE_BRACKET>
          list = FieldList()
          <CLOSING_SQUARE_BRACKET>
          (
            <DOT>
            field = Field()
          )?
          {
          	if (field != null) {
          		// MetaHeadLiteral
          		return new MetaLiteral(negSymbol, new MetaHeadLiteral(new HeadLiteral(new ComplexTerm(stringDescription, list)), field));
          	} else {
          		// HeadLiteral
          		return new MetaLiteral(new Literal(negSymbol, new HeadLiteral(new ComplexTerm(stringDescription, list))));
          	}
          }
        )
        |
        (
          operator = Operator()
          termAfter = Term()
          {return new MetaLiteral(new Literal(negSymbol, stringDescription, operator, termAfter));}
        )
      )
    )
    |
    (
      stringDescription = StringConstant()
      (
        (
          <OPENING_SQUARE_BRACKET>
          list = FieldList()
          <CLOSING_SQUARE_BRACKET>
          (
            <DOT>
            field = Field()
          )?
          {
          	if (field != null) {
          		// MetaHeadLiteral
          		return new MetaLiteral(negSymbol, new MetaHeadLiteral(new HeadLiteral(new ComplexTerm(stringDescription, list)), field));
          	} else {
          		// HeadLiteral
          		return new MetaLiteral(new Literal(negSymbol, new HeadLiteral(new ComplexTerm(stringDescription, list))));
          	}
          }
        )
        |
        (
          operator = Operator()
          termAfter = Term()
          {return new MetaLiteral(new Literal(negSymbol, stringDescription, operator, termAfter));}
        )
        |
        (
          (
            <OPENING_BRACKET>
            {isPredicateLiteral = true;}
            (
              list = ArgumentList()
            )?
            <CLOSING_BRACKET>
          )?
          (
            LOOKAHEAD(<DOT> Field())
            <DOT>
            field = Field()
          )?
          {
          	if (field != null) {
          		// MetaHeadLiteral
          		if (isPredicateLiteral) {
          			return new MetaLiteral(negSymbol, new MetaHeadLiteral(new HeadLiteral(new PredicateLiteral(stringDescription, list)), field));
          		} else {
          			return new MetaLiteral(negSymbol, new MetaHeadLiteral(new HeadLiteral(stringDescription), field));
          		}
          	} else {
          		// HeadLiteral
          		if (isPredicateLiteral) {
          			return new MetaLiteral(new Literal(negSymbol, new HeadLiteral(new PredicateLiteral(stringDescription, list))));
          		} else {
          			return new MetaLiteral(new Literal(negSymbol, new HeadLiteral(stringDescription)));
          		}
          	}
          }
        )
      )
    )
  )
}

ArrayList MetaLiteralList() :
{
  ArrayList list = new ArrayList();
  MetaLiteral metaLiteral;
}
{
  metaLiteral = MetaLiteral()
  {list.add(metaLiteral);}
  (
    <COMMA>
    metaLiteral = MetaLiteral()
    {list.add(metaLiteral);}
  )*
  {return list;}
}

ArrayList MetaBody() :
{
  ArrayList metaBody = null;
}
{
  (
    metaBody = MetaLiteralList()
  )?
  {return metaBody;}
}

MetaHeadLiteral MetaHeadLiteral() :
{
  Field field;
  StringDescription id = null;
  HeadLiteral headLiteral = null;
  boolean hasId = false;
}
{
  (
    (
      <OPENING_SQUARE_BRACKET>
      id = Id()
      <CLOSING_SQUARE_BRACKET>
      {hasId = true;}
    )
    |
    (
      headLiteral = HeadLiteral()
    )
  )
  <DOT>
  field = Field()
  {
    if (hasId) return new MetaHeadLiteral(id, field);
    else return new MetaHeadLiteral(headLiteral, field);
  }
}

ArrayList Body() :
{
  ArrayList body = null;
}
{
  (
    body = LiteralList()
  )?
  {return body;}
}

ArrayList LiteralList() :
{
  ArrayList list = new ArrayList();
  Literal literal;
}
{
  literal = Literal()
  {list.add(literal);}
  (
    <COMMA>
    literal = Literal()
    {list.add(literal);}
  )*
  {return list;}
}

SpecialLiteral SpecialLiteral() :
{
  Function function;
  PackageCall packageCall;
  StringDescription id;
  AnyTerm anyTerm;
  SpecialLiteral specialLiteral;
  Token t;
  StringDescription commandWord;
}
{
  (
    (
      t = <IN>
      {
        commandWord = new StringDescription(t.image, 
                                   calculateOffset(t.beginLine, t.beginColumn),
                                   calculateOffset(t.endLine, t.endColumn),
                                   StringDescription.RESERVED_WORD_TYPE);
      }
      <OPENING_BRACKET>
      function = Function()
      <COMMA>
      packageCall = PackageCall()
      <CLOSING_BRACKET>
      {specialLiteral = new SpecialLiteral(commandWord, function, packageCall);}
    )
    |
    (
      t = <DECLARATION>
      {
        commandWord = new StringDescription(t.image, 
                                   calculateOffset(t.beginLine, t.beginColumn),
                                   calculateOffset(t.endLine, t.endColumn),
                                   StringDescription.RESERVED_WORD_TYPE);
      }
      <OPENING_BRACKET>
      id = Id()
      <COMMA>
      anyTerm = AnyTerm()
      <CLOSING_BRACKET>
      {specialLiteral = new SpecialLiteral(commandWord, true, id, anyTerm);}
    )
    |
    (
      t = <CREDENTIAL>
      {
        commandWord = new StringDescription(t.image, 
                                   calculateOffset(t.beginLine, t.beginColumn),
                                   calculateOffset(t.endLine, t.endColumn),
                                   StringDescription.RESERVED_WORD_TYPE);
      }
      <OPENING_BRACKET>
      id = Id()
      <COMMA>
      anyTerm = AnyTerm()
      <CLOSING_BRACKET>
      {specialLiteral = new SpecialLiteral(commandWord, false, id, anyTerm);}
    )
  )
  {return specialLiteral;}
}

Directive Directive() :
{
  StringDescription str = null;
  StringDescription commandWord = null;
  Token t = null;
}
{
  t = <INCLUDE>
  {
    commandWord = new StringDescription(t.image, 
                                   calculateOffset(t.beginLine, t.beginColumn),
                                   calculateOffset(t.endLine, t.endColumn),
                                   StringDescription.RESERVED_WORD_TYPE);
  }
  str = StringQuoted()
  {return new Directive(commandWord, str);}
}

StringDescription Comment() :
{
  StringBuffer buff = new StringBuffer();
  Token t;
  int beginOffset, endOffset;
}
{
  (
    (
      t = <START_SINGLE_LINE_COMMENT>
      {
        buff.append(t.image);
        beginOffset = calculateOffset(t.beginLine, t.beginColumn);
      }
      (
        t = <ANY_CHAR>
        {buff.append((char)t.image.charAt(0));}
      )*
      (
        t = <END_SINGLE_LINE_COMMENT>
        {buff.append(t.image);}
      )?
    )
    |
    (
      t = <START_SINGLE_LINE_COMMENT2>
      {
        buff.append(t.image);
        beginOffset = calculateOffset(t.beginLine, t.beginColumn);
      }
      (
        t = <ANY_CHAR>
        {buff.append((char)t.image.charAt(0));}
      )*
      (
        t = <END_SINGLE_LINE_COMMENT>
        {buff.append(t.image);}
      )?
    )
    |
    (
      t = <START_MULTIPLE_LINE_COMMENT>
      {
        buff.append(t.image);
        beginOffset = calculateOffset(t.beginLine, t.beginColumn);
      }
      (
        t = <ANY_CHARACTER>
        {buff.append((char)t.image.charAt(0));}
      )*
      t = <END_MULTIPLE_LINE_COMMENT>
      {buff.append(t.image);}
    )
  )
  {
  	endOffset = calculateOffset(t.endLine, t.endColumn);
    return new StringDescription(buff.toString(), beginOffset, endOffset, StringDescription.COMMENT_TYPE);
  }
}

HeadLiteral HeadLiteral() :
{
  StringDescription stringDescription;
  ArrayList list = null;
  boolean isStringConstant = true;
}
{
  (
    (
      stringDescription = Variable()
      <OPENING_SQUARE_BRACKET>
      list = FieldList()
      <CLOSING_SQUARE_BRACKET>
      {return new HeadLiteral(new ComplexTerm(stringDescription, list));}
    )
    |
    (
      stringDescription = StringConstant()
      (
        (
          <OPENING_SQUARE_BRACKET>
          list = FieldList()
          <CLOSING_SQUARE_BRACKET>
          {return new HeadLiteral(new ComplexTerm(stringDescription, list));}
        )
        |
        (
          <OPENING_BRACKET>
          (
            list = ArgumentList()
          )?
          {isStringConstant = false;}
          <CLOSING_BRACKET>
        )
      )?
      {
      	if (isStringConstant) {
      	  return new HeadLiteral(stringDescription);	
      	} else {
          return new HeadLiteral(new PredicateLiteral(stringDescription, list));
      	}
      }
    )
  )
}

Argument Argument() :
{
  StringDescription stringDescription;
  ArrayList list = null;
}
{
  (
    (
      stringDescription = StringConstant()
      (
        (
          <OPENING_BRACKET>
          (
            list = ArgumentList()
          )?
          <CLOSING_BRACKET>
          {return new Argument(new PredicateLiteral(stringDescription, list));}
        )
        |
        (
          <OPENING_SQUARE_BRACKET>
          list = FieldList()
          <CLOSING_SQUARE_BRACKET>
          {
            if (list != null) return new Argument(new AnyTerm(new ComplexTerm(stringDescription, list)));
            else return new Argument(new AnyTerm(stringDescription));
          }
        )
      )?
      {return new Argument(new AnyTerm(stringDescription));}
    )
    |
    (
      (
        (
          stringDescription = Number()
        )
        |
        (
          stringDescription = Variable()
        )
      )
      (
        <OPENING_SQUARE_BRACKET>
        list = FieldList()
        <CLOSING_SQUARE_BRACKET>
      )?
      {
        if (list != null) return new Argument(new AnyTerm(new ComplexTerm(stringDescription, list)));
        else return new Argument(new AnyTerm(stringDescription));
      }
    )
  )
}

ArrayList ArgumentList() :
{
  ArrayList list = new ArrayList();
  Argument argument;
}
{
  argument = Argument()
  {list.add(argument);}
  (
    <COMMA>
    argument = Argument()
    {list.add(argument);}
  )*
  {return list;}
}

PredicateLiteral PredicateLiteral() :
{
  StringDescription predicate;
  ArrayList argumentList = null;
}
{
  predicate = Predicate()
  (
    <OPENING_BRACKET>
    (
      argumentList = ArgumentList()
    )?
    <CLOSING_BRACKET>
  )
  {return(new PredicateLiteral(predicate, argumentList));}
}

StringDescription Number() :
{
  Token t;
}
{
  t = <NUMBER>
  {
    int beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    int endOffset = calculateOffset(t.endLine, t.endColumn);
    return(new StringDescription(t.image, beginOffset, endOffset, StringDescription.NUMBER_TYPE));
  }
}

StringDescription StringConstant() :
{
  Token t = null;
  StringDescription stringDescription = null;
}
{
  (
    (
      stringDescription = StringQuoted()
      {return stringDescription;}
    )
    |
    (    
      t = <STRING_WITH_LC_AHEAD>
      {
        int beginOffset = calculateOffset(t.beginLine, t.beginColumn);
        int endOffset = calculateOffset(t.endLine, t.endColumn);
        return new StringDescription(t.image, beginOffset, endOffset, StringDescription.STRING_CONSTANT_TYPE);
      }
    )
  )
}

StringDescription Variable() :
{
  Token t = null;
  StringDescription stringDescription = null;
}
{
  (
    (    
      t = <STRING_WITH_UC_AHEAD>
    )
    |
    (
      t = <STRING_WITH_UNDERSCORE_AHEAD>
    )
  )
  {
    int beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    int endOffset = calculateOffset(t.endLine, t.endColumn);
    return new StringDescription(t.image, beginOffset, endOffset, StringDescription.VARIABLE_TYPE);
  }
}

StringDescription Operator() :
{
  Token t = null;
  int beginOffset, endOffset;
}
{
  t = <OPERATOR>
  {
    beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    endOffset = calculateOffset(t.endLine, t.endColumn);
    return(new StringDescription(t.image, beginOffset, endOffset, StringDescription.OPERATOR_TYPE));
  }
}

StringDescription NegSymbol() :
{
  Token t = null;
  int beginOffset, endOffset;
}
{
  t = <NEG_SYMBOL>
  {
    beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    endOffset = calculateOffset(t.endLine, t.endColumn);
    return(new StringDescription(t.image, beginOffset, endOffset, StringDescription.NEG_SYMBOL_TYPE));
  }
}

StringDescription RuleSeparator() :
{
  Token t = null;
  int beginOffset, endOffset;
}
{
  t = <RULE_SEPARATOR>
  {
    beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    endOffset = calculateOffset(t.endLine, t.endColumn);
    return(new StringDescription(t.image, beginOffset, endOffset, StringDescription.RULE_SEPARATOR_TYPE));
  }
}

StringDescription Constant() :
{
  StringDescription stringDescription = null;
}
{
  (
    (
      stringDescription = StringConstant()
    )
    |
    (
      stringDescription = Number()
    )
  )
  {
    stringDescription.addType(StringDescription.CONSTANT_TYPE);
    return stringDescription;
  }
}

StringDescription StringQuoted() :
{
  StringBuffer buff = new StringBuffer();
  Token t;
  int beginOffset, endOffset;
}
{
  (
    (
      t = <START_SINGLE_QUOTE>
      {
        buff.append((char)t.image.charAt(0));
        beginOffset = calculateOffset(t.beginLine, t.beginColumn);
      }
      (
        t = <ANY_CHAR>
        {buff.append((char)t.image.charAt(0));}
      )*
      t = <END_SINGLE_QUOTE>
      {
        buff.append((char)t.image.charAt(0));
        endOffset = calculateOffset(t.endLine, t.endColumn);
      }
    )
    |
    (
      t = <START_DOUBLE_QUOTE>
      {
        buff.append((char)t.image.charAt(0));
        beginOffset = calculateOffset(t.beginLine, t.beginColumn);
      }
      (
        t = <ANY_CHAR>
        {buff.append((char)t.image.charAt(0));}
      )*
      t = <END_DOUBLE_QUOTE>
      {
        endOffset = calculateOffset(t.endLine, t.endColumn);
        buff.append((char)t.image.charAt(0));
      }
    )
  )
  {return new StringDescription(buff.toString(), beginOffset, endOffset, StringDescription.QUOTED_TYPE);}
}

StringDescription Attribute() :
{
  StringDescription stringDescription = null;
}
{
  stringDescription = StringConstant()
  {
    stringDescription.addType(StringDescription.ATTRIBUTE_TYPE);
    return stringDescription;
  }
}

StringDescription Value() :
{
  StringDescription stringDescription = null;
}
{
  stringDescription = Term()
  {
    stringDescription.addType(StringDescription.VALUE_TYPE);
    return stringDescription;
  }
}

StringDescription Predicate() :
{
  StringDescription stringDescription = null;
}
{
  stringDescription = StringConstant()
  {
    stringDescription.addType(StringDescription.PREDICATE_TYPE);
    return stringDescription;
  }
}

StringDescription Package() :
{
  StringDescription stringDescription = null;
}
{
  stringDescription = StringConstant()
  {
    stringDescription.addType(StringDescription.PACKAGE_TYPE);
    return stringDescription;
  }
}

StringDescription Term() :
{
  StringDescription stringDescription;
}
{
  (
    (
      stringDescription = Variable()
    )
    |
    (
      stringDescription = Constant()
    )
  )
  {
    stringDescription.addType(StringDescription.TERM_TYPE);
    return stringDescription;
  }
}

StringDescription Id() :
{
  StringDescription stringDescription = null;
}
{
  stringDescription = Constant()
  {
    stringDescription.addType(StringDescription.ID_TYPE);
    return stringDescription;
  }
}

Field Field() :
{
  StringDescription attribute;
  StringDescription value;
}
{
  attribute = Attribute()
  <SEMICOLON>
  value = Value()
  {return new Field(attribute, value);}
}

ArrayList FieldList() :
{
  ArrayList list = new ArrayList();
  Field field;
}
{
  field = Field()
  {list.add(field);}
  (
    <COMMA>
    field = Field()
    {list.add(field);}
  )*
  {return list;}
}

ArrayList TermList() :
{
  ArrayList list = new ArrayList();
  StringDescription term;
}
{
  term = Term()
  {list.add(term);}
  (
    <COMMA>
    term = Term()
    {list.add(term);}
  )*
  {return list;}
}

Function Function() :
{
  StringDescription predicate;
  boolean hasBrackets = false;
  ArrayList termList = null;
}
{
  predicate = Predicate()
  (
    <OPENING_BRACKET>
    {hasBrackets = true;}
    (
      termList = TermList()
    )?
    <CLOSING_BRACKET>
  )?
  {return(new Function(predicate, hasBrackets, termList));}
}

ComplexTerm ComplexTerm() :
{
  ArrayList fieldList;
  StringDescription stringDescription;
}
{
  (
    (
      stringDescription = Variable()
    )
    |
    (
      stringDescription = StringConstant()
    )
  )
  <OPENING_SQUARE_BRACKET>
  fieldList = FieldList()
  <CLOSING_SQUARE_BRACKET>
  {return new ComplexTerm(stringDescription, fieldList);}
}

AnyTerm AnyTerm() :
{
  StringDescription term = null;
  ArrayList fieldList = null;
}
{
  (
    // ignore choice conflict here
    (
      term = Number()
      {return new AnyTerm(term);}
    )
    |
    (
      term = Term()
      (
        <OPENING_SQUARE_BRACKET>
        fieldList = FieldList()
        <CLOSING_SQUARE_BRACKET>
      )?
      {
        if (fieldList != null) return new AnyTerm(new ComplexTerm(term, fieldList));
        else return new AnyTerm(term);
      }
    )
  )
}

PackageCall PackageCall() :
{
  StringDescription packageName;
  Function function;
}
{
  packageName = Package()
  <SEMICOLON>
  function = Function()
  {return new PackageCall(packageName, function);}
}

SPECIAL_TOKEN :
{
    " "
  | "\t"
  | "\n"
  | "\r"
}

TOKEN :
{
  <INCLUDE : "include">
  | <DECLARATION : "declaration">
  | <CREDENTIAL : "credential">
  | <IN : "in">
  | <OPENING_BRACKET : "(">
  | <CLOSING_BRACKET : ")">
  | <OPENING_SQUARE_BRACKET : "[">
  | <CLOSING_SQUARE_BRACKET : "]">
  | <NEG_SYMBOL : "not" | "\\+">
  | <RULE_SEPARATOR : "<-" | ":-">
  | <COMMA : ",">
  | <SEMICOLON : ":">
  | <DOT : ".">
  | <OPERATOR : "<=" | ">=" | "!=" | "<" | ">" | "=" | "is">
  | <STRING_WITH_LC_AHEAD : ["a"-"z"] (<ACCEPTED_CHAR>)* (["0"-"9"])*>
  | <STRING_WITH_UC_AHEAD : ["A"-"Z"] (<ACCEPTED_CHAR>)* (["0"-"9"])*>
  | <STRING_WITH_UNDERSCORE_AHEAD : "_" (<ACCEPTED_CHAR>)* (["0"-"9"])*>
  | <STRING_WITH_AC_AHEAD : (<ACCEPTED_CHAR>)+ (["0"-"9"])*>
  | <NUMBER : (["0"-"9"])+>
  | <ACCEPTED_CHAR : ["a"-"z"] | ["A"-"Z"] | "_">
  | <START_SINGLE_QUOTE : "'"> : IN_SINGLE_QUOTE 
  | <START_DOUBLE_QUOTE : "\""> : IN_DOUBLE_QUOTE 
  | <START_SINGLE_LINE_COMMENT : "//"> : IN_SINGLE_LINE_COMMENT 
  | <START_SINGLE_LINE_COMMENT2 : "%"> : IN_SINGLE_LINE_COMMENT 
  | <START_MULTIPLE_LINE_COMMENT : "/*"> : IN_MULTIPLE_LINE_COMMENT 
}

<IN_SINGLE_LINE_COMMENT>
TOKEN : 
{
    <END_SINGLE_LINE_COMMENT: "\n" | "\r"> : DEFAULT 
}

<IN_SINGLE_QUOTE>
TOKEN : 
{
    <END_SINGLE_QUOTE: "'"> : DEFAULT 
}

<IN_DOUBLE_QUOTE>
TOKEN : 
{
    <END_DOUBLE_QUOTE: "\""> : DEFAULT 
}

<IN_SINGLE_QUOTE, IN_DOUBLE_QUOTE, IN_SINGLE_LINE_COMMENT>
TOKEN :
{
    <ANY_CHAR : ~["\n","\r"]> 
}

<IN_MULTIPLE_LINE_COMMENT>
TOKEN : 
{
    <END_MULTIPLE_LINE_COMMENT: "*/"> : DEFAULT 
}

<IN_MULTIPLE_LINE_COMMENT>
TOKEN :
{
    <ANY_CHARACTER : ~[]> 
}