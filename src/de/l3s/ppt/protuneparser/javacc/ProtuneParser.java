/* Generated By:JavaCC: Do not edit this line. ProtuneParser.java */
package de.l3s.ppt.protuneparser.javacc;

import java.util.ArrayList;
import de.l3s.ppt.protuneparser.*;
import de.l3s.ppt.log.Logger;
import java.io.IOException;

public class ProtuneParser implements ProtuneParserConstants {
  private String str;
  private int commonOffset = 0;
  private static Logger logger = new Logger(ProtuneParser.class);
  public static final int TABS_SIZE = 8;

  public static ProtuneParser createParser( String str, int commonOffset )
  throws IOException
  {
    logger.debug("createParser() : ENTER");
    logger.debug("createParser() : string to parse = " + str);
    logger.debug("createParser() : commonOffset = " + commonOffset);
    java.io.StringReader sr = new java.io.StringReader( str );
    java.io.Reader r = new java.io.BufferedReader( sr );
    ProtuneParser protuneParser = new ProtuneParser( r );
    protuneParser.str  = str;
    protuneParser.commonOffset = commonOffset;
    logger.debug("createParser() : EXIT");
    return protuneParser;
  }

  public ArrayList parse()
  throws ParseException, IOException
  {
    logger.info("parse() : ENTER");
    ArrayList entries = new ArrayList();

    try {
      entries = Input(entries);
      logger.debug("parse() : input has been parsed in a single run");
    } catch( ParseException e ) {
      logger.debug("parse() : ParseException was thrown, exception was: " + e.toString());
      try {
        entries = skipDamagedPartAndParseAhead(entries);
      } catch (Exception ex) {
        logger.error("parse() : exception was thrown by skipDamagedPartAndParseAhead(), exception was: " + ex.toString());
        logger.error("parse() : marking unparsed tail as damaged part");
        if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
          entries.remove(entries.size() - 1);
          logger.debug("parse() : removing last entry");
        }
        entries.add(new Integer(str.length() - 1 + commonOffset));
        logger.debug("parse() : adding an entry");
      }
    } catch( TokenMgrError ex ) {
      logger.debug("parse() : TokenMgrError was thrown, exception was: " + ex.toString());
      try {
        entries = skipDamagedPartAndParseAhead(entries);
      } catch (Exception e) {
        logger.error("parse() : exception was thrown by skipDamagedPartAndParseAhead(), exception was: " + e.toString());
        logger.error("parse() : marking unparsed tail as damaged part");
        if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
          entries.remove(entries.size() - 1);
          logger.debug("parse() : removing last entry");
        }
        entries.add(new Integer(str.length() - 1 + commonOffset));
        logger.debug("parse() : adding an entry");
      }
    }
    logger.info("parse() : number of parsed entries = " + entries.size());
    logger.info("parse() : EXIT");
    return entries;
  }

  private int calculateOffset(int line, int column) {
    int offset = 0;
    for (int i = 0; i < line - 1; i++) {
      offset = str.indexOf('\n', offset) + 1;
      if (offset == 0) {
        logger.error("calculateOffset() : can not calculate offset for: line; column: " + line + "; " + column);
        offset = -1;
        break;
      }
    }
    if (offset != -1) {
      if (str.charAt(offset) == '\r') {
        offset++;
      }
      for (int columnNumber = 0; columnNumber < column - 1; columnNumber++) {
        if (str.charAt(offset) == '\t') {
          columnNumber += TABS_SIZE - (columnNumber - (int) (columnNumber / TABS_SIZE) * TABS_SIZE) - 1;
        }
        offset++;
      }
      offset += commonOffset;
    }
    return offset;
  }

  private ArrayList skipDamagedPartAndParseAhead(ArrayList parsedEntries)
    throws ParseException, IOException {

    logger.debug("skipDamagedPartAndParseAhead() : ENTER");
    ArrayList entries = (ArrayList)parsedEntries.clone();

    int offset = 0;
    if (entries == null) {
      entries = new ArrayList();
    }
    logger.debug("skipDamagedPartAndParseAhead() : entries size on enter: " + entries.size());
    if (entries.size() != 0) {
      if (entries.get(entries.size() - 1) instanceof Rule) {
        offset = ((Rule)entries.get(entries.size() - 1)).offsetInInput;
      } else if (entries.get(entries.size() - 1) instanceof Directive) {
        offset = ((Directive)entries.get(entries.size() - 1)).offsetInInput;
      } else if (entries.get(entries.size() - 1) instanceof MetaRule) {
        offset = ((MetaRule)entries.get(entries.size() - 1)).offsetInInput;
      } else if (entries.get(entries.size() - 1) instanceof StringDescription) {
        offset = ((StringDescription)entries.get(entries.size() - 1)).getEndOffset();
      } else {
        offset = ((Integer)entries.get(entries.size() - 1)).intValue();
      }
      offset++;
      offset -= commonOffset;
      if (offset < str.length() && str.charAt(offset) == '\r') {
        offset++;
      }
    }
    logger.debug("skipDamagedPartAndParseAhead() : offset on enter: " + offset);

    boolean done = false;
    int dotOffset = str.indexOf(Constants.DOT, offset);
    int delimiterOffset = str.indexOf('\n', offset);

    logger.debug("skipDamagedPartAndParseAhead() : dotOffset: " + dotOffset);
    logger.debug("skipDamagedPartAndParseAhead() : delimiterOffset: " + delimiterOffset);

    if (dotOffset == -1 && delimiterOffset == -1) {
      if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
        entries.remove(entries.size() - 1);
        logger.debug("skipDamagedPartAndParseAhead() : removing last entry");
      }
      entries.add(new Integer(str.length() - 1 + commonOffset));
      logger.debug("skipDamagedPartAndParseAhead() : adding an entry");
      done = true;
      logger.debug("skipDamagedPartAndParseAhead() : done: " + done);
    } else {
      if (dotOffset == -1 && delimiterOffset != -1) {
        offset = delimiterOffset + 1;
        if (offset < str.length() && str.charAt(offset) == '\r') {
          offset++;
        }
      }
      if (dotOffset != -1 && delimiterOffset == -1) {
        offset = dotOffset + Constants.DOT.length();
      }
      if (dotOffset != -1 && delimiterOffset != -1) {
        if (dotOffset < delimiterOffset) {
          offset = dotOffset + Constants.DOT.length();
        } else {
          offset = delimiterOffset + 1;
          if (offset < str.length() && str.charAt(offset) == '\r') {
            offset++;
          }
        }
      }
      logger.debug("skipDamagedPartAndParseAhead() : offset: " + offset);
      logger.debug("skipDamagedPartAndParseAhead() : done: " + done);
      if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
        entries.remove(entries.size() - 1);
        logger.debug("skipDamagedPartAndParseAhead() : removing last entry");
      }
      entries.add(new Integer(offset - 1 + commonOffset));
      logger.debug("skipDamagedPartAndParseAhead() : adding an entry");
    }
    if (!done) {
      ArrayList tail = new ArrayList();
      if (offset < str.length()) {
        logger.debug("skipDamagedPartAndParseAhead() : creating new parser to parse the tail");
        ProtuneParser parser = ProtuneParser.createParser(str.substring(offset), offset + commonOffset);
        tail = parser.parse();
        logger.debug("skipDamagedPartAndParseAhead() : tail size: " + tail.size());
        if (entries.size() != 0
           && entries.get(entries.size() - 1) instanceof Integer
           && tail.size() != 0
           && tail.get(0) instanceof Integer) {
         entries.remove(entries.size() - 1);
         logger.debug("skipDamagedPartAndParseAhead() : removing last entry");
        }
        for (int i = 0; i < tail.size(); i++) {
          logger.debug("skipDamagedPartAndParseAhead() : adding tail element to the entries");
          Object obj = tail.get(i);
          entries.add(obj);
        }
      } else {
        if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
          entries.remove(entries.size() - 1);
          logger.debug("skipDamagedPartAndParseAhead() : removing last entry");
        }
        entries.add(new Integer(str.length() - 1 + commonOffset));
        logger.debug("skipDamagedPartAndParseAhead() : adding an entry");
      }
    }
    logger.debug("skipDamagedPartAndParseAhead() : entries size on exit: " + entries.size());
    logger.debug("skipDamagedPartAndParseAhead() : EXIT");
    return entries;
  }

  final public ArrayList Input(ArrayList entries) throws ParseException {
  Directive directive;
  StringDescription comment;
  Object obj;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      directive = Directive();
     entries.add(directive);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_SQUARE_BRACKET:
      case STRING_WITH_LC_AHEAD:
      case STRING_WITH_UC_AHEAD:
      case STRING_WITH_UNDERSCORE_AHEAD:
      case START_SINGLE_QUOTE:
      case START_DOUBLE_QUOTE:
      case START_SINGLE_LINE_COMMENT:
      case START_SINGLE_LINE_COMMENT2:
      case START_MULTIPLE_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_SQUARE_BRACKET:
      case STRING_WITH_LC_AHEAD:
      case STRING_WITH_UC_AHEAD:
      case STRING_WITH_UNDERSCORE_AHEAD:
      case START_SINGLE_QUOTE:
      case START_DOUBLE_QUOTE:
        obj = RuleOrMetaRule();
         entries.add(obj);
        break;
      case START_SINGLE_LINE_COMMENT:
      case START_SINGLE_LINE_COMMENT2:
      case START_MULTIPLE_LINE_COMMENT:
        comment = Comment();
         entries.add(comment);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
   {if (true) return entries;}
    throw new Error("Missing return statement in function");
  }

  final public Object RuleOrMetaRule() throws ParseException {
  HeadLiteral headLiteral;
  StringDescription ruleSeparator = null;
  StringDescription id = null;
  ArrayList list = null;
  Field field;
  Token t;
  int endOffset;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_WITH_LC_AHEAD:
    case STRING_WITH_UC_AHEAD:
    case STRING_WITH_UNDERSCORE_AHEAD:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      headLiteral = HeadLiteral();
      if (jj_2_1(2147483647)) {
        jj_consume_token(DOT);
        field = Field();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RULE_SEPARATOR:
          ruleSeparator = RuleSeparator();
          list = MetaLiteralList();
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        t = jj_consume_token(DOT);
                endOffset = calculateOffset(t.endLine, t.endColumn);
                {if (true) return new MetaRule(new MetaHeadLiteral(headLiteral, field), ruleSeparator, list, endOffset);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RULE_SEPARATOR:
        case DOT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RULE_SEPARATOR:
            ruleSeparator = RuleSeparator();
            list = LiteralList();
            break;
          default:
            jj_la1[4] = jj_gen;
            ;
          }
          t = jj_consume_token(DOT);
                endOffset = calculateOffset(t.endLine, t.endColumn);
            {if (true) return new Rule(null, headLiteral, ruleSeparator, list, endOffset);}
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case OPENING_SQUARE_BRACKET:
      jj_consume_token(OPENING_SQUARE_BRACKET);
      id = Id();
      jj_consume_token(CLOSING_SQUARE_BRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        field = Field();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RULE_SEPARATOR:
          ruleSeparator = RuleSeparator();
          list = MetaLiteralList();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        t = jj_consume_token(DOT);
                endOffset = calculateOffset(t.endLine, t.endColumn);
                {if (true) return new MetaRule(new MetaHeadLiteral(id, field), ruleSeparator, list, endOffset);}
        break;
      case STRING_WITH_LC_AHEAD:
      case STRING_WITH_UC_AHEAD:
      case STRING_WITH_UNDERSCORE_AHEAD:
      case START_SINGLE_QUOTE:
      case START_DOUBLE_QUOTE:
        headLiteral = HeadLiteral();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RULE_SEPARATOR:
          ruleSeparator = RuleSeparator();
          list = LiteralList();
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        t = jj_consume_token(DOT);
                endOffset = calculateOffset(t.endLine, t.endColumn);
                {if (true) return new Rule(id, headLiteral, ruleSeparator, list, endOffset);}
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
  SpecialLiteral specialLiteral;
  StringDescription negSymbol = null;
  StringDescription stringDescription = null;
  ArrayList list = null;
  StringDescription operator = null;
  StringDescription termAfter = null;
  StringDescription termBefore = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARATION:
    case CREDENTIAL:
    case IN:
    case NEG_SYMBOL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARATION:
      case CREDENTIAL:
      case IN:
        specialLiteral = SpecialLiteral();
       {if (true) return new Literal(specialLiteral);}
        break;
      case NEG_SYMBOL:
        negSymbol = NegSymbol();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      termBefore = Number();
      operator = Operator();
      termAfter = Term();
       {if (true) return new Literal(negSymbol, termBefore, operator, termAfter);}
      break;
    case STRING_WITH_LC_AHEAD:
    case STRING_WITH_UC_AHEAD:
    case STRING_WITH_UNDERSCORE_AHEAD:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_WITH_LC_AHEAD:
      case START_SINGLE_QUOTE:
      case START_DOUBLE_QUOTE:
        stringDescription = StringConstant();
        break;
      case STRING_WITH_UC_AHEAD:
      case STRING_WITH_UNDERSCORE_AHEAD:
        stringDescription = Variable();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_BRACKET:
      case OPENING_SQUARE_BRACKET:
      case OPERATOR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENING_SQUARE_BRACKET:
          jj_consume_token(OPENING_SQUARE_BRACKET);
          list = FieldList();
          jj_consume_token(CLOSING_SQUARE_BRACKET);
           {if (true) return new Literal(negSymbol, new HeadLiteral(new ComplexTerm(stringDescription, list)));}
          break;
        case OPERATOR:
          operator = Operator();
          termAfter = Term();
           {if (true) return new Literal(negSymbol, stringDescription, operator, termAfter);}
          break;
        case OPENING_BRACKET:
          jj_consume_token(OPENING_BRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING_WITH_LC_AHEAD:
          case STRING_WITH_UC_AHEAD:
          case STRING_WITH_UNDERSCORE_AHEAD:
          case NUMBER:
          case START_SINGLE_QUOTE:
          case START_DOUBLE_QUOTE:
            list = ArgumentList();
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
          jj_consume_token(CLOSING_BRACKET);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
       {if (true) return new Literal(negSymbol, new HeadLiteral(new PredicateLiteral(stringDescription, list)));}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MetaLiteral MetaLiteral() throws ParseException {
  StringDescription negSymbol = null;
  SpecialLiteral specialLiteral;
  StringDescription termBefore;
  StringDescription operator;
  StringDescription termAfter;
  StringDescription id;
  StringDescription stringDescription;
  Field field = null;
  ArrayList list = null;
  boolean isPredicateLiteral = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARATION:
    case CREDENTIAL:
    case IN:
    case NEG_SYMBOL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARATION:
      case CREDENTIAL:
      case IN:
        specialLiteral = SpecialLiteral();
       {if (true) return new MetaLiteral(new Literal(specialLiteral));}
        break;
      case NEG_SYMBOL:
        negSymbol = NegSymbol();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENING_SQUARE_BRACKET:
      jj_consume_token(OPENING_SQUARE_BRACKET);
      id = Constant();
      jj_consume_token(CLOSING_SQUARE_BRACKET);
      jj_consume_token(DOT);
      field = Field();
       {if (true) return new MetaLiteral(negSymbol, new MetaHeadLiteral(id, field));}
      break;
    case NUMBER:
      termBefore = Number();
      operator = Operator();
      termAfter = Term();
       {if (true) return new MetaLiteral(new Literal(negSymbol, termBefore, operator, termAfter));}
      break;
    case STRING_WITH_UC_AHEAD:
    case STRING_WITH_UNDERSCORE_AHEAD:
      stringDescription = Variable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_SQUARE_BRACKET:
        jj_consume_token(OPENING_SQUARE_BRACKET);
        list = FieldList();
        jj_consume_token(CLOSING_SQUARE_BRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          field = Field();
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
                if (field != null) {
                        // MetaHeadLiteral
                        {if (true) return new MetaLiteral(negSymbol, new MetaHeadLiteral(new HeadLiteral(new ComplexTerm(stringDescription, list)), field));}
                } else {
                        // HeadLiteral
                        {if (true) return new MetaLiteral(new Literal(negSymbol, new HeadLiteral(new ComplexTerm(stringDescription, list))));}
                }
        break;
      case OPERATOR:
        operator = Operator();
        termAfter = Term();
           {if (true) return new MetaLiteral(new Literal(negSymbol, stringDescription, operator, termAfter));}
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case STRING_WITH_LC_AHEAD:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      stringDescription = StringConstant();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_SQUARE_BRACKET:
        jj_consume_token(OPENING_SQUARE_BRACKET);
        list = FieldList();
        jj_consume_token(CLOSING_SQUARE_BRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          field = Field();
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
                if (field != null) {
                        // MetaHeadLiteral
                        {if (true) return new MetaLiteral(negSymbol, new MetaHeadLiteral(new HeadLiteral(new ComplexTerm(stringDescription, list)), field));}
                } else {
                        // HeadLiteral
                        {if (true) return new MetaLiteral(new Literal(negSymbol, new HeadLiteral(new ComplexTerm(stringDescription, list))));}
                }
        break;
      case OPERATOR:
        operator = Operator();
        termAfter = Term();
           {if (true) return new MetaLiteral(new Literal(negSymbol, stringDescription, operator, termAfter));}
        break;
      default:
        jj_la1[24] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENING_BRACKET:
          jj_consume_token(OPENING_BRACKET);
             isPredicateLiteral = true;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING_WITH_LC_AHEAD:
          case STRING_WITH_UC_AHEAD:
          case STRING_WITH_UNDERSCORE_AHEAD:
          case NUMBER:
          case START_SINGLE_QUOTE:
          case START_DOUBLE_QUOTE:
            list = ArgumentList();
            break;
          default:
            jj_la1[22] = jj_gen;
            ;
          }
          jj_consume_token(CLOSING_BRACKET);
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
        if (jj_2_2(2147483647)) {
          jj_consume_token(DOT);
          field = Field();
        } else {
          ;
        }
                if (field != null) {
                        // MetaHeadLiteral
                        if (isPredicateLiteral) {
                                {if (true) return new MetaLiteral(negSymbol, new MetaHeadLiteral(new HeadLiteral(new PredicateLiteral(stringDescription, list)), field));}
                        } else {
                                {if (true) return new MetaLiteral(negSymbol, new MetaHeadLiteral(new HeadLiteral(stringDescription), field));}
                        }
                } else {
                        // HeadLiteral
                        if (isPredicateLiteral) {
                                {if (true) return new MetaLiteral(new Literal(negSymbol, new HeadLiteral(new PredicateLiteral(stringDescription, list))));}
                        } else {
                                {if (true) return new MetaLiteral(new Literal(negSymbol, new HeadLiteral(stringDescription)));}
                        }
                }
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayList MetaLiteralList() throws ParseException {
  ArrayList list = new ArrayList();
  MetaLiteral metaLiteral;
    metaLiteral = MetaLiteral();
   list.add(metaLiteral);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      metaLiteral = MetaLiteral();
     list.add(metaLiteral);
    }
   {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList MetaBody() throws ParseException {
  ArrayList metaBody = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARATION:
    case CREDENTIAL:
    case IN:
    case OPENING_SQUARE_BRACKET:
    case NEG_SYMBOL:
    case STRING_WITH_LC_AHEAD:
    case STRING_WITH_UC_AHEAD:
    case STRING_WITH_UNDERSCORE_AHEAD:
    case NUMBER:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      metaBody = MetaLiteralList();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
   {if (true) return metaBody;}
    throw new Error("Missing return statement in function");
  }

  final public MetaHeadLiteral MetaHeadLiteral() throws ParseException {
  Field field;
  StringDescription id = null;
  HeadLiteral headLiteral = null;
  boolean hasId = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENING_SQUARE_BRACKET:
      jj_consume_token(OPENING_SQUARE_BRACKET);
      id = Id();
      jj_consume_token(CLOSING_SQUARE_BRACKET);
       hasId = true;
      break;
    case STRING_WITH_LC_AHEAD:
    case STRING_WITH_UC_AHEAD:
    case STRING_WITH_UNDERSCORE_AHEAD:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      headLiteral = HeadLiteral();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DOT);
    field = Field();
    if (hasId) {if (true) return new MetaHeadLiteral(id, field);}
    else {if (true) return new MetaHeadLiteral(headLiteral, field);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList Body() throws ParseException {
  ArrayList body = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARATION:
    case CREDENTIAL:
    case IN:
    case NEG_SYMBOL:
    case STRING_WITH_LC_AHEAD:
    case STRING_WITH_UC_AHEAD:
    case STRING_WITH_UNDERSCORE_AHEAD:
    case NUMBER:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      body = LiteralList();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
   {if (true) return body;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList LiteralList() throws ParseException {
  ArrayList list = new ArrayList();
  Literal literal;
    literal = Literal();
   list.add(literal);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      literal = Literal();
     list.add(literal);
    }
   {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public SpecialLiteral SpecialLiteral() throws ParseException {
  Function function;
  PackageCall packageCall;
  StringDescription id;
  AnyTerm anyTerm;
  SpecialLiteral specialLiteral;
  Token t;
  StringDescription commandWord;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
      t = jj_consume_token(IN);
        commandWord = new StringDescription(t.image,
                                   calculateOffset(t.beginLine, t.beginColumn),
                                   calculateOffset(t.endLine, t.endColumn),
                                   StringDescription.RESERVED_WORD_TYPE);
      jj_consume_token(OPENING_BRACKET);
      function = Function();
      jj_consume_token(COMMA);
      packageCall = PackageCall();
      jj_consume_token(CLOSING_BRACKET);
       specialLiteral = new SpecialLiteral(commandWord, function, packageCall);
      break;
    case DECLARATION:
      t = jj_consume_token(DECLARATION);
        commandWord = new StringDescription(t.image,
                                   calculateOffset(t.beginLine, t.beginColumn),
                                   calculateOffset(t.endLine, t.endColumn),
                                   StringDescription.RESERVED_WORD_TYPE);
      jj_consume_token(OPENING_BRACKET);
      id = Id();
      jj_consume_token(COMMA);
      anyTerm = AnyTerm();
      jj_consume_token(CLOSING_BRACKET);
       specialLiteral = new SpecialLiteral(commandWord, true, id, anyTerm);
      break;
    case CREDENTIAL:
      t = jj_consume_token(CREDENTIAL);
        commandWord = new StringDescription(t.image,
                                   calculateOffset(t.beginLine, t.beginColumn),
                                   calculateOffset(t.endLine, t.endColumn),
                                   StringDescription.RESERVED_WORD_TYPE);
      jj_consume_token(OPENING_BRACKET);
      id = Id();
      jj_consume_token(COMMA);
      anyTerm = AnyTerm();
      jj_consume_token(CLOSING_BRACKET);
       specialLiteral = new SpecialLiteral(commandWord, false, id, anyTerm);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return specialLiteral;}
    throw new Error("Missing return statement in function");
  }

  final public Directive Directive() throws ParseException {
  StringDescription str = null;
  StringDescription commandWord = null;
  Token t = null;
    t = jj_consume_token(INCLUDE);
    commandWord = new StringDescription(t.image,
                                   calculateOffset(t.beginLine, t.beginColumn),
                                   calculateOffset(t.endLine, t.endColumn),
                                   StringDescription.RESERVED_WORD_TYPE);
    str = StringQuoted();
   {if (true) return new Directive(commandWord, str);}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Comment() throws ParseException {
  StringBuffer buff = new StringBuffer();
  Token t;
  int beginOffset, endOffset;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case START_SINGLE_LINE_COMMENT:
      t = jj_consume_token(START_SINGLE_LINE_COMMENT);
        buff.append(t.image);
        beginOffset = calculateOffset(t.beginLine, t.beginColumn);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_5;
        }
        t = jj_consume_token(ANY_CHAR);
         buff.append((char)t.image.charAt(0));
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END_SINGLE_LINE_COMMENT:
        t = jj_consume_token(END_SINGLE_LINE_COMMENT);
         buff.append(t.image);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      break;
    case START_SINGLE_LINE_COMMENT2:
      t = jj_consume_token(START_SINGLE_LINE_COMMENT2);
        buff.append(t.image);
        beginOffset = calculateOffset(t.beginLine, t.beginColumn);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_6;
        }
        t = jj_consume_token(ANY_CHAR);
         buff.append((char)t.image.charAt(0));
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END_SINGLE_LINE_COMMENT:
        t = jj_consume_token(END_SINGLE_LINE_COMMENT);
         buff.append(t.image);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      break;
    case START_MULTIPLE_LINE_COMMENT:
      t = jj_consume_token(START_MULTIPLE_LINE_COMMENT);
        buff.append(t.image);
        beginOffset = calculateOffset(t.beginLine, t.beginColumn);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANY_CHARACTER:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_7;
        }
        t = jj_consume_token(ANY_CHARACTER);
         buff.append((char)t.image.charAt(0));
      }
      t = jj_consume_token(END_MULTIPLE_LINE_COMMENT);
       buff.append(t.image);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        endOffset = calculateOffset(t.endLine, t.endColumn);
    {if (true) return new StringDescription(buff.toString(), beginOffset, endOffset, StringDescription.COMMENT_TYPE);}
    throw new Error("Missing return statement in function");
  }

  final public HeadLiteral HeadLiteral() throws ParseException {
  StringDescription stringDescription;
  ArrayList list = null;
  boolean isStringConstant = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_WITH_UC_AHEAD:
    case STRING_WITH_UNDERSCORE_AHEAD:
      stringDescription = Variable();
      jj_consume_token(OPENING_SQUARE_BRACKET);
      list = FieldList();
      jj_consume_token(CLOSING_SQUARE_BRACKET);
       {if (true) return new HeadLiteral(new ComplexTerm(stringDescription, list));}
      break;
    case STRING_WITH_LC_AHEAD:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      stringDescription = StringConstant();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_BRACKET:
      case OPENING_SQUARE_BRACKET:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENING_SQUARE_BRACKET:
          jj_consume_token(OPENING_SQUARE_BRACKET);
          list = FieldList();
          jj_consume_token(CLOSING_SQUARE_BRACKET);
           {if (true) return new HeadLiteral(new ComplexTerm(stringDescription, list));}
          break;
        case OPENING_BRACKET:
          jj_consume_token(OPENING_BRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING_WITH_LC_AHEAD:
          case STRING_WITH_UC_AHEAD:
          case STRING_WITH_UNDERSCORE_AHEAD:
          case NUMBER:
          case START_SINGLE_QUOTE:
          case START_DOUBLE_QUOTE:
            list = ArgumentList();
            break;
          default:
            jj_la1[38] = jj_gen;
            ;
          }
           isStringConstant = false;
          jj_consume_token(CLOSING_BRACKET);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
        if (isStringConstant) {
          {if (true) return new HeadLiteral(stringDescription);}
        } else {
          {if (true) return new HeadLiteral(new PredicateLiteral(stringDescription, list));}
        }
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Argument Argument() throws ParseException {
  StringDescription stringDescription;
  ArrayList list = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_WITH_LC_AHEAD:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      stringDescription = StringConstant();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_BRACKET:
      case OPENING_SQUARE_BRACKET:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENING_BRACKET:
          jj_consume_token(OPENING_BRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING_WITH_LC_AHEAD:
          case STRING_WITH_UC_AHEAD:
          case STRING_WITH_UNDERSCORE_AHEAD:
          case NUMBER:
          case START_SINGLE_QUOTE:
          case START_DOUBLE_QUOTE:
            list = ArgumentList();
            break;
          default:
            jj_la1[42] = jj_gen;
            ;
          }
          jj_consume_token(CLOSING_BRACKET);
           {if (true) return new Argument(new PredicateLiteral(stringDescription, list));}
          break;
        case OPENING_SQUARE_BRACKET:
          jj_consume_token(OPENING_SQUARE_BRACKET);
          list = FieldList();
          jj_consume_token(CLOSING_SQUARE_BRACKET);
            if (list != null) {if (true) return new Argument(new AnyTerm(new ComplexTerm(stringDescription, list)));}
            else {if (true) return new Argument(new AnyTerm(stringDescription));}
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
       {if (true) return new Argument(new AnyTerm(stringDescription));}
      break;
    case STRING_WITH_UC_AHEAD:
    case STRING_WITH_UNDERSCORE_AHEAD:
    case NUMBER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        stringDescription = Number();
        break;
      case STRING_WITH_UC_AHEAD:
      case STRING_WITH_UNDERSCORE_AHEAD:
        stringDescription = Variable();
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_SQUARE_BRACKET:
        jj_consume_token(OPENING_SQUARE_BRACKET);
        list = FieldList();
        jj_consume_token(CLOSING_SQUARE_BRACKET);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
        if (list != null) {if (true) return new Argument(new AnyTerm(new ComplexTerm(stringDescription, list)));}
        else {if (true) return new Argument(new AnyTerm(stringDescription));}
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayList ArgumentList() throws ParseException {
  ArrayList list = new ArrayList();
  Argument argument;
    argument = Argument();
   list.add(argument);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      argument = Argument();
     list.add(argument);
    }
   {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public PredicateLiteral PredicateLiteral() throws ParseException {
  StringDescription predicate;
  ArrayList argumentList = null;
    predicate = Predicate();
    jj_consume_token(OPENING_BRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_WITH_LC_AHEAD:
    case STRING_WITH_UC_AHEAD:
    case STRING_WITH_UNDERSCORE_AHEAD:
    case NUMBER:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      argumentList = ArgumentList();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(CLOSING_BRACKET);
   {if (true) return(new PredicateLiteral(predicate, argumentList));}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Number() throws ParseException {
  Token t;
    t = jj_consume_token(NUMBER);
    int beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    int endOffset = calculateOffset(t.endLine, t.endColumn);
    {if (true) return(new StringDescription(t.image, beginOffset, endOffset, StringDescription.NUMBER_TYPE));}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription StringConstant() throws ParseException {
  Token t = null;
  StringDescription stringDescription = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      stringDescription = StringQuoted();
       {if (true) return stringDescription;}
      break;
    case STRING_WITH_LC_AHEAD:
      t = jj_consume_token(STRING_WITH_LC_AHEAD);
        int beginOffset = calculateOffset(t.beginLine, t.beginColumn);
        int endOffset = calculateOffset(t.endLine, t.endColumn);
        {if (true) return new StringDescription(t.image, beginOffset, endOffset, StringDescription.STRING_CONSTANT_TYPE);}
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Variable() throws ParseException {
  Token t = null;
  StringDescription stringDescription = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_WITH_UC_AHEAD:
      t = jj_consume_token(STRING_WITH_UC_AHEAD);
      break;
    case STRING_WITH_UNDERSCORE_AHEAD:
      t = jj_consume_token(STRING_WITH_UNDERSCORE_AHEAD);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    int beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    int endOffset = calculateOffset(t.endLine, t.endColumn);
    {if (true) return new StringDescription(t.image, beginOffset, endOffset, StringDescription.VARIABLE_TYPE);}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Operator() throws ParseException {
  Token t = null;
  int beginOffset, endOffset;
    t = jj_consume_token(OPERATOR);
    beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    endOffset = calculateOffset(t.endLine, t.endColumn);
    {if (true) return(new StringDescription(t.image, beginOffset, endOffset, StringDescription.OPERATOR_TYPE));}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription NegSymbol() throws ParseException {
  Token t = null;
  int beginOffset, endOffset;
    t = jj_consume_token(NEG_SYMBOL);
    beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    endOffset = calculateOffset(t.endLine, t.endColumn);
    {if (true) return(new StringDescription(t.image, beginOffset, endOffset, StringDescription.NEG_SYMBOL_TYPE));}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription RuleSeparator() throws ParseException {
  Token t = null;
  int beginOffset, endOffset;
    t = jj_consume_token(RULE_SEPARATOR);
    beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    endOffset = calculateOffset(t.endLine, t.endColumn);
    {if (true) return(new StringDescription(t.image, beginOffset, endOffset, StringDescription.RULE_SEPARATOR_TYPE));}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Constant() throws ParseException {
  StringDescription stringDescription = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_WITH_LC_AHEAD:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      stringDescription = StringConstant();
      break;
    case NUMBER:
      stringDescription = Number();
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    stringDescription.addType(StringDescription.CONSTANT_TYPE);
    {if (true) return stringDescription;}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription StringQuoted() throws ParseException {
  StringBuffer buff = new StringBuffer();
  Token t;
  int beginOffset, endOffset;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case START_SINGLE_QUOTE:
      t = jj_consume_token(START_SINGLE_QUOTE);
        buff.append((char)t.image.charAt(0));
        beginOffset = calculateOffset(t.beginLine, t.beginColumn);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_9;
        }
        t = jj_consume_token(ANY_CHAR);
         buff.append((char)t.image.charAt(0));
      }
      t = jj_consume_token(END_SINGLE_QUOTE);
        buff.append((char)t.image.charAt(0));
        endOffset = calculateOffset(t.endLine, t.endColumn);
      break;
    case START_DOUBLE_QUOTE:
      t = jj_consume_token(START_DOUBLE_QUOTE);
        buff.append((char)t.image.charAt(0));
        beginOffset = calculateOffset(t.beginLine, t.beginColumn);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_10;
        }
        t = jj_consume_token(ANY_CHAR);
         buff.append((char)t.image.charAt(0));
      }
      t = jj_consume_token(END_DOUBLE_QUOTE);
        endOffset = calculateOffset(t.endLine, t.endColumn);
        buff.append((char)t.image.charAt(0));
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return new StringDescription(buff.toString(), beginOffset, endOffset, StringDescription.QUOTED_TYPE);}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Attribute() throws ParseException {
  StringDescription stringDescription = null;
    stringDescription = StringConstant();
    stringDescription.addType(StringDescription.ATTRIBUTE_TYPE);
    {if (true) return stringDescription;}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Value() throws ParseException {
  StringDescription stringDescription = null;
    stringDescription = Term();
    stringDescription.addType(StringDescription.VALUE_TYPE);
    {if (true) return stringDescription;}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Predicate() throws ParseException {
  StringDescription stringDescription = null;
    stringDescription = StringConstant();
    stringDescription.addType(StringDescription.PREDICATE_TYPE);
    {if (true) return stringDescription;}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Package() throws ParseException {
  StringDescription stringDescription = null;
    stringDescription = StringConstant();
    stringDescription.addType(StringDescription.PACKAGE_TYPE);
    {if (true) return stringDescription;}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Term() throws ParseException {
  StringDescription stringDescription;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_WITH_UC_AHEAD:
    case STRING_WITH_UNDERSCORE_AHEAD:
      stringDescription = Variable();
      break;
    case STRING_WITH_LC_AHEAD:
    case NUMBER:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      stringDescription = Constant();
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    stringDescription.addType(StringDescription.TERM_TYPE);
    {if (true) return stringDescription;}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Id() throws ParseException {
  StringDescription stringDescription = null;
    stringDescription = Constant();
    stringDescription.addType(StringDescription.ID_TYPE);
    {if (true) return stringDescription;}
    throw new Error("Missing return statement in function");
  }

  final public Field Field() throws ParseException {
  StringDescription attribute;
  StringDescription value;
    attribute = Attribute();
    jj_consume_token(SEMICOLON);
    value = Value();
   {if (true) return new Field(attribute, value);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList FieldList() throws ParseException {
  ArrayList list = new ArrayList();
  Field field;
    field = Field();
   list.add(field);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      field = Field();
     list.add(field);
    }
   {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList TermList() throws ParseException {
  ArrayList list = new ArrayList();
  StringDescription term;
    term = Term();
   list.add(term);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      term = Term();
     list.add(term);
    }
   {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Function Function() throws ParseException {
  StringDescription predicate;
  boolean hasBrackets = false;
  ArrayList termList = null;
    predicate = Predicate();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENING_BRACKET:
      jj_consume_token(OPENING_BRACKET);
     hasBrackets = true;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_WITH_LC_AHEAD:
      case STRING_WITH_UC_AHEAD:
      case STRING_WITH_UNDERSCORE_AHEAD:
      case NUMBER:
      case START_SINGLE_QUOTE:
      case START_DOUBLE_QUOTE:
        termList = TermList();
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      jj_consume_token(CLOSING_BRACKET);
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
   {if (true) return(new Function(predicate, hasBrackets, termList));}
    throw new Error("Missing return statement in function");
  }

  final public ComplexTerm ComplexTerm() throws ParseException {
  ArrayList fieldList;
  StringDescription stringDescription;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_WITH_UC_AHEAD:
    case STRING_WITH_UNDERSCORE_AHEAD:
      stringDescription = Variable();
      break;
    case STRING_WITH_LC_AHEAD:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      stringDescription = StringConstant();
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(OPENING_SQUARE_BRACKET);
    fieldList = FieldList();
    jj_consume_token(CLOSING_SQUARE_BRACKET);
   {if (true) return new ComplexTerm(stringDescription, fieldList);}
    throw new Error("Missing return statement in function");
  }

  final public AnyTerm AnyTerm() throws ParseException {
  StringDescription term = null;
  ArrayList fieldList = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      term = Number();
       {if (true) return new AnyTerm(term);}
      break;
    case STRING_WITH_LC_AHEAD:
    case STRING_WITH_UC_AHEAD:
    case STRING_WITH_UNDERSCORE_AHEAD:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      term = Term();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_SQUARE_BRACKET:
        jj_consume_token(OPENING_SQUARE_BRACKET);
        fieldList = FieldList();
        jj_consume_token(CLOSING_SQUARE_BRACKET);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
        if (fieldList != null) {if (true) return new AnyTerm(new ComplexTerm(term, fieldList));}
        else {if (true) return new AnyTerm(term);}
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PackageCall PackageCall() throws ParseException {
  StringDescription packageName;
  Function function;
    packageName = Package();
    jj_consume_token(SEMICOLON);
    function = Function();
   {if (true) return new PackageCall(packageName, function);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(ANY_CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(START_SINGLE_QUOTE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_SINGLE_QUOTE)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(STRING_WITH_LC_AHEAD)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(ANY_CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(START_DOUBLE_QUOTE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_DOUBLE_QUOTE)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  public ProtuneParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[64];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x20,0x3e380800,0x3e380800,0x4000,0x4000,0x24000,0x4000,0x4000,0x63a0000,0x6380800,0x21c0,0x21c0,0x6380000,0x6b80000,0x40a00,0x40a00,0x6b80000,0x21c0,0x21c0,0x20000,0x40800,0x20000,0x6b80000,0x200,0x40800,0x6b80800,0x8000,0x6b829c0,0x6380800,0x6b821c0,0x8000,0x1c0,0x0,0x40000000,0x0,0x40000000,0x0,0x38000000,0x6b80000,0xa00,0xa00,0x6380000,0x6b80000,0xa00,0xa00,0xb00000,0x800,0x6b80000,0x8000,0x6b80000,0x6080000,0x300000,0x6880000,0x0,0x0,0x6000000,0x6b80000,0x8000,0x8000,0x6b80000,0x200,0x6380000,0x800,0x6b80000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ProtuneParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public ProtuneParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProtuneParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ProtuneParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProtuneParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ProtuneParser(ProtuneParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ProtuneParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[36];
    for (int i = 0; i < 36; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 64; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
