/* Generated By:JavaCC: Do not edit this line. ProtuneParser.java */
package de.l3s.ppt.protuneparser.javacc;

import java.util.ArrayList;
import de.l3s.ppt.protuneparser.*;
import de.l3s.ppt.log.Logger;
import java.io.IOException;

public class ProtuneParser implements ProtuneParserConstants {
  private String str;
  private int commonOffset = 0;
  private static Logger logger = new Logger(ProtuneParser.class);
  public static final int TABS_SIZE = 8;

  public static ProtuneParser createParser( String str, int commonOffset )
  throws IOException
  {
    logger.debug("createParser() : ENTER");
    logger.debug("createParser() : string to parse = " + str);
    logger.debug("createParser() : commonOffset = " + commonOffset);
    java.io.StringReader sr = new java.io.StringReader( str );
    java.io.Reader r = new java.io.BufferedReader( sr );
    ProtuneParser protuneParser = new ProtuneParser( r );
    protuneParser.str  = str;
    protuneParser.commonOffset = commonOffset;
    logger.debug("createParser() : EXIT");
    return protuneParser;
  }

  public ArrayList parse()
  throws ParseException, IOException
  {
    logger.info("parse() : ENTER");
    ArrayList entries = new ArrayList();

    try {
      entries = Input(entries);
      logger.debug("parse() : input has been parsed in a single run");
    } catch( ParseException e ) {
      logger.debug("parse() : ParseException was thrown, exception was: " + e.toString());
      try {
        entries = skipDamagedPartAndParseAhead(entries);
      } catch (Exception ex) {
        logger.error("parse() : exception was thrown by skipDamagedPartAndParseAhead(), exception was: " + ex.toString());
        logger.error("parse() : marking unparsed tail as damaged part");
        if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
          entries.remove(entries.size() - 1);
          logger.debug("parse() : removing last entry");
        }
        entries.add(new Integer(str.length() - 1 + commonOffset));
        logger.debug("parse() : adding an entry");
      }
    } catch( TokenMgrError ex ) {
      logger.debug("parse() : TokenMgrError was thrown, exception was: " + ex.toString());
      try {
        entries = skipDamagedPartAndParseAhead(entries);
      } catch (Exception e) {
        logger.error("parse() : exception was thrown by skipDamagedPartAndParseAhead(), exception was: " + e.toString());
        logger.error("parse() : marking unparsed tail as damaged part");
        if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
          entries.remove(entries.size() - 1);
          logger.debug("parse() : removing last entry");
        }
        entries.add(new Integer(str.length() - 1 + commonOffset));
        logger.debug("parse() : adding an entry");
      }
    }
    logger.info("parse() : number of parsed entries = " + entries.size());
    logger.info("parse() : EXIT");
    return entries;
  }

  private int calculateOffset(int line, int column) {
    int offset = 0;
    for (int i = 0; i < line - 1; i++) {
      offset = str.indexOf('\n', offset) + 1;
      if (offset == 0) {
        logger.error("calculateOffset() : can not calculate offset for: line; column: " + line + "; " + column);
        offset = -1;
        break;
      }
    }
    if (offset != -1) {
      if (str.charAt(offset) == '\r') {
        offset++;
      }
      for (int columnNumber = 0; columnNumber < column - 1; columnNumber++) {
        if (str.charAt(offset) == '\t') {
          columnNumber += TABS_SIZE - (columnNumber - (int) (columnNumber / TABS_SIZE) * TABS_SIZE) - 1;
        }
        offset++;
      }
      //does not work with tabs:
      //offset += column - 1;
      offset += commonOffset;
    }
    return offset;
  }

  private ArrayList skipDamagedPartAndParseAhead(ArrayList parsedEntries)
    throws ParseException, IOException {

    logger.debug("skipDamagedPartAndParseAhead() : ENTER");
    ArrayList entries = (ArrayList)parsedEntries.clone();

    int offset = 0;
    if (entries == null) {
      entries = new ArrayList();
    }
    logger.debug("skipDamagedPartAndParseAhead() : entries size on enter: " + entries.size());
    if (entries.size() != 0) {
      if (entries.get(entries.size() - 1) instanceof Rule) {
        offset = ((Rule)entries.get(entries.size() - 1)).offsetInInput;
      } else if (entries.get(entries.size() - 1) instanceof Directive) {
        offset = ((Directive)entries.get(entries.size() - 1)).offsetInInput;
      } else {
        offset = ((Integer)entries.get(entries.size() - 1)).intValue();
      }
      offset++;
      offset -= commonOffset;
      if (offset < str.length() && str.charAt(offset) == '\r') {
        offset++;
      }
    }
    logger.debug("skipDamagedPartAndParseAhead() : offset on enter: " + offset);

    boolean done = false;
    int dotOffset = str.indexOf(Constants.DOT, offset);
    int delimiterOffset = str.indexOf('\n', offset);

    logger.debug("skipDamagedPartAndParseAhead() : dotOffset: " + dotOffset);
    logger.debug("skipDamagedPartAndParseAhead() : delimiterOffset: " + delimiterOffset);

    if (dotOffset == -1 && delimiterOffset == -1) {
      if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
        entries.remove(entries.size() - 1);
        logger.debug("skipDamagedPartAndParseAhead() : removing last entry");
      }
      entries.add(new Integer(str.length() - 1 + commonOffset));
      logger.debug("skipDamagedPartAndParseAhead() : adding an entry");
      done = true;
      logger.debug("skipDamagedPartAndParseAhead() : done: " + done);
    } else {
      if (dotOffset == -1 && delimiterOffset != -1) {
        offset = delimiterOffset + 1;
        if (offset < str.length() && str.charAt(offset) == '\r') {
          offset++;
        }
      }
      if (dotOffset != -1 && delimiterOffset == -1) {
        offset = dotOffset + Constants.DOT.length();
      }
      if (dotOffset != -1 && delimiterOffset != -1) {
        if (dotOffset < delimiterOffset) {
          offset = dotOffset + Constants.DOT.length();
        } else {
          offset = delimiterOffset + 1;
          if (offset < str.length() && str.charAt(offset) == '\r') {
            offset++;
          }
        }
      }
      logger.debug("skipDamagedPartAndParseAhead() : offset: " + offset);
      logger.debug("skipDamagedPartAndParseAhead() : done: " + done);
      if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
        entries.remove(entries.size() - 1);
        logger.debug("skipDamagedPartAndParseAhead() : removing last entry");
      }
      entries.add(new Integer(offset - 1 + commonOffset));
      logger.debug("skipDamagedPartAndParseAhead() : adding an entry");
    }
    if (!done) {
      ArrayList tail = new ArrayList();
      if (offset < str.length()) {
        logger.debug("skipDamagedPartAndParseAhead() : creating new parser to parse the tail");
        ProtuneParser parser = ProtuneParser.createParser(str.substring(offset), offset + commonOffset);
        tail = parser.parse();
        logger.debug("skipDamagedPartAndParseAhead() : tail size: " + tail.size());
        if (entries.size() != 0
           && entries.get(entries.size() - 1) instanceof Integer
           && tail.size() != 0
           && tail.get(0) instanceof Integer) {
         entries.remove(entries.size() - 1);
         logger.debug("skipDamagedPartAndParseAhead() : removing last entry");
        }
        for (int i = 0; i < tail.size(); i++) {
          logger.debug("skipDamagedPartAndParseAhead() : adding tail element to the entries");
          Object obj = tail.get(i);
          entries.add(obj);
        }
      } else {
        if (entries.size() != 0 && entries.get(entries.size() - 1) instanceof Integer) {
          entries.remove(entries.size() - 1);
          logger.debug("skipDamagedPartAndParseAhead() : removing last entry");
        }
        entries.add(new Integer(str.length() - 1 + commonOffset));
        logger.debug("skipDamagedPartAndParseAhead() : adding an entry");
      }
    }
    logger.debug("skipDamagedPartAndParseAhead() : entries size on exit: " + entries.size());
    logger.debug("skipDamagedPartAndParseAhead() : EXIT");
    return entries;
  }

  final public ArrayList Input(ArrayList entries) throws ParseException {
  Directive directive = null;
  Rule rule = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      directive = Directive();
     entries.add(directive);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case DECLARATION:
      case LOWER_CASE:
      case UPPER_CASE:
      case UNDERSCORE:
      case OPENING_SQUARE_BRACKET:
      case NEG_SYMBOL:
      case START_SINGLE_QUOTE:
      case START_DOUBLE_QUOTE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      rule = Rule();
     entries.add(rule);
    }
    jj_consume_token(0);
   {if (true) return entries;}
    throw new Error("Missing return statement in function");
  }

  final public Directive Directive() throws ParseException {
  StringDescription str = null;
  StringDescription commandWord = null;
  Token t = null;
    t = jj_consume_token(INCLUDE);
    commandWord = new StringDescription(t.image,
                                   calculateOffset(t.beginLine, t.beginColumn),
                                   calculateOffset(t.endLine, t.endColumn));
    str = StringQuoted();
   {if (true) return new Directive(commandWord, str);}
    throw new Error("Missing return statement in function");
  }

  final public Rule Rule() throws ParseException {
  StringDescription id = null;
  StringDescription idSeparator = null;
  StringDescription negSymbolHead = null;
  Literal literalHead = null;
  MetaLiteral metaLiteralHead = null;
  ArrayList list = new ArrayList();
  boolean isMetaHead = false;
  StringDescription attribute = null;
  Term value = null;
  StringDescription ruleSep = null;
  StringDescription variable = null;
  Object obj = null;
  Token t = null;
  int offset;
    if (jj_2_1(2147483647)) {
      id = Constant();
      idSeparator = IdSeparator();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEG_SYMBOL:
      negSymbolHead = NegSymbol();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    literalHead = Literal();
    if (jj_2_2(2147483647)) {
      jj_consume_token(DOT);
      attribute = Constant();
      jj_consume_token(SEMICOLON);
      value = Term();
        metaLiteralHead = new MetaLiteral(negSymbolHead, literalHead, attribute, value);
        isMetaHead = true;
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RULE_SEPARATOR:
      ruleSep = RuleSeparator();
      obj = LiteralOrMetaLiteralOrComplexTerm();
     list.add(obj);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        obj = LiteralOrMetaLiteralOrComplexTerm();
       list.add(obj);
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    t = jj_consume_token(DOT);
    offset = calculateOffset(t.endLine, t.endColumn);
    if (isMetaHead) {
      // meta rule parsed
      {if (true) return new Rule(id, idSeparator, metaLiteralHead, ruleSep, list, offset);}
    } else {
      // normal rule parsed
      {if (true) return new Rule(id, idSeparator, negSymbolHead, literalHead, ruleSep, list, offset);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Object LiteralOrMetaLiteralOrComplexTerm() throws ParseException {
  StringDescription negSymbol = null;
  Object obj = null;
  Term value = null;
  StringDescription attribute = null;
  boolean isMetaLiteral = false;
  StringDescription variable = null;
  Literal literal = null;
    if (jj_2_4(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEG_SYMBOL:
        negSymbol = NegSymbol();
         isMetaLiteral = true;
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      literal = Literal();
      if (jj_2_3(2147483647)) {
        jj_consume_token(DOT);
        attribute = Constant();
        jj_consume_token(SEMICOLON);
        value = Term();
           isMetaLiteral = true;
      } else {
        ;
      }
        if (isMetaLiteral) {
          obj = new MetaLiteral(negSymbol, literal, attribute, value);
        } else {
          obj = literal;
        }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UPPER_CASE:
      case UNDERSCORE:
        variable = Variable();
        jj_consume_token(DOT);
        attribute = Constant();
        jj_consume_token(SEMICOLON);
        value = Term();
         obj = new ComplexTerm(variable, attribute, value);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return obj;}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription StringConstant() throws ParseException {
  StringBuffer buff = new StringBuffer();
  char c;
  Token t = null;
  int beginOffset, endOffset;
    t = jj_consume_token(LOWER_CASE);
    buff.append((char)t.image.charAt(0));
    beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case LOWER_CASE:
      case UPPER_CASE:
      case UNDERSCORE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        t = jj_consume_token(DIGIT);
        break;
      case LOWER_CASE:
        t = jj_consume_token(LOWER_CASE);
        break;
      case UPPER_CASE:
        t = jj_consume_token(UPPER_CASE);
        break;
      case UNDERSCORE:
        t = jj_consume_token(UNDERSCORE);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     if (t.specialToken != null) {
       {if (true) throw new ParseException("whitespace(s) in a string");}
     }
     c = (char)t.image.charAt(0);
     buff.append(c);
    }
    endOffset = calculateOffset(t.endLine, t.endColumn);
    {if (true) return(new StringDescription(buff.toString(), beginOffset, endOffset));}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription StringDigit() throws ParseException {
  StringBuffer buff = new StringBuffer();
  char c;
  Token t = null;
  int beginOffset, endOffset;
    t = jj_consume_token(DIGIT);
    buff.append((char)t.image.charAt(0));
    beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case LOWER_CASE:
      case UPPER_CASE:
      case UNDERSCORE:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        t = jj_consume_token(DIGIT);
        break;
      case LOWER_CASE:
        t = jj_consume_token(LOWER_CASE);
        break;
      case UPPER_CASE:
        t = jj_consume_token(UPPER_CASE);
        break;
      case UNDERSCORE:
        t = jj_consume_token(UNDERSCORE);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     if (t.specialToken != null) {
       {if (true) throw new ParseException("whitespace(s) in a string");}
     }
     c = (char)t.image.charAt(0);
     buff.append(c);
    }
    endOffset = calculateOffset(t.endLine, t.endColumn);
    {if (true) return(new StringDescription(buff.toString(), beginOffset, endOffset));}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Variable() throws ParseException {
  StringBuffer buff = new StringBuffer();
  char c;
  Token t = null;
  int beginOffset, endOffset;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UPPER_CASE:
      t = jj_consume_token(UPPER_CASE);
      break;
    case UNDERSCORE:
      t = jj_consume_token(UNDERSCORE);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    buff.append((char)t.image.charAt(0));
    beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case LOWER_CASE:
      case UPPER_CASE:
      case UNDERSCORE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        t = jj_consume_token(DIGIT);
        break;
      case LOWER_CASE:
        t = jj_consume_token(LOWER_CASE);
        break;
      case UPPER_CASE:
        t = jj_consume_token(UPPER_CASE);
        break;
      case UNDERSCORE:
        t = jj_consume_token(UNDERSCORE);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     if (t.specialToken != null) {
       {if (true) throw new ParseException("whitespace(s) in a string");}
     }
     c = (char)t.image.charAt(0);
     buff.append(c);
    }
    endOffset = calculateOffset(t.endLine, t.endColumn);
    {if (true) return(new StringDescription(buff.toString(), beginOffset, endOffset));}
    throw new Error("Missing return statement in function");
  }

  final public VariableBinding VariableBinding() throws ParseException {
  StringDescription variable = null;
  StringDescription constant = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UPPER_CASE:
    case UNDERSCORE:
      variable = Variable();
      jj_consume_token(EQUAL);
      constant = Constant();
      break;
    case DIGIT:
    case LOWER_CASE:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      constant = Constant();
      jj_consume_token(EQUAL);
      variable = Variable();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return new VariableBinding(variable, constant);}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Operator() throws ParseException {
  Token t = null;
  int beginOffset, endOffset;
    t = jj_consume_token(OPERATOR);
    beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    endOffset = calculateOffset(t.endLine, t.endColumn);
    {if (true) return(new StringDescription(t.image, beginOffset, endOffset));}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription IdSeparator() throws ParseException {
  Token t = null;
  int beginOffset, endOffset;
    t = jj_consume_token(ID_SEPARATOR);
    beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    endOffset = calculateOffset(t.endLine, t.endColumn);
    {if (true) return(new StringDescription(t.image, beginOffset, endOffset));}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription NegSymbol() throws ParseException {
  Token t = null;
  int beginOffset, endOffset;
    t = jj_consume_token(NEG_SYMBOL);
    beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    endOffset = calculateOffset(t.endLine, t.endColumn);
    {if (true) return(new StringDescription(t.image, beginOffset, endOffset));}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription RuleSeparator() throws ParseException {
  Token t = null;
  int beginOffset, endOffset;
    t = jj_consume_token(RULE_SEPARATOR);
    beginOffset = calculateOffset(t.beginLine, t.beginColumn);
    endOffset = calculateOffset(t.endLine, t.endColumn);
    {if (true) return(new StringDescription(t.image, beginOffset, endOffset));}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList VariableBindingList() throws ParseException {
  ArrayList list = new ArrayList();
  VariableBinding binding = null;
    binding = VariableBinding();
   list.add(binding);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      binding = VariableBinding();
     list.add(binding);
    }
   {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription Constant() throws ParseException {
  StringDescription str = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGIT:
      str = StringDigit();
      break;
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      str = StringQuoted();
      break;
    case LOWER_CASE:
      str = StringConstant();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return str;}
    throw new Error("Missing return statement in function");
  }

  final public StringDescription StringQuoted() throws ParseException {
  StringBuffer buff = new StringBuffer();
  Token t;
  int beginOffset, endOffset;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case START_SINGLE_QUOTE:
      t = jj_consume_token(START_SINGLE_QUOTE);
        buff.append((char)t.image.charAt(0));
        beginOffset = calculateOffset(t.beginLine, t.beginColumn);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_8;
        }
        t = jj_consume_token(ANY_CHAR);
         buff.append((char)t.image.charAt(0));
      }
      t = jj_consume_token(END_SINGLE_QUOTE);
        buff.append((char)t.image.charAt(0));
        endOffset = calculateOffset(t.endLine, t.endColumn);
      break;
    case START_DOUBLE_QUOTE:
      t = jj_consume_token(START_DOUBLE_QUOTE);
        buff.append((char)t.image.charAt(0));
        beginOffset = calculateOffset(t.beginLine, t.beginColumn);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        t = jj_consume_token(ANY_CHAR);
         buff.append((char)t.image.charAt(0));
      }
      t = jj_consume_token(END_DOUBLE_QUOTE);
        endOffset = calculateOffset(t.endLine, t.endColumn);
        buff.append((char)t.image.charAt(0));
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return new StringDescription(buff.toString(), beginOffset, endOffset);}
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
  Literal literal = null;
  ArrayList list = null;
  StringDescription str = null;
  boolean isVariable = false;
  Term termBefore = null;
  Term termAfter = null;
  StringDescription operator = null;
  Arguments arguments = null;
  Token t = null;
  StringDescription commandWord = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARATION:
    case LOWER_CASE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARATION:
        t = jj_consume_token(DECLARATION);
          commandWord = new StringDescription(t.image,
                                   calculateOffset(t.beginLine, t.beginColumn),
                                   calculateOffset(t.endLine, t.endColumn));
        jj_consume_token(OPENING_BRACKET);
        jj_consume_token(OPENING_SQUARE_BRACKET);
        list = VariableBindingList();
         literal = new Literal(commandWord, list);
        jj_consume_token(CLOSING_SQUARE_BRACKET);
        jj_consume_token(CLOSING_BRACKET);
        break;
      case LOWER_CASE:
        str = StringConstant();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPERATOR:
          operator = Operator();
          termAfter = Term();
             literal = new Literal(new Term(false, str), operator, termAfter);
          break;
        default:
          jj_la1[20] = jj_gen;
          arguments = Arguments();
             literal = new Literal(str, arguments);
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case DIGIT:
    case UPPER_CASE:
    case UNDERSCORE:
    case OPENING_SQUARE_BRACKET:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      // ignore warning messsage about choice conflict here:
            termBefore = Term();
      operator = Operator();
      termAfter = Term();
       literal = new Literal(termBefore, operator, termAfter);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

  final public Term Term() throws ParseException {
  ArrayList list = new ArrayList();
  Term term = null;
  StringDescription str = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENING_SQUARE_BRACKET:
      jj_consume_token(OPENING_SQUARE_BRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case LOWER_CASE:
      case UPPER_CASE:
      case UNDERSCORE:
      case OPENING_SQUARE_BRACKET:
      case START_SINGLE_QUOTE:
      case START_DOUBLE_QUOTE:
        term = Term();
         list.add(term);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          term = Term();
           list.add(term);
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(CLOSING_SQUARE_BRACKET);
       term = new Term(list);
      break;
    case UPPER_CASE:
    case UNDERSCORE:
      str = Variable();
       term = new Term(true, str);
      break;
    case DIGIT:
    case LOWER_CASE:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      str = Constant();
       term = new Term(false, str);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public ComplexTerm ComplexTerm() throws ParseException {
  StringDescription variable = null;
  StringDescription attribute = null;
  Term value = null;
    variable = Variable();
    jj_consume_token(DOT);
    attribute = Constant();
    jj_consume_token(SEMICOLON);
    value = Term();
   {if (true) return new ComplexTerm(variable, attribute, value);}
    throw new Error("Missing return statement in function");
  }

  final public Argument Argument() throws ParseException {
  Token t = null;
  StringDescription str = null;
  StringDescription function = null;
  Term term = null;
  ArrayList list = new ArrayList();
  Arguments arguments = null;
  Argument argument = null;
  boolean isVariable = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOWER_CASE:
      str = StringConstant();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        function = StringConstant();
        jj_consume_token(OPENING_BRACKET);
        term = Term();
        jj_consume_token(CLOSING_BRACKET);
           argument = new Argument(str, function, term);
        break;
      default:
        jj_la1[26] = jj_gen;
        arguments = Arguments();
           argument = new Argument(str, arguments);
      }
      break;
    case DIGIT:
    case UPPER_CASE:
    case UNDERSCORE:
    case START_SINGLE_QUOTE:
    case START_DOUBLE_QUOTE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_SINGLE_QUOTE:
      case START_DOUBLE_QUOTE:
        str = StringQuoted();
        break;
      case UPPER_CASE:
      case UNDERSCORE:
        str = Variable();
           isVariable = true;
        break;
      case DIGIT:
        str = StringDigit();
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       argument = new Argument(new Term(isVariable, str));
      break;
    case OPENING_SQUARE_BRACKET:
      jj_consume_token(OPENING_SQUARE_BRACKET);
      term = Term();
       list.add(term);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        term = Term();
         list.add(term);
      }
      jj_consume_token(CLOSING_SQUARE_BRACKET);
       argument = new Argument(new Term(list));
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return argument;}
    throw new Error("Missing return statement in function");
  }

  final public Arguments Arguments() throws ParseException {
  ArrayList list = new ArrayList();
  Argument argument = null;
  boolean exists = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENING_BRACKET:
      jj_consume_token(OPENING_BRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case LOWER_CASE:
      case UPPER_CASE:
      case UNDERSCORE:
      case OPENING_SQUARE_BRACKET:
      case START_SINGLE_QUOTE:
      case START_DOUBLE_QUOTE:
        argument = Argument();
       list.add(argument);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[30] = jj_gen;
            break label_12;
          }
          jj_consume_token(COMMA);
          argument = Argument();
         list.add(argument);
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(CLOSING_BRACKET);
     exists = true;
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    if (exists) {
      {if (true) return new Arguments(list);}
    } else {
      {if (true) return new Arguments();}
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(LOWER_CASE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(DECLARATION)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_scan_token(OPENING_SQUARE_BRACKET)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(CLOSING_SQUARE_BRACKET)) return true;
    if (jj_scan_token(CLOSING_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  final private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(OPENING_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSING_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(ANY_CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(NEG_SYMBOL)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(START_DOUBLE_QUOTE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_DOUBLE_QUOTE)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(ID_SEPARATOR)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(ANY_CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(OPENING_SQUARE_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSING_SQUARE_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(OPENING_SQUARE_BRACKET)) return true;
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSING_SQUARE_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(DIGIT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(START_SINGLE_QUOTE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_SINGLE_QUOTE)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_28()) return true;
    if (jj_3R_29()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_29()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(CLOSING_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  public ProtuneParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x40,0x180a7a0,0x8000,0x20000,0x10000,0x8000,0x600,0x720,0x720,0x720,0x720,0x600,0x720,0x720,0x1800720,0x20000,0x1800120,0x10000000,0x10000000,0x1800000,0x200000,0x180,0x18027a0,0x20000,0x1802720,0x1802720,0x80000,0x1800620,0x20000,0x1802720,0x20000,0x1802720,0x800,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ProtuneParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProtuneParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ProtuneParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProtuneParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ProtuneParser(ProtuneParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ProtuneParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[29];
    for (int i = 0; i < 29; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
