/**
 * Copyright 2004
 * 
 * This file is part of Peertrust.
 * 
 * Peertrust is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * Peertrust is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Peertrust; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
package org.peertrust.event;

/**
 * <p>
 * Receives events of the system and distributes them to the registered classes. 
 * Any EventDispatcher should implement this interface.
 * </p><p>
 * $Id: EventDispatcher.java,v 1.3 2005/05/22 17:56:46 dolmedilla Exp $
 * <br/>
 * Date: 05-Dec-2003
 * <br/>
 * Last changed: $Date: 2005/05/22 17:56:46 $
 * by $Author: dolmedilla $
 * </p>
 * @author olmedilla 
 */
public interface EventDispatcher extends PTEventListener {

    /**
     * Registers the listener for all events generated by this object.
     * 
     * @param listener object to register with this component
     */
    public void register(PTEventListener listener);
    
    
    /**
     * Removes the specified listener from this dispatcher.
     * 
     * @param listener object to remove from this components listeners
     * @return true, if removal was successfull
     */
    public boolean unregister(PTEventListener listener);


	/**
	 * Register the listener for only for certain type of events.
	 * @param listener object to register with this component
	 * @param event type of events the listener is interested in
     * @see #register(EventListener)
	 */    
	public void register(PTEventListener listener, Class event);

}
