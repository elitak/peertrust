/* Generated By:JavaCC: Do not edit this line. ProtunePrologParser.java */
package org.peertrust.parser.protune;

import java.io.*;
import java.util.*;

public class ProtunePrologParser implements ProtunePrologParserConstants {

        private Vector rules;
        private Vector metarules;

        public void init(){

                rules=new Vector();
                metarules=new Vector();
        }

        public Vector getRules(){
                return rules;
        }

        public Vector getMetarules(){
                return metarules;
        }

        /*------------------------------------------------------------------------------------------------------*/
        /*private functions*/

        //transforms the body
        private String process_body(Vector body){

                //for keeping the complex_terms
                Vector complex_terms=new Vector();

                //for keeping the result
                StringBuffer sb=new StringBuffer();

                //process the body in reverse order as the complex_term will always be after the predicates in which they where defined
                for(int i=body.size()-1;i>=0;i--){

                        Object literal=body.get(i);

                        if(complex_terms.isEmpty()){

                                if(is_complex_term(literal)){

                                        complex_terms.add(literal);
                                }
                                else{

                                        String s=inline_literal(literal);

                                        if(sb.length()!=0)
                                                s=s.concat(",");
                                        sb.insert(0,s);
                                }
                        }
                        else{

                                if(is_complex_term(literal)){

                                        String id=(String)(((Vector)literal).get(1));
                                        String lastid=(String)((Vector)(complex_terms.get(0))).get(1);

                                        //it's from the same complex_term
                                        if(id.compareTo(lastid)==0){

                                                complex_terms.add(literal);
                                        }
                                        else{

                                                String s=rebuild_complex_term(complex_terms);

                                                if(sb.length()!=0)
                                                        s=s.concat(",");
                                                sb.insert(0,s);

                                                complex_terms.clear();
                                                complex_terms.add(literal);
                                        }
                                }
                                else{

                                        Vector v=integrate_complex_term(literal,complex_terms);

                                        String s=(String)v.get(0);
                                        if(v.size()>1)
                                                s=s.concat(","+(String)v.get(1));

                                        complex_terms.clear();

                                        if(sb.length()!=0)
                                                s=s.concat(",");
                                        sb.insert(0,s);
                                }
                        }
                }

                return sb.toString();
        }

        /*------------------------------------------------------*/
        //checks if a literal is a complex_term
        private boolean is_complex_term(Object literal){

                if(literal instanceof Vector){

                        String s=(String)(((Vector)literal).get(0));

                        if(s.compareTo("complex_term")==0)
                                return true;
                }

                return false;
        }

        /*------------------------------------------------------*/
        //constructs the image of a literal
        private String inline_literal(Object literal){

                if(literal instanceof String)
                        return (String)literal;

                StringBuffer sb=new StringBuffer();

                String pred=(String)(((Vector)literal).get(0));
                sb.append(pred);
                sb.append("(");

                Vector args=(Vector)(((Vector)literal).get(1));
                for(Iterator it=args.iterator();it.hasNext();){

                        sb.append(inline_literal(it.next()));
                        if(it.hasNext())
                                sb.append(",");
                }

                sb.append(")");

                return sb.toString();
        }

        /*------------------------------------------------------*/
        //rebuilds a complex term from its components
        private String rebuild_complex_term(Vector complex_terms){

                //get the id for all the complex terms
                String id=(String)(((Vector)(complex_terms.get(0))).get(1));

                StringBuffer sb=new StringBuffer();

                sb.append(id);
                sb.append("[");

                for(int i=complex_terms.size()-1;i>=0;i--){

                        Vector complex_term=(Vector)complex_terms.get(i);
                        sb.append((String)(complex_term.get(2)));
                        if(i>0)
                                sb.append(",");
                }

                sb.append("]");

                return sb.toString();
        }

        /*------------------------------------------------------*/
        //integrates the complex_term into the literal if the literal referes it
        private boolean ct_flag;
        private Vector integrate_complex_term(Object literal,Vector complex_terms){

                //get de id of the complex terms
                String id=(String)(((Vector)(complex_terms.get(0))).get(1));

                //construct the complex term
                String complex_term=rebuild_complex_term(complex_terms);

                //update the literal with the complex_term
                ct_flag=false;
                Object new_literal=update_literal(literal,id,complex_term);

                String s=inline_literal(new_literal);

                Vector v=new Vector(2);
                v.add(s);

                if(ct_flag==false)
                        v.add(complex_term);

                return v;
        }

        /*------------------------------------------------------*/
        //updates the literal that references id with the image of the complex_term
        private Object update_literal(Object literal,String id,String complex_term){

                if(literal instanceof String){

                        if(id.compareTo((String)literal)==0){

                                ct_flag=true;
                                return complex_term;
                        }
                }
                else{

                        Vector args=(Vector)((Vector)literal).get(1);

                        Vector new_args=new Vector(args.size());
                        for(Iterator it=args.iterator();it.hasNext();){

                                Object new_arg=update_literal(it.next(),id,complex_term);
                                new_args.add(new_arg);
                        }

                        ((Vector)literal).setElementAt(new_args,1);
                }

                return literal;
        }

        /*------------------------------------------------------*/
        //extract the complex_term heads from the vector of rules
        private Vector extract_complex_terms(Vector rules){

                Vector v=new Vector(rules.size());

                for(Iterator it=rules.iterator();it.hasNext();)
                        v.add(((Vector)it.next()).get(1));

                return v;
        }


        /*------------------------------------------------------*/
        //building the rules
    private void building_rules(){

        Vector new_rules=new Vector();
        Vector complex_terms=new Vector();

        for(int i=rules.size()-1;i>=0;i--){

                //extract the current rule and the head of the rule
                Vector rule=(Vector)rules.get(i);
                Object head=rule.get(1);

                if(complex_terms.isEmpty()){

                        if(is_complex_term(head)){

                                complex_terms.add(rule);
                        }
                        else{

                                StringBuffer sb=new StringBuffer();
                                sb.append("["+(String)rule.get(0)+"]");
                                sb.append(inline_literal(head));
                                if(rule.size()>2)
                                        sb.append(":-"+(String)rule.get(2));
                                sb.append(".");

                                new_rules.insertElementAt(sb.toString(),0);
                        }
                }
                else{

                        if(is_complex_term(head)){

                                //check if it is from the same complex_term
                                String id=(String)rule.get(0);
                                String lastid=(String)(((Vector)complex_terms.get(0)).get(0));

                                if(id.compareTo(lastid)==0){

                                        complex_terms.add(rule);
                                }
                                else{

                                        StringBuffer sb=new StringBuffer();
                                        sb.append("["+id+"]");

                                        String s=rebuild_complex_term(extract_complex_terms(complex_terms));
                                                sb.append(s);

                                                if(((Vector)complex_terms.get(0)).size()>2)
                                                        sb.append(":-"+(String)((Vector)complex_terms.get(0)).get(2));

                                                sb.append(".");

                                                new_rules.insertElementAt(sb.toString(),0);

                                                complex_terms.clear();
                                                complex_terms.add(rule);
                                }
                        }
                        else{

                                Vector v=integrate_complex_term(head,extract_complex_terms(complex_terms));

                                if(v.size()>1){

                                        String id=(String)((Vector)complex_terms.get(0)).get(0);

                                        String body=null;
                                        if(((Vector)complex_terms.get(0)).size()>2)
                                                body=(String)((Vector)complex_terms.get(0)).get(2);

                                        String s="["+id+"]"+(String)v.get(1);
                                        if(body!=null)
                                                s=s.concat(body);
                                        s=s.concat(".");

                                        new_rules.insertElementAt(s,0);
                                }

                                StringBuffer sb=new StringBuffer();
                                sb.append("["+(String)rule.get(0)+"]");
                                sb.append(v.get(0));
                                if(rule.size()>2)
                                        sb.append(":-"+rule.get(2));
                                sb.append(".");

                                new_rules.insertElementAt(sb.toString(),0);

                                        complex_terms.clear();
                        }
                }
        }

                rules=new_rules;

        }

        public static String translate(String policy) throws Exception{

                ProtunePrologParser parser=new ProtunePrologParser(new BufferedReader(new StringReader(policy)));
                parser.init();
                parser.start();
                parser.building_rules();

                StringBuffer sb=new StringBuffer();
                for(Iterator it=parser.getRules().iterator();it.hasNext();)
                        sb.append((String)it.next()+"\n");
                for(Iterator it=parser.getMetarules().iterator();it.hasNext();)
                        sb.append((String)it.next()+"\n");

                return sb.toString();
        }

        /*------------------------------------------------------------------------------------------------------*/
        public static void main(String args[]) throws ParseException,TokenMgrError{


                try{
                        String s=ProtunePrologParser.translate("rule(r1,fact(X),[]).");
                        System.out.println(s);
                }catch(Exception e){
                        e.printStackTrace();
                }

/*
		Parser parser=null;
		try{
			
			parser=new Parser(new FileReader("./config/policy_code_samples/OnlineLibrary/LibraryPolicy.prolog"));
			parser.init();
			parser.start();
			parser.building_rules();
			
			for(Iterator it=parser.getRules().iterator();it.hasNext();)
				System.out.println((String)it.next());
			for(Iterator it=parser.getMetarules().iterator();it.hasNext();)
				System.out.println((String)it.next());
			
		}catch(Exception e){
			e.printStackTrace();
			return;
		}
*/
        }

/*----------------------------------------------------------------------------------------------------------*/
  final public String StringConstant() throws ParseException {
        Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case STRING_QUOTED:
      t = jj_consume_token(STRING_QUOTED);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String Constant() throws ParseException {
        Token t=null;
        String s=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
                {if (true) return t.image;}
      break;
    case IDENTIFIER:
    case STRING_QUOTED:
      s = StringConstant();
                {if (true) return s;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public void start() throws ParseException, Exception {
        Vector rule=null;
        String metarule=null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RULE:
        rule = Rule();
                        rules.add( rule);
        break;
      case METARULE:
        metarule = MetaRule();
                        metarules.add( metarule);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RULE:
      case METARULE:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Vector Rule() throws ParseException {
        String id=null;
        Object head=null;
        Object body=null;
    jj_consume_token(RULE);
    jj_consume_token(25);
    id = Id();
    jj_consume_token(26);
    head = Head();
    jj_consume_token(26);
    jj_consume_token(27);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPLEX_TERM:
    case NEGATION:
    case IN:
    case DECLARATION:
    case CREDENTIAL:
    case VARIABLE:
    case IDENTIFIER:
    case STRING_QUOTED:
    case NUMBER:
      body = Body(new Vector());
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(28);
    jj_consume_token(29);
    jj_consume_token(30);
                Vector rule=new Vector(3);

                rule.add(id);
                rule.add(head);
                if(body!=null)
                        rule.add(body);

                {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String Id() throws ParseException {
        String ct=null;
    ct = Constant();
                {if (true) return ct;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Object Head() throws ParseException {
        String s=null;
        Vector v=null;
    if (jj_2_1(2)) {
      v = Predicate();
                {if (true) return v;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case STRING_QUOTED:
        s = StringConstant();
                {if (true) return s;}
        break;
      case COMPLEX_TERM:
        v = ComplexTerm();
                {if (true) return v;}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Vector Predicate() throws ParseException {
        String pred=null;
        Vector args=null;

        Vector v=null;
    pred = StringConstant();
    jj_consume_token(25);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
    case IDENTIFIER:
    case STRING_QUOTED:
    case NUMBER:
      args = Arguments(new Vector());
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(29);
                if(args==null){

                        v=new Vector(1);
                        v.add(pred);
                }
                else{

                        v=new Vector(2);
                        v.add(pred);
                        v.add(args);
                }

                {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Vector ComplexTerm() throws ParseException {
        Token t=null;
        String s=null;
        String atr=null;
        String val=null;
    jj_consume_token(COMPLEX_TERM);
    jj_consume_token(25);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      t = jj_consume_token(VARIABLE);
      break;
    case IDENTIFIER:
    case STRING_QUOTED:
      s = StringConstant();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(26);
    atr = StringConstant();
    jj_consume_token(26);
    val = Term();
    jj_consume_token(29);
                Vector v=new Vector(3);

                v.add("complex_term");

                if(s==null)
                        s=t.image;

                v.add(s);
                v.add(atr+":"+val);

                {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Vector Arguments(Vector v) throws ParseException {
        Object arg=null;
        Vector args=null;
    arg = Argument();
                v.add(arg);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      args = Arguments(v);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                if(args==null)
                        {if (true) return v;}

                {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Object Argument() throws ParseException {
        Token t=null;
        Vector v=null;
        String s=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
                {if (true) return t.image;}
      break;
    default:
      jj_la1[9] = jj_gen;
      if (jj_2_2(2)) {
        v = Predicate();
                {if (true) return v;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
          t = jj_consume_token(VARIABLE);
                {if (true) return t.image;}
          break;
        case IDENTIFIER:
        case STRING_QUOTED:
          s = StringConstant();
                {if (true) return s;}
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Object Literal() throws ParseException {
        Object o=null;
        String s=null;
    if (jj_2_4(2)) {
      s = Comparison();
                {if (true) return s;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPLEX_TERM:
      case IDENTIFIER:
      case STRING_QUOTED:
        o = Head();
                {if (true) return o;}
        break;
      case NEGATION:
        jj_consume_token(NEGATION);
        jj_consume_token(25);
        if (jj_2_3(2)) {
          s = Comparison();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMPLEX_TERM:
          case IDENTIFIER:
          case STRING_QUOTED:
            o = Head();
            break;
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(29);
                if(o!=null){

                        Vector v=new Vector(2);
                        v.add("not");

                        Vector args=new Vector(1);
                        args.add(o);

                        v.add(args);

                        {if (true) return v;}
                }

                {if (true) return "not("+s+")";}
        break;
      case IN:
      case DECLARATION:
      case CREDENTIAL:
        o = SpecialLiteral();
                {if (true) return o;}
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Object SpecialLiteral() throws ParseException {
        Token t=null;
        String id=null;
        String s=null;
        String f1=null;
        String terms1=null;
        String f2=null;
        String terms2=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARATION:
    case CREDENTIAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREDENTIAL:
        t = jj_consume_token(CREDENTIAL);
        break;
      case DECLARATION:
        t = jj_consume_token(DECLARATION);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(25);
      id = Constant();
      jj_consume_token(26);
      s = Term();
      jj_consume_token(29);
                Vector v=new Vector(2);
                v.add(t.image);

                Vector args=new Vector(2);
                args.add(id);
                args.add(s);

                v.add(args);

                {if (true) return v;}
      break;
    case IN:
      jj_consume_token(IN);
      jj_consume_token(25);
      f1 = StringConstant();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        jj_consume_token(25);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
        case IDENTIFIER:
        case STRING_QUOTED:
        case NUMBER:
          terms1 = Terms();
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(29);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(26);
      s = StringConstant();
      jj_consume_token(26);
      f2 = StringConstant();
      jj_consume_token(26);
      jj_consume_token(27);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case IDENTIFIER:
      case STRING_QUOTED:
      case NUMBER:
        terms2 = Terms();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(28);
      jj_consume_token(29);
                StringBuffer sb=new StringBuffer();

                sb.append("in(");
                sb.append(f1+"(");
                if(terms1!=null)
                        sb.append(terms1);
                sb.append("),");
                sb.append(s+":");
                sb.append(f2+"(");
                if(terms2!=null)
                        sb.append(terms2);
                sb.append(")");
                sb.append(")");

                {if (true) return sb.toString();}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String Term() throws ParseException {
        Token t=null;
        String s=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      t = jj_consume_token(VARIABLE);
                {if (true) return t.image;}
      break;
    case IDENTIFIER:
    case STRING_QUOTED:
    case NUMBER:
      s = Constant();
                {if (true) return s;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String Terms() throws ParseException {
        String term=null;
        String terms=null;
    term = Term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      terms = Terms();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
                if(terms==null)
                        {if (true) return term;}

                {if (true) return term+","+terms;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String Comparison() throws ParseException {
        String t1=null;
        String t2=null;
        Token op=null;
    t1 = Term();
    op = jj_consume_token(OPERATOR);
    t2 = Term();
                {if (true) return t1+" "+op.image+" "+t2;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Object Body(Vector v) throws ParseException {
        Object literal=null;
        Object body=null;
    literal = Literal();
                v.add(literal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      body = Body(v);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
                if(body!=null)
                        {if (true) return body;}

                String s=process_body(v);
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
//
  final public String MetaRule() throws ParseException {
        String metahead=null;
        Object metabody=null;
    jj_consume_token(METARULE);
    jj_consume_token(25);
    metahead = MetaHead();
    jj_consume_token(26);
    jj_consume_token(27);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METARULE:
    case COMPLEX_TERM:
    case NEGATION:
    case IN:
    case DECLARATION:
    case CREDENTIAL:
    case VARIABLE:
    case IDENTIFIER:
    case STRING_QUOTED:
    case NUMBER:
      metabody = MetaBody(new Vector());
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(28);
    jj_consume_token(29);
    jj_consume_token(30);
                String s=null;
                if(metabody!=null){

                        s=(String)metabody;
                        {if (true) return new String(metahead+":-"+s+".");}
                }

                {if (true) return new String(metahead+".");}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
//
  final public String MetaHead() throws ParseException {
        String atr=null;
        String val=null;
        String id=null;
        Object head=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      jj_consume_token(26);
      atr = StringConstant();
      jj_consume_token(25);
      id = Constant();
      jj_consume_token(26);
      val = Term();
      jj_consume_token(29);
                {if (true) return "["+id+"]"+atr+":"+val;}
      break;
    case PRED:
      jj_consume_token(PRED);
      jj_consume_token(26);
      atr = StringConstant();
      jj_consume_token(25);
      head = Head();
      jj_consume_token(26);
      val = Term();
      jj_consume_token(29);
                 if(head instanceof String){

                        String s=(String)head;
                        {if (true) return new String(s+"."+atr+":"+val);}
                 }

                 if(is_complex_term(head)){

                        Vector v=(Vector)head;
                        String s=new String((String)v.get(1)+"."+(String)v.get(2));
                        {if (true) return new String(s+"."+atr+":"+val);}
                 }

                 String s=inline_literal(head);
                 {if (true) return new String(s+"."+atr+":"+val);}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Object MetaBody(Vector v) throws ParseException {
        Object metaliteral=null;
        Object metabody=null;
    metaliteral = MetaLiteral();
                v.add(metaliteral);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      metabody = MetaBody(v);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
                if(metabody!=null)
                        {if (true) return metabody;}

                String s=process_body(v);
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Object MetaLiteral() throws ParseException {
        String metahead=null;
        Object literal=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METARULE:
      jj_consume_token(METARULE);
      jj_consume_token(25);
      metahead = MetaHead();
      jj_consume_token(29);
                {if (true) return metahead;}
      break;
    default:
      jj_la1[24] = jj_gen;
      if (jj_2_5(3)) {
        jj_consume_token(NEGATION);
        jj_consume_token(25);
        jj_consume_token(METARULE);
        jj_consume_token(25);
        metahead = MetaHead();
        jj_consume_token(29);
        jj_consume_token(29);
                {if (true) return "not("+metahead+")";}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMPLEX_TERM:
        case NEGATION:
        case IN:
        case DECLARATION:
        case CREDENTIAL:
        case VARIABLE:
        case IDENTIFIER:
        case STRING_QUOTED:
        case NUMBER:
          literal = Literal();
                {if (true) return literal;}
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_3R_6() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_2()) return true;
    return false;
  }

  final private boolean jj_3R_2() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_2()) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(NEGATION)) return true;
    if (jj_scan_token(25)) return true;
    if (jj_scan_token(METARULE)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_4()) return true;
    return false;
  }

  public ProtunePrologParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xa0000,0x1a0000,0xc0,0xc0,0x1b7c00,0xa0400,0x1b0000,0xb0000,0x4000000,0x100000,0xb0000,0xa0400,0xa7c00,0x6000,0x1b0000,0x2000000,0x1b0000,0x7000,0x1b0000,0x4000000,0x4000000,0x1b7c80,0x300,0x4000000,0x80,0x1b7c00,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ProtunePrologParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public ProtunePrologParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProtunePrologParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ProtunePrologParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProtunePrologParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ProtunePrologParser(ProtunePrologParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ProtunePrologParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[31];
    for (int i = 0; i < 31; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
