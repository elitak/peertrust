/* Generated By:JavaCC: Do not edit this line. Parser.java */
package org.peertrust.parser.protune;

import java.io.*;
import java.util.*;

public class Parser implements ParserConstants {

        private Vector directives;
        private Vector rules;
        private Vector metarules;

//	private Vector ids;

        private String DefaultId;
        private int RuleNr;

        public void init(){

                directives=new Vector();
                rules=new Vector();
                metarules=new Vector();

//		ids=new Vector();

                DefaultId="RuLe_AbC_XyZ#";
                RuleNr=0;
        }

        public Vector getDirectives(){
                return directives;
        }

        public Vector getRules(){
                return rules;
        }

        public Vector getMetarules(){
                return metarules;
        }

        public static void main(String args[]) throws ParseException,TokenMgrError{

                Parser parser=null;
                try{

                        //parser=new Parser(new BufferedReader(new StringReader("author(denisa).")));
                        parser=new Parser(new FileReader("./config/policy_code_samples/exemplu.pro"));
                        parser.init();
                        parser.start();

                        for(Iterator it=parser.getDirectives().iterator();it.hasNext();)
                                System.out.println((String)it.next());
                        for(Iterator it=parser.getRules().iterator();it.hasNext();)
                                System.out.println((String)it.next());
                        for(Iterator it=parser.getMetarules().iterator();it.hasNext();)
                                System.out.println((String)it.next());

                }catch(Exception e){
                        e.printStackTrace();
                        return;
                }

        }

/*----------------------------------------------------------------------------------------------------------*/
  final public String StringConstant() throws ParseException {
        Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case STRING_QUOTED:
      t = jj_consume_token(STRING_QUOTED);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String Constant() throws ParseException {
        Token t=null;
        String s=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
         {if (true) return t.image;}
      break;
    case IDENTIFIER:
    case STRING_QUOTED:
      s = StringConstant();
         {if (true) return s;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public void start() throws ParseException, Exception {
        String directive=null;
        String id=null;
        String field=null;
        String metabody=null;
        Vector head=null;
        String body=null;

        String s=null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      directive = Directive();
                 directives.add(directive);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        id = Id();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
          jj_consume_token(22);
          field = Field(false,id);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEPARATOR:
            jj_consume_token(SEPARATOR);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NEGATION:
            case IN:
            case DECLARATION:
            case CREDENTIAL:
            case VARIABLE:
            case IDENTIFIER:
            case STRING_QUOTED:
            case NUMBER:
            case 23:
              metabody = MetaBody();
              break;
            default:
              jj_la1[3] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[4] = jj_gen;
            ;
          }
          jj_consume_token(22);
/*						
						if(ids.contains(id)==false)
							throw new Exception("Metarule id doesn't match any rule id: "+id);
*/
                                                s="";
                                                if(metabody!=null)
                                                        s=metabody;

                                                metarules.add("metarule(id,"+field+",["+s+"]).");

                                                id=null;field=null;metabody=null;
          break;
        case VARIABLE:
        case IDENTIFIER:
        case STRING_QUOTED:
          head = Head();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEPARATOR:
            jj_consume_token(SEPARATOR);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NEGATION:
            case IN:
            case DECLARATION:
            case CREDENTIAL:
            case VARIABLE:
            case IDENTIFIER:
            case STRING_QUOTED:
            case NUMBER:
              body = Body();
              break;
            default:
              jj_la1[5] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          jj_consume_token(22);
/*						
						if(ids.contains(id)==true)
							throw new Exception("Duplicate rule id: "+id);
						
						ids.add(id);
						ids.add(head);
*/

                                                s="";
                                                if(body!=null)
                                                        s=body;

                                                if(head.size()<=2)
                                                        rules.add("rule("+id+","+(String)head.elementAt(0)+",["+s+"]).");

                                                if(head.size()>1){

                                                        for(Iterator it=((Vector)head.elementAt(1)).iterator();it.hasNext();)
                                                                rules.add("rule("+id+","+(String)it.next()+",["+s+"]).");
                                                }

                                                id=null;head=null;body=null;
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case VARIABLE:
      case IDENTIFIER:
      case STRING_QUOTED:
        head = Head();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
          jj_consume_token(22);
          if (jj_2_1(2)) {
            field = Field(false,(String)(head.elementAt(0)));
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEPARATOR:
              jj_consume_token(SEPARATOR);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NEGATION:
              case IN:
              case DECLARATION:
              case CREDENTIAL:
              case VARIABLE:
              case IDENTIFIER:
              case STRING_QUOTED:
              case NUMBER:
              case 23:
                metabody = MetaBody();
                break;
              default:
                jj_la1[8] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[9] = jj_gen;
              ;
            }
            jj_consume_token(22);
          } else {
            ;
          }
                                                if(field==null){

                                                        id=DefaultId+RuleNr;RuleNr++;
/*							
							if(ids.contains(id)==true)
								throw new Exception("Duplicate rule id: "+id);
						
							ids.add(id);
							ids.add(head);
*/
                                                        if(head.size()<=2)
                                                                rules.add("rule("+id+","+(String)head.elementAt(0)+",[]).");

                                                        if(head.size()>1){

                                                                for(Iterator it=((Vector)head.elementAt(1)).iterator();it.hasNext();)
                                                                        rules.add("rule("+id+","+(String)it.next()+",[]).");
                                                        }

                                                        id=null;head=null;
                                                }
                                                else{
/*							
							if(ids.contains(head)==false)
								throw new Exception("Metarule head doesn't match any rule head: "+head);
*/
                                                        s="";

                                                        if(head.size()>1){

                                                                StringBuffer sb=new StringBuffer();
                                                                for(Iterator it=((Vector)head.elementAt(1)).iterator();it.hasNext();){
                                                                        if(sb.length()>0)
                                                                                sb.append(",");
                                                                        sb.append((String)it.next());
                                                                }
                                                                s=sb.toString();
                                                        }

                                                        if(metabody!=null){
                                                                if(s.length()>0)
                                                                        s=s.concat(",");
                                                                s=s.concat(metabody);
                                                        }

                                                        metarules.add("metarule(pred,"+field+",["+s+"]).");

                                                        head=null;field=null;metabody=null;
                                                }
          break;
        case SEPARATOR:
          jj_consume_token(SEPARATOR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEGATION:
          case IN:
          case DECLARATION:
          case CREDENTIAL:
          case VARIABLE:
          case IDENTIFIER:
          case STRING_QUOTED:
          case NUMBER:
            body = Body();
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
          jj_consume_token(22);
                                                id=DefaultId+RuleNr;RuleNr++;
/*						
						if(ids.contains(id)==true)
								throw new Exception("Duplicate rule id: "+id);
					
						ids.add(id);
						ids.add(head);
*/
                                                s="";
                                                if(body!=null)
                                                        s=body;

                                                if(head.size()<=2)
                                                        rules.add("rule("+id+","+(String)head.elementAt(0)+",["+s+"]).");

                                                if(head.size()>1){

                                                        for(Iterator it=((Vector)head.elementAt(1)).iterator();it.hasNext();)
                                                                rules.add("rule("+id+","+(String)it.next()+",["+s+"]).");
                                                }

                                                id=null;head=null;body=null;
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case IDENTIFIER:
      case STRING_QUOTED:
      case 23:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(0);
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String Directive() throws ParseException {
        Token t=null;
    jj_consume_token(INCLUDE);
    t = jj_consume_token(STRING_QUOTED);
                {if (true) return "%include("+t.image+").";}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String Id() throws ParseException {
        String ct=null;
    jj_consume_token(23);
    ct = Constant();
    jj_consume_token(24);
         {if (true) return ct;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Vector Head() throws ParseException {
        Vector predicate=null;
        String s=null;
        Token t=null;
        Vector fields=null;
        Vector v=null;
    if (jj_2_2(2)) {
      predicate = Predicate();
                {if (true) return predicate;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case STRING_QUOTED:
        s = StringConstant();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 23:
          jj_consume_token(23);
          fields = Fields(s,new Vector());
          jj_consume_token(24);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
                if(fields==null){
                        v=new Vector(1);
                        v.add(s);
                }
                else{
                        v=new Vector(3);
                        v.add(s);
                        v.add(fields);
                        v.add(new Boolean(true));
                }

                {if (true) return v;}
        break;
      case VARIABLE:
        t = jj_consume_token(VARIABLE);
        jj_consume_token(23);
        fields = Fields(t.image,new Vector());
        jj_consume_token(24);
                v=new Vector(3);
                v.add(t.image);
                v.add(fields);
                v.add(new Boolean(true));
                {if (true) return v;}
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Vector Predicate() throws ParseException {
        String s=null;
        Vector args=null;
        Vector v=null;
    s = StringConstant();
    jj_consume_token(25);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
    case IDENTIFIER:
    case STRING_QUOTED:
    case NUMBER:
      args = Arguments(new Vector());
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(26);
                if(args==null){

                        v=new Vector(1);
                        v.add(s+"()");
                }
                else{

                        v=new Vector(2);
                        v.add(s+"("+(String)args.elementAt(0)+")");
                        if(args.size()>1)
                                v.add(args.elementAt(1));
                }
                {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Vector Arguments(Vector v) throws ParseException {
        Vector arg=null;
        Vector args=null;
    arg = Argument();
                if(v.isEmpty()){

                        v.add((String)arg.elementAt(0));
                }
                else{

                        String first=(String)v.elementAt(0)+","+(String)arg.elementAt(0);
                        v.setElementAt(first,0);
                }

                if(arg.size()>1){

                        if(v.size()<=1){

                                v.add(arg.elementAt(1));
                        }
                        else{
                                Vector second=(Vector)v.elementAt(1);
                                second.addAll((Vector)arg.elementAt(1));
                                v.setElementAt(second,1);
                        }
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      jj_consume_token(27);
      args = Arguments(v);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
                if(args==null)
                        {if (true) return v;}

                {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Vector Argument() throws ParseException {
        Token t=null;
        Vector predicate=null;
        String s=null;
        Vector fields=null;
        Vector v=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
                v=new Vector(1);
                v.add(t.image);
                {if (true) return v;}
      break;
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_3(2)) {
        predicate = Predicate();
                {if (true) return predicate;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
        case IDENTIFIER:
        case STRING_QUOTED:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VARIABLE:
            t = jj_consume_token(VARIABLE);
            break;
          case IDENTIFIER:
          case STRING_QUOTED:
            s = StringConstant();
            break;
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
         if(s==null)s=t.image;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 23:
            jj_consume_token(23);
            fields = Fields(s,new Vector());
            jj_consume_token(24);
            break;
          default:
            jj_la1[19] = jj_gen;
            ;
          }
                v=new Vector(2);
                v.add(s);
                if(fields!=null)
                        v.add(fields);

                {if (true) return v;}
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Vector Fields(String id,Vector v) throws ParseException {
        String field=null;
        Vector fields=null;
    field = Field(true,id);
                              v.add(field);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      jj_consume_token(27);
      fields = Fields(id,v);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
                if(fields==null)
                        {if (true) return v;}

                {if (true) return fields;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String Field(boolean flag,String id) throws ParseException {
        String attribute=null;
        String value=null;
    attribute = StringConstant();
    jj_consume_token(28);
    value = Term();
                if(flag==true)
                        {if (true) return "complex_term("+id+","+attribute+","+value+")";}

                {if (true) return attribute+"("+id+","+value+")";}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String Term() throws ParseException {
        Token t=null;
        String s=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      t = jj_consume_token(VARIABLE);
         {if (true) return t.image;}
      break;
    case IDENTIFIER:
    case STRING_QUOTED:
    case NUMBER:
      s = Constant();
         {if (true) return s;}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String Body() throws ParseException {
        String literal=null;
        String body=null;
    literal = Literal();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      jj_consume_token(27);
      body = Body();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
                if(body==null)
                        {if (true) return literal;}

                {if (true) return literal+","+body;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String Literal() throws ParseException {
        Token pred=null;
        Vector function=null;
        Vector pc=null;
        String ct=null;
        Token t=null;
        String s=null;
        Vector fields=null;
        Vector head=null;
        String term=null;

        StringBuffer sb=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGATION:
      jj_consume_token(NEGATION);
      if (jj_2_4(2)) {
        term = Term();
        t = jj_consume_token(OPERATOR);
        s = Term();
                         {if (true) return "not("+term+" "+t.image+" "+s+")";}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
        case IDENTIFIER:
        case STRING_QUOTED:
          head = Head();
                                sb=new StringBuffer();

                                if(head.size()<=2)
                                        sb.append("not("+(String)head.elementAt(0)+")");

                                if(head.size()>=2){

                                        if(sb.length()==0)
                                                sb.append("not(");
                                        else
                                                sb.append(",");

                                        boolean first=false;
                                        for(Iterator it=((Vector)head.elementAt(1)).iterator();it.hasNext();){
                                                if(first==false)
                                                        first=true;
                                                else
                                                        sb.append(",");
                                                sb.append((String)it.next());
                                        }

                                        if(head.size()==3)
                                                sb.append(")");
                                }

                                {if (true) return sb.toString();}
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case IN:
      jj_consume_token(IN);
      jj_consume_token(25);
      function = Function();
      jj_consume_token(27);
      pc = PackageCall();
      jj_consume_token(26);
                sb=new StringBuffer("in( ");
                sb.append((String)function.elementAt(0)+"("+(String)function.elementAt(1)+"),");
                sb.append((String)pc.elementAt(0)+","+(String)pc.elementAt(1)+",["+(String)pc.elementAt(2)+"])");

                {if (true) return sb.toString();}
      break;
    case DECLARATION:
    case CREDENTIAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARATION:
        pred = jj_consume_token(DECLARATION);
        break;
      case CREDENTIAL:
        pred = jj_consume_token(CREDENTIAL);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(25);
      ct = Constant();
      jj_consume_token(27);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        t = jj_consume_token(NUMBER);
        break;
      case VARIABLE:
      case IDENTIFIER:
      case STRING_QUOTED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
          t = jj_consume_token(VARIABLE);
          break;
        case IDENTIFIER:
        case STRING_QUOTED:
          s = StringConstant();
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                  if(s==null)s=t.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 23:
          jj_consume_token(23);
          fields = Fields(s,new Vector());
          jj_consume_token(24);
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          if(s==null)s=t.image;
      jj_consume_token(26);
                sb=new StringBuffer(pred.image+"("+ct+","+s+")");

                if(fields!=null){

                        for(Iterator it=fields.iterator();it.hasNext();)
                                sb.append(","+(String)it.next());
                }

                {if (true) return sb.toString();}
      break;
    default:
      jj_la1[30] = jj_gen;
      if (jj_2_5(2)) {
        term = Term();
        t = jj_consume_token(OPERATOR);
        s = Term();
         {if (true) return term+" "+t.image+" "+s;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
        case IDENTIFIER:
        case STRING_QUOTED:
          head = Head();
                sb=new StringBuffer();
                if(head.size()<=2)
                        sb.append((String)head.elementAt(0));

                if(head.size()>1){

                        for(Iterator it=((Vector)head.elementAt(1)).iterator();it.hasNext();){
                                if(sb.length()>0)
                                        sb.append(",");
                                sb.append((String)it.next());
                        }
                }

                {if (true) return sb.toString();}
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Vector Function() throws ParseException {
        String s=null;
        String terms=null;
    s = StringConstant();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      jj_consume_token(25);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case IDENTIFIER:
      case STRING_QUOTED:
      case NUMBER:
        terms = Terms();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(26);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
                Vector v=new Vector(2);
                v.add(s);
                if(terms!=null)
                        v.add(terms);

                {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String Terms() throws ParseException {
        String term=null;
        String terms=null;
    term = Term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      jj_consume_token(27);
      terms = Terms();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
                if(terms==null)
                        {if (true) return term;}

                {if (true) return term+","+terms;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public Vector PackageCall() throws ParseException {
        String s=null;
        Vector f=null;
    s = StringConstant();
    jj_consume_token(28);
    f = Function();
                Vector v=new Vector(3);
                v.add(s);
                v.add(f.elementAt(0));
                if(f.size()>1)
                        v.add(f.elementAt(1));
                {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String MetaBody() throws ParseException {
        String metaliteral=null;
        String metabody=null;
    metaliteral = MetaLiteral();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      jj_consume_token(27);
      metabody = MetaBody();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
                if(metabody==null)
                        {if (true) return metaliteral;}

                {if (true) return metaliteral+","+metabody;}
    throw new Error("Missing return statement in function");
  }

/*----------------------------------------------------------------------------------------------------------*/
  final public String MetaLiteral() throws ParseException {
        Token pred=null;
        Vector function=null;
        Vector pc=null;
        String ct=null;
        Token t=null;
        String s=null;
        Vector fields=null;
        String id=null;
        String field=null;
        Vector head=null;
        String term=null;
        StringBuffer sb=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGATION:
      jj_consume_token(NEGATION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        id = Id();
        jj_consume_token(22);
        field = Field(false,id);
                         {if (true) return "not("+field+")";}
        break;
      default:
        jj_la1[36] = jj_gen;
        if (jj_2_7(2)) {
          term = Term();
          t = jj_consume_token(OPERATOR);
          s = Term();
                         {if (true) return "not("+term+" "+t.image+" "+s+")";}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VARIABLE:
          case IDENTIFIER:
          case STRING_QUOTED:
            head = Head();
            if (jj_2_6(2)) {
              jj_consume_token(22);
              field = Field(false,(String)head.elementAt(0));
            } else {
              ;
            }
                                sb=new StringBuffer();

                                if(field==null){

                                        if(head.size()<=2)
                                                sb.append("not("+(String)head.elementAt(0)+")");
                                }
                                else
                                        sb.append("not("+field+")");

                                if(head.size()>=2){

                                        if(sb.length()==0)
                                                sb.append("not(");
                                        else
                                                sb.append(",");

                                        boolean first=false;
                                        for(Iterator it=((Vector)head.elementAt(1)).iterator();it.hasNext();){
                                                if(first==false)
                                                        first=true;
                                                else
                                                        sb.append(",");
                                                sb.append((String)it.next());
                                        }

                                        if(head.size()==3)
                                                sb.append(")");
                                }

                                {if (true) return sb.toString();}
            break;
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    case IN:
      jj_consume_token(IN);
      jj_consume_token(25);
      function = Function();
      jj_consume_token(27);
      pc = PackageCall();
      jj_consume_token(26);
                sb=new StringBuffer("in( ");
                sb.append((String)function.elementAt(0)+"("+(String)function.elementAt(1)+"), ");
                sb.append((String)pc.elementAt(0)+","+(String)pc.elementAt(1)+",["+(String)pc.elementAt(2)+"])");

                {if (true) return sb.toString();}
      break;
    case DECLARATION:
    case CREDENTIAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARATION:
        pred = jj_consume_token(DECLARATION);
        break;
      case CREDENTIAL:
        pred = jj_consume_token(CREDENTIAL);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(25);
      ct = Constant();
      jj_consume_token(27);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        t = jj_consume_token(NUMBER);
        break;
      case VARIABLE:
      case IDENTIFIER:
      case STRING_QUOTED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
          t = jj_consume_token(VARIABLE);
          break;
        case IDENTIFIER:
        case STRING_QUOTED:
          s = StringConstant();
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                  if(s==null)s=t.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 23:
          jj_consume_token(23);
          fields = Fields(s,new Vector());
          jj_consume_token(24);
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          if(s==null)s=t.image;
      jj_consume_token(26);
                sb=new StringBuffer(pred.image+"("+ct+","+s+")");

                if(fields!=null){

                        for(Iterator it=fields.iterator();it.hasNext();)
                                sb.append(","+(String)it.next());
                }

                {if (true) return sb.toString();}
      break;
    case 23:
      id = Id();
      jj_consume_token(22);
      field = Field(false,id);
         {if (true) return field;}
      break;
    default:
      jj_la1[42] = jj_gen;
      if (jj_2_9(2)) {
        term = Term();
        t = jj_consume_token(OPERATOR);
        s = Term();
         {if (true) return term+" "+t.image+" "+s;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
        case IDENTIFIER:
        case STRING_QUOTED:
          head = Head();
          if (jj_2_8(2)) {
            jj_consume_token(22);
            field = Field(false,(String)head.elementAt(0));
          } else {
            ;
          }
                sb=new StringBuffer();

                if(field==null){
                        if(head.size()<=2)
                                sb.append((String)head.elementAt(0));
                }
                else
                        sb.append(field);

                if(head.size()>1){

                        boolean first=false;
                        if(sb.length()>0)
                                first=true;

                        for(Iterator it=((Vector)head.elementAt(1)).iterator();it.hasNext();){
                                if(first==false)
                                        first=true;
                                else
                                        sb.append(",");
                                sb.append((String)it.next());
                        }
                }

                {if (true) return sb.toString();}
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(22)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(22)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_6()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    }
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x14000,0x34000,0x200,0x837c80,0x100,0x37c80,0x100,0x416000,0x837c80,0x100,0x37c80,0x400100,0x816000,0x816000,0x800000,0x16000,0x36000,0x8000000,0x16000,0x800000,0x20000,0x16000,0x8000000,0x36000,0x8000000,0x16000,0x1800,0x16000,0x800000,0x36000,0x1c80,0x16000,0x36000,0x2000000,0x8000000,0x8000000,0x800000,0x16000,0x1800,0x16000,0x800000,0x36000,0x801c80,0x16000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[29];
    for (int i = 0; i < 29; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
