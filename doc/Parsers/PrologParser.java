/* Generated By:JJTree&JavaCC: Do not edit this line. PrologParser.java */
package org.peertrust.inference.prolog.parser;

import java.io.* ;

public class PrologParser/*@bgen(jjtree)*/implements PrologParserTreeConstants, PrologParserConstants {/*@bgen(jjtree)*/
  protected JJTPrologParserState jjtree = new JJTPrologParserState();public static void main(String args[]) throws ParseException, TokenMgrError
        {
                PrologParser parser = new PrologParser(System.in);
                SimpleNode node = parser.parseGoal() ;
                node.dump("") ;
        }

        public static SimpleNode parseGoal(String goal) throws ParseException
        {
                StringReader sr = new StringReader( goal );
                Reader r = new BufferedReader( sr );
                PrologParser parser = new PrologParser ( r );
                return parser.parseGoal() ;
        }

        void jjtreeOpenNodeScope( Node node )
        {
//		((SimpleNode)node).first_token = getToken(1);
        }

        void jjtreeCloseNodeScope( Node node )
        {
//		((SimpleNode)node).last_token = getToken(0);
        }

// S :- Goal <EOF>
  final public SimpleNode parseGoal() throws ParseException {
    trace_call("parseGoal");
    try {
 /*@bgen(jjtree) parseGoal */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSEGOAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        Goal();
        jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parseGoal");
    }
  }

// Goal :- [SEP] Literal
  final public void Goal() throws ParseException {
    trace_call("Goal");
    try {
 /*@bgen(jjtree) Goal */
  SimpleNode jjtn000 = new SimpleNode(JJTGOAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        if (jj_2_1(2)) {
          jj_consume_token(SEP);
        } else {
          ;
        }
        Literal();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Goal");
    }
  }

// Literal :- [UNARYOP] Atom
  final public void Literal() throws ParseException {
    trace_call("Literal");
    try {
 /*@bgen(jjtree) Literal */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        if (jj_2_2(2)) {
          jj_consume_token(UNARYOP);
        } else {
          ;
        }
        Atom();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Literal");
    }
  }

// Atom :- Predicate() | Predicate "(" TermList ")"
  final public void Atom() throws ParseException {
    trace_call("Atom");
    try {
 /*@bgen(jjtree) Atom */
  SimpleNode jjtn000 = new SimpleNode(JJTATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        Predicate();
        if (jj_2_3(2)) {
          jj_consume_token(13);
          TermList();
          jj_consume_token(14);
        } else {
          ;
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Atom");
    }
  }

// TermList :- Term [TermList]
  final public void TermList() throws ParseException {
    trace_call("TermList");
    try {
 /*@bgen(jjtree) TermList */
  SimpleNode jjtn000 = new SimpleNode(JJTTERMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        Term();
        if (jj_2_4(2)) {
          jj_consume_token(15);
          TermList();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("TermList");
    }
  }

// ArgList :- Argument | Argument "," ArgList
// Term :- Variable | Constant | CompoundTerm | List
  final public void Term() throws ParseException {
    trace_call("Term");
    try {
 /*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        if (jj_2_5(2)) {
          Variable();
        } else if (jj_2_6(2)) {
          Constant();
        } else if (jj_2_7(2)) {
          CompoundTerm();
        } else if (jj_2_8(2)) {
          List();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Term");
    }
  }

// CompoundTerm :- Functor "(" [TermList] ")"
  final public void CompoundTerm() throws ParseException {
    trace_call("CompoundTerm");
    try {
 /*@bgen(jjtree) CompoundTerm */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPOUNDTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        Functor();
        jj_consume_token(13);
        if (jj_2_9(2)) {
          TermList();
        } else {
          ;
        }
        jj_consume_token(14);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("CompoundTerm");
    }
  }

// List :- "[" [TermList] "]"
  final public void List() throws ParseException {
    trace_call("List");
    try {
 /*@bgen(jjtree) List */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        jj_consume_token(16);
        if (jj_2_10(2)) {
          TermList();
        } else {
          ;
        }
        jj_consume_token(17);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("List");
    }
  }

// ELEMENTS

// Letter :- (LOWERLETTER | UPPERLETTER)
  final public void Letter() throws ParseException {
    trace_call("Letter");
    try {
 /*@bgen(jjtree) Letter */
  SimpleNode jjtn000 = new SimpleNode(JJTLETTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        if (jj_2_11(2)) {
          jj_consume_token(LOWERLETTER);
        } else if (jj_2_12(2)) {
          jj_consume_token(UPPERLETTER);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Letter");
    }
  }

// Letters :- (LOWERLETTER | UPPERLETTER)+
  final public void Letters() throws ParseException {
    trace_call("Letters");
    try {
 /*@bgen(jjtree) Letters */
  SimpleNode jjtn000 = new SimpleNode(JJTLETTERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        label_1:
        while (true) {
          Letter();
          if (jj_2_13(2)) {
            ;
          } else {
            break label_1;
          }
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Letters");
    }
  }

// Character :- Letter | DIGIT | "_"
  final public void Character() throws ParseException {
    trace_call("Character");
    try {
 /*@bgen(jjtree) Character */
  SimpleNode jjtn000 = new SimpleNode(JJTCHARACTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        if (jj_2_14(2)) {
          Letter();
        } else if (jj_2_15(2)) {
          jj_consume_token(DIGIT);
        } else if (jj_2_16(2)) {
          jj_consume_token(18);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Character");
    }
  }

// Characters :- (Character)+
  final public void Characters() throws ParseException {
    trace_call("Characters");
    try {
 /*@bgen(jjtree) Characters */
  SimpleNode jjtn000 = new SimpleNode(JJTCHARACTERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        label_2:
        while (true) {
          Character();
          if (jj_2_17(2)) {
            ;
          } else {
            break label_2;
          }
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Characters");
    }
  }

// Digits :- (Digit)+
  final public void Digits() throws ParseException {
    trace_call("Digits");
    try {
 /*@bgen(jjtree) Digits */
  SimpleNode jjtn000 = new SimpleNode(JJTDIGITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        label_3:
        while (true) {
          jj_consume_token(DIGIT);
          if (jj_2_18(2)) {
            ;
          } else {
            break label_3;
          }
        }
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Digits");
    }
  }

// Number :- Digits | Digits "." Digits // | Digits "." | "." Digits
  final public void Number() throws ParseException {
    trace_call("Number");
    try {
 /*@bgen(jjtree) Number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        if (jj_2_19(2)) {
          Digits();
        } else if (jj_2_20(2)) {
          Digits();
          jj_consume_token(19);
          Digits();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Number");
    }
  }

// Constant: LOWERLETTER CHARACTERS | "'" CHARACTERS "'" | "\"" CHARACTERS "\""
  final public void Constant() throws ParseException {
    trace_call("Constant");
    try {
 /*@bgen(jjtree) Constant */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        if (jj_2_21(2)) {
          jj_consume_token(LOWERLETTER);
        } else if (jj_2_22(2)) {
          jj_consume_token(LOWERLETTER);
          Characters();
        } else if (jj_2_23(2)) {
          jj_consume_token(20);
          Characters();
          jj_consume_token(20);
        } else if (jj_2_24(2)) {
          jj_consume_token(21);
          Characters();
          jj_consume_token(21);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Constant");
    }
  }

// Variable :- ( UPPERLETTER | "_" ) Characters
  final public void Variable() throws ParseException {
    trace_call("Variable");
    try {
 /*@bgen(jjtree) Variable */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        if (jj_2_29(2)) {
          if (jj_2_25(2)) {
            jj_consume_token(UPPERLETTER);
          } else if (jj_2_26(2)) {
            jj_consume_token(18);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else if (jj_2_30(2)) {
          if (jj_2_27(2)) {
            jj_consume_token(UPPERLETTER);
          } else if (jj_2_28(2)) {
            jj_consume_token(18);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          Characters();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Variable");
    }
  }

// Functor :- LOWERLETTER (Letters)? [ (DIGITS)? [ (Letters)? ] ]
  final public void Functor() throws ParseException {
    trace_call("Functor");
    try {
 /*@bgen(jjtree) Functor */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        if (jj_2_31(2)) {
          jj_consume_token(LOWERLETTER);
        } else if (jj_2_32(2)) {
          jj_consume_token(LOWERLETTER);
          Letters();
        } else if (jj_2_33(2)) {
          jj_consume_token(LOWERLETTER);
          Letters();
          Digits();
        } else if (jj_2_34(2)) {
          jj_consume_token(LOWERLETTER);
          Letters();
          Digits();
          Letters();
        } else if (jj_2_35(2)) {
          jj_consume_token(EXTRACHARACTER);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Functor");
    }
  }

// Predicate := Functor
  final public void Predicate() throws ParseException {
    trace_call("Predicate");
    try {
 /*@bgen(jjtree) Predicate */
  SimpleNode jjtn000 = new SimpleNode(JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
      try {
        Functor();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
      }
    } finally {
      trace_return("Predicate");
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_3_20() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (!jj_rescan) trace_call("Constant(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) { if (!jj_rescan) trace_return("Constant(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    { if (!jj_rescan) trace_return("Constant(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(LOWERLETTER)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(DIGIT)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (!jj_rescan) trace_call("Digits(LOOKING AHEAD...)");
    Token xsp;
    if (jj_3_18()) { if (!jj_rescan) trace_return("Digits(LOOKAHEAD FAILED)"); return true; }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("Digits(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(DIGIT)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (!jj_rescan) trace_call("Characters(LOOKING AHEAD...)");
    Token xsp;
    if (jj_3_17()) { if (!jj_rescan) trace_return("Characters(LOOKAHEAD FAILED)"); return true; }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("Characters(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  final private boolean jj_3_8() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(UPPERLETTER)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(21)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (!jj_rescan) trace_call("Character(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) { if (!jj_rescan) trace_return("Character(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("Character(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  final private boolean jj_3_14() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (!jj_rescan) trace_call("Letters(LOOKING AHEAD...)");
    Token xsp;
    if (jj_3_13()) { if (!jj_rescan) trace_return("Letters(LOOKAHEAD FAILED)"); return true; }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("Letters(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(LOWERLETTER)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (!jj_rescan) trace_call("Letter(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) { if (!jj_rescan) trace_return("Letter(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("Letter(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  final private boolean jj_3_9() {
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(20)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (!jj_rescan) trace_call("List(LOOKING AHEAD...)");
    if (jj_scan_token(16)) { if (!jj_rescan) trace_return("List(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    if (jj_scan_token(17)) { if (!jj_rescan) trace_return("List(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("List(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  final private boolean jj_3_6() {
    if (jj_3R_6()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (!jj_rescan) trace_call("CompoundTerm(LOOKING AHEAD...)");
    if (jj_3R_15()) { if (!jj_rescan) trace_return("CompoundTerm(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(13)) { if (!jj_rescan) trace_return("CompoundTerm(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("CompoundTerm(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(UPPERLETTER)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (!jj_rescan) trace_call("Term(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) { if (!jj_rescan) trace_return("Term(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    { if (!jj_rescan) trace_return("Term(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  final private boolean jj_3_5() {
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(EXTRACHARACTER)) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (!jj_rescan) trace_call("TermList(LOOKING AHEAD...)");
    if (jj_3R_14()) { if (!jj_rescan) trace_return("TermList(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("TermList(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(LOWERLETTER)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(LOWERLETTER)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(LOWERLETTER)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(LOWERLETTER)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (!jj_rescan) trace_call("Functor(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) { if (!jj_rescan) trace_return("Functor(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("Functor(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(LOWERLETTER)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(UNARYOP)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(UPPERLETTER)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    if (!jj_rescan) trace_call("Variable(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) { if (!jj_rescan) trace_return("Variable(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("Variable(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  final private boolean jj_3_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    return false;
  }

  public PrologParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[35];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PrologParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public PrologParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PrologParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PrologParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PrologParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PrologParser(PrologParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PrologParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[22];
    for (int i = 0; i < 22; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

  final public void enable_tracing() {
    trace_enabled = true;
  }

  final public void disable_tracing() {
    trace_enabled = false;
  }

  final private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  final private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  final private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  final private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 35; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
