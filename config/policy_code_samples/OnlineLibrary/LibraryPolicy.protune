//Facts:

[f1]recognized_university(upb).
[f2]recognized_university(hu).
[f3]recognized_university(epfl).

[f4]passwd(mirela,alerim).
[f5]passwd(dragos,sogard).
[f6]passwd(alina,anila).

[f7]has_subscription(dragos,books).
[f8]has_subscription(dragos,videotec).
[f9]has_subscription(mirela,sonotec).
[f10]has_subscription(mirela,books).
[f11]has_subscription(alina,books).

[f12]trusted_organization(ec).
[f13]trusted_organization(euh).

[f14]price(books,5).
[f15]price(videotec,9).
[f16]price(sonotec,7).


//Rules:

[r1]allow(access(Resource)):-	credential(sa,Student_card[type:student,issuer:I,public_key:K]),
				valid_credential(Student_card,I),
				recognized_university(I),
				challenge(K).

[r2]allow(access(Resource)):-	authenticate(U),
				has_subscription(U,Resource).
									
[r3]authenticate(U):-	declaration(ad,D[username:U,password:P]),
				passwd(U,P).

[r4]allow(access(Resource)):-	european_citizen(X),
				paid(X,Resource),
				register(X,U),
				assert(has_subscription(U,Resource)).
									
[r5]european_citizen(X):-	credential(ea,European_id[owner:X,type:european_citizen,issuer:I,public_key:K]),
				valid_credential(European_id,I),         
				trusted_organization(I),
				challenge(K).
							
[r6]paid(X,Resource):-	price(Resource,P),
				credit_card_payment(X,P),
				logged("${X} paid ${P} for the resource ${R}").
				
[r7]credit_card_payment(X,P):-	credential(pc,Credit_card[type:credit_card,issuer:I,owner:X]),
				valid_credential(Credit_card,I), 
				charged(Credit_card,P).
								
[r8]charged(C,P):-not_revoked(C),
			transfer_money(C,P).
							
[r9]register(X,U):-	declaration(rd,D[username:U,password:P]),
			check(U,P,X).

[r10]check(U,_,X):-	passwd(U,_),
			register(X).
			
[r11]check(U,P,X):-	not(passwd(U,_)),
			assert(passwd(U,P)),
			logged("New user: ${X} registered as ${U}").
						
[r12]valid_credential(C,I):-	public_key(I,K),
				verify_signature(C,K).

//-----------------------------------------------------------------------------------------------------------------------
//Metapolicy

allow(_).sensitivity:public.

public_key(_,_).type:provisional_predicate.
public_key(I,_).evaluation:immediate:-ground(I).
public_key(_,_).actor:self.
public_key(I,K).action:"connect to ${C} server and get ${I}'s public key ${K}".
public_key(_,_).sensitivity:private.

verify_signature(_,_).type:provisional_predicate.
verify_signature(C,K).evaluation:immediate:-ground(C),ground(K).
verify_signature(_,_).actor:self.
verify_signature(C,K).action:"verify the signature on the credential ${C} using public key ${K}".
verify_signature(_,_).sensitivity:private.

recognized_university(_).type:state_predicate.
recognized_university(_).evaluation:immediate.				
recognized_university(_).sensitivity:public.
								
authenticate(_).type:abbreviation_predicate.
authenticate(_).sensitivity:public.

passwd(_,_).type:state_predicate.
passwd(_,_).evaluation:immediate.
passwd(_,_).sensitivity:private.

has_subscription(_,_).type:state_predicate.
has_subscription(_,_).evaluation:immediate.
has_subscription(_,_).sensitivity:private.

european_citizen(_).type:abbreviation_predicate.
european_citizen(_).sensitivity:public.

trusted_organization(_).type:state_predicate.
trusted_organization(_).evaluation:immediate.
trusted_organization(_).sensitivity:public.

paid(_,_).type:abbreviation_predicate.
paid(_,_).sensitivity:public.

price(_,_).type:state_predicate.
price(_,_).evaluation:immediate. 
price(_,_).sensitivity:public.

credit_card_payment(_,_).type:abbreviation_predicate.
credit_card_payment(_,_).sensitivity:public.

charged(_,_).type:abbreviation_predicate.
charged(_,_).sensitivity:public.

not_revoked(_).type:provisional_predicate.
not_revoked(C).evaluation:immediate :- ground(C).
not_revoked(_).actor:self.
not_revoked(C).action:"connect to Visa server and check to see if ${C} was revoked".
not_revoked(_).sensitivity:private.

transfer_money(_,_).type:provisional_predicate.
transfer_money(C,P).evaluation:immediate:-ground(C),ground(P).
transfer_money(_,_).actor:self.
transfer_money(C,P).action:"connect to Visa server and transfer the money ${P} from ${C} to the library's account".
transfer_money(_,_).sensitivity:public.

logged(_).type:provisional_predicate.
logged(_).evaluation:deferred.
logged(_).actor:self.
logged(M).action:"write message ${M} in the log file".
logged(_).sensitivity:private.

register(_,_).type:abbreviation_predicate.
register(_,_).sensitivity:public.

check(_,_,_).type:abbreviation_predicate.	
check(_,_,_).sensitivity:public.

assert(_).type:provisional_predicate.
assert(X).evaluation:immediate:-ground(X).
assert(_).actor:self.
assert(X).action:"add to the database ${X}".
assert(_).sensitivity:public.

valid_credential(_,_).type:abbreviation_predicate.	
valid_credential(_,_).sensitivity:public.
								
challenge(_).type:provisional_predicate.
challenge(K).evaluation:immediate:-ground(K).
challenge(_).actor:self.
challenge(K).action:"challenge peer to prove that he has the private key coresponding to public key ${K}".
challenge(_).sensitivity:public.

not_revoked(C).explanation:"The credit card ${C} is checked for revocation.".
recognized_university(U).explanation:"${U} is a recognized university by the library.".

