<resourceManagementConfiguration>

<ResourceClassifier type="..">
	<!--  use attribute overwrite to cope with multiple match -->
	<!-- ********************start new demo jsp and htmk -->
	<resourceClass
		url="/data/publications/acm/.*"
		matchingStrategy="_reg_exp_"	
		policyName="acmMemberPolicy"
		credentials="cred_acmMember"
		/>
	
	<resourceClass
		url="/data/publications/ieee/.*"
		matchingStrategy="_reg_exp_"
		policyName="ieeeMemberPolicy"
		credentials="cred_ieeeMember"
	/>
	
	<resourceClass
		url="/data/publications/springer/.*"
		matchingStrategy="_reg_exp_"
		policyName="springerReaderPolicy"
		credentials="cred_ieeeMember"
	/>
	
	<resourceClass
		isProtected="true" 
		url="/data/publications/conf/.*"
		matchingStrategy="_reg_exp_"
		policyName="conferenceAttendeePolicy"
		credentials="cred_conferenceAttendee"
	/>	
	
	<resourceClass
		isProtected="true" 
		url="/demo/jsp/.*.jsp"
		matchingStrategy="_reg_exp_"
		policyName="jspForceSessionRegistration"
	/>
</ResourceClassifier>

<!-- 
A PolicySystem sytem is a pool of policies. <policySystem> is an xml pesistance 
form on a PolicySystem object. The policies in the pool are represented by the 
<policy> element. 
 -->
<policySystem type="..">
	<policy
		policyName="jspForceSessionRegistration"
		policyValue="jspForceSessionRegistration(jsp)"
		includedPolicy="" 
		/>
	
	<policy
		policyName="acmMemberPolicy"
		policyValue="acmMemberPolicy(Requester)"
		includedPolicy="" 
		/>
		
	<policy
		policyName="ieeeMemberPolicy"
		policyValue="ieeeMemberPolicy(Requester)"
		includedPolicy="" 
		/>
	
	<policy
		policyName="springerReaderPolicy"
		policyValue="springerReaderPolicy(Requester)"
		includedPolicy="" 
		/>
	
	<policy
		policyName ="conferenceAttendeePolicy"
		policyValue="conferenceAttendeePolicy(Requester)"
		includedPolicy="" 
		/>
		
		
	<policy
		policyName ="peertrustCommunityMemberPolicy"
		policyValue="peertrustCommunityMemberPolicy(Requester)"
		includedPolicy="" 
		/>
</policySystem>

<!-- 
	Response to a resource request depends:
	 i) on the protection level of the of the resource ,
	 ii)on the setup level of the http session (is the peer already known by the server)
	A RequestServingMechnism specifies the steps to serve a request. Its XML represention 
	is the <mechanism> element. The class attribute the class that implement the particular 
	mechnism. E.g. RequestServingByFollowingChain which just follow the normal request hanndlinc 
	chain. In some cases (e.g session registration) it is necessary to forward the request 
	to another handler(jsp or servlet). the forwardto attribute is used to specify a url of the service.
	The mechnism are gathered in a pool represented by the 
	<RequestservingMechnism> element. not that This element must contains a mechanism named default,
	which will handle the request that match not other mechnism.  
 -->
<RequestServingMechanism type="...">
	<mechanism 	name="default"
				class="org.peertrust.demo.resourcemanagement.RequestServingByFollowingChain"
				forwardTo="" 
				matchingPattern="*">
	</mechanism>
	
	<mechanism 	name="sessionRegistration"
				class="org.peertrust.demo.resourcemanagement.RequestServingByForwarding"
				context="/demo"
				forwardTo="/jsp/sessionRegistration.jsp"
				matchingPattern="/jsp/sessionRegistration.jsp">
	</mechanism>
	
	<mechanism 	name="credentialDownload"
				class="org.peertrust.demo.resourcemanagement.RequestServingByForwarding"
				context="/demo"
				forwardTo="/jsp/credentialDownload.jsp"
				matchingPattern="/jsp/credentialDownload.jsp">
	</mechanism>
	
	<!-- mechanism 	name="virtual_dir_demo_loader"
				class="org.peertrust.demo.resourcemanagement.RequestServingByLoadingFromExtDir"
				baseDir="file:///home/pat_dev/eclipse_home/workspace_3_1/TomcatPeerTrust/"
				matchingPattern="/fififififififi/demo/.*">
	</mechanism -->
	
</RequestServingMechanism>

<!-- 
<CredentialStrore> holds the state of a CredentialStore object.
Its contains:
	i) a <peeAliasPlaceHolder> which text contex ist the regedit expresion for the
		peer trust alias place holder use in the credentials values.
	i) several <Credential> which represents a template credential.
 -->
<CredentialStore>
	<peerAliasPlaceHolder>\$\{_Requester_\}</peerAliasPlaceHolder>
	<Credential 
		name="cred_ieeeMember" 
		value="signed(rule(ieeeMember(${_Requester_}) @ ieee, [], []),ieee, signature(ieee))."
		description="Membership in IEEE">
		
	</Credential> 
	<Credential 
		name="cred_springerReader" 
		value="signed(rule(springer(${_Requester_}) @ springer, [], []),springer, signature(springer))."
		description="Springer Reader">
	</Credential>
	<Credential 
		name="cred_peertrustCommunityMember" 
		value="signed(rule(peertrustCommunityMember(${_Requester_}) @ peertrustCommunity, [], []),peertrustCommunity, signature(peertrustCommunity))."
		description="PeerTrust Community membership">
	</Credential>
	
	<Credential 
		name="cred_acmMember" 
		value="signed(rule(ieeeMember(${_Requester_}) @ acm, [], []),acm, signature(acm))."
		description="ACM Membership">
	</Credential>	
</CredentialStore>
</resourceManagementConfiguration>