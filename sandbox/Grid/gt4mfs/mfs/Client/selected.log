DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoClient/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoServer/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoServer/ - License = /home/ionut/PeertrustFiles/demoServer/minervagui.mca
ERROR main org.peertrust.inference.MinervaProlog - Minerva I/O initialization exception:
java.util.zip.ZipException: No such file or directory
	at java.util.zip.ZipFile.open(Native Method)
	at java.util.zip.ZipFile.<init>(ZipFile.java:112)
	at java.util.zip.ZipFile.<init>(ZipFile.java:72)
	at com.ifcomputer.minerva.MC30.<init>(Unknown Source)
	at com.ifcomputer.minerva.MC38.mf433(Unknown Source)
	at com.ifcomputer.minerva.Minerva.mf967(Unknown Source)
	at com.ifcomputer.minerva.Minerva.<init>(Unknown Source)
	at com.ifcomputer.minerva.Minerva.<init>(Unknown Source)
	at org.peertrust.inference.MinervaProlog.init(MinervaProlog.java:100)
	at g4clifs.impl.StartPTApp.initializePTServer(StartPTApp.java:137)
	at g4clifs.impl.StartPTApp.main(StartPTApp.java:189)
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoServer/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoServer/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoServer//home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoServer//home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 37000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = elearn
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = elearn
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(elearn) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = elearn - host = localhost - port = 37000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoServer/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.eLearn - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoServer/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 37000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = elearn
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = elearn
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(elearn) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = elearn - host = localhost - port = 37000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoClient/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.alice - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoClient/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 32000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = alice
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = alice
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(alice) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = alice - host = localhost - port = 32000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoServer/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.eLearn - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoServer/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 37000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = elearn
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = elearn
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(elearn) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = elearn - host = localhost - port = 37000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoServer/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.eLearn - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoServer/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 37000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = elearn
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = elearn
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(elearn) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = elearn - host = localhost - port = 37000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoClient/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.alice - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoClient/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 32000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = alice
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = alice
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(alice) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = alice - host = localhost - port = 32000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.TrustClient
DEBUG main org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.meta.Tree - Parsing proof: []
DEBUG main org.peertrust.meta.Tree - Created: Id: |1| - originalGoal: |request(spanishCourse,Session) @ elearn| - Goal: |request(spanishCourse,Session) @ elearn| Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG main org.peertrust.meta.MetaInterpreter - New query received from client: request(spanishCourse,Session) @ elearn
DEBUG main org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,Session) @ elearn| - Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| Requester: |client|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,Session) @ elearn - [query(request(spanishCourse,Session) @ elearn,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,Session) @ elearn,[query(request(spanishCourse,Session) @ elearn,no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(request(spanishCourse,V9065611),elearn),[query(@(request(spanishCourse,V9065611),elearn),no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(request(spanishCourse,V9065611),elearn),[query(@(request(spanishCourse,V9065611),elearn),no)],[],client),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(request(spanishCourse,V6386542),elearn),[],[],elearn,request(spanishCourse,V6386542))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V6386542)@elearn,[],[],elearn,request(spanishCourse,V6386542))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V6386542)@elearn,[],[],elearn,request(spanishCourse,V6386542))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: elearn
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V6386542)@elearn| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'elearn' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == elearn
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |request(spanishCourse,V6386542)@elearn| - Goal: |request(spanishCourse,V6386542)@elearn| Subgoals: |[]| - Proof: |[]| LastExpandedGoal: |request(spanishCourse,V6386542)|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: client
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V6386542)?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request request(spanishCourse,V6386542) to elearn from alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@747fa2 to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - Added peer 'alice' to the entities table
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |1| - originalGoal: |request(spanishCourse,V6386542)| - Goal: |request(spanishCourse,V6386542)| Subgoals: |[query(request(spanishCourse,V6386542),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from alice: request(spanishCourse,V6386542)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from alice: request(spanishCourse,V6386542)
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V6386542)| - Subgoals: |[query(request(spanishCourse,V6386542),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V6386542) - [query(request(spanishCourse,V6386542),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V6386542),[query(request(spanishCourse,V6386542),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V29346106),[query(request(spanishCourse,V29346106),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V29346106),[query(request(spanishCourse,V29346106),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V10703525),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)],[@(r($(request(spanishCourse,V10703525),alice),[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)]),elearn)],nil,nil),tree(request(spanishCourse,V8846886),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)],[@(r($(request(spanishCourse,V8846886),alice),[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V10703525),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)],[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn],nil,nil),tree(request(spanishCourse,V8846886),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)],[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V10703525),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)],[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V10703525)| - Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V8846886),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)],[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V8846886)| - Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)]| - Proof: |[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |request(spanishCourse,V10703525)| - Goal: |request(spanishCourse,V10703525)| Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |3| - originalGoal: |request(spanishCourse,V8846886)| - Goal: |request(spanishCourse,V8846886)| Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V10703525)| - Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V10703525) - [query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V10703525),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V2081531),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V2081531),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V2771331),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)],[@(r(policy1(request(spanishCourse),alice),[@(@(drivingLicense(alice),caState),alice),policy3(request(V4219289),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V2771331),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)],[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V2771331),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)],[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V2771331)| - Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)]| - Proof: |[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |4| - originalGoal: |request(spanishCourse,V2771331)| - Goal: |request(spanishCourse,V2771331)| Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V8846886)| - Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V8846886) - [query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V8846886),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V32961174),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V32961174),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V32961174),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V32961174),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V28954187),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V28954187),no)],[@(r(policy2(request(spanishCourse),alice),[@(@(student(alice),hanoverUniversity),alice)],[]),elearn)],nil,nil),tree(request(spanishCourse,V26657200),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V26657200),no)],[@(r(policy2(request(spanishCourse),alice),[@(@(student(alice),naplesUniversity),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V28954187),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn],nil,nil),tree(request(spanishCourse,V26657200),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V28954187),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V28954187)| - Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)]| - Proof: |[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V26657200),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V26657200)| - Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)]| - Proof: |[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |5| - originalGoal: |request(spanishCourse,V28954187)| - Goal: |request(spanishCourse,V28954187)| Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)]| - Proof: |[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |6| - originalGoal: |request(spanishCourse,V26657200)| - Goal: |request(spanishCourse,V26657200)| Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)]| - Proof: |[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V2771331)| - Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V2771331) - [query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V2771331),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V5450181),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V31156635),alice),no),query(get(spanishCourse,V5450181),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V5450181),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V31156635),alice),no),query(get(spanishCourse,V5450181),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V5525185),[query(policy3(request(V16675983),alice),no),query(get(spanishCourse,V5525185),no)],[@(proved_by(alice),elearn)],alice,@(drivingLicense(alice),caState))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V5525185),[query(policy3(request(V16675983),alice),no),query(get(spanishCourse,V5525185),no)],[proved_by(alice)@elearn],alice,drivingLicense(alice)@caState)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V5525185),[query(policy3(request(V16675983),alice),no),query(get(spanishCourse,V5525185),no)],[proved_by(alice)@elearn],alice,drivingLicense(alice)@caState)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V5525185)| - Subgoals: |[query(policy3(request(V16675983),alice),no),query(get(spanishCourse,V5525185),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |request(spanishCourse,V5525185)| - Goal: |request(spanishCourse,V5525185)| Subgoals: |[query(policy3(request(V16675983),alice),no),query(get(spanishCourse,V5525185),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn]| LastExpandedGoal: |drivingLicense(alice)@caState|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V6386542)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request drivingLicense(alice)@caState to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@1968e23 to alice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V28954187)| - Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V28954187) - [query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)]
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V28954187),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V17308974),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V17308974),no)],[],alice)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V17308974),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V17308974),no)],[],alice),Return)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |3| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: drivingLicense(alice)@caState
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V8146001),[query(get(spanishCourse,V8146001),no)],[@(proved_by(alice),elearn)],alice,@(student(alice),hanoverUniversity))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V8146001),[query(get(spanishCourse,V8146001),no)],[proved_by(alice)@elearn],alice,student(alice)@hanoverUniversity)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V8146001),[query(get(spanishCourse,V8146001),no)],[proved_by(alice)@elearn],alice,student(alice)@hanoverUniversity)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V8146001)| - Subgoals: |[query(get(spanishCourse,V8146001),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |8| - originalGoal: |request(spanishCourse,V8146001)| - Goal: |request(spanishCourse,V8146001)| Subgoals: |[query(get(spanishCourse,V8146001),no)]| - Proof: |[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]| LastExpandedGoal: |student(alice)@hanoverUniversity|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V6386542)?,student(alice)@hanoverUniversity?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request student(alice)@hanoverUniversity to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@e80842 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V26657200)| - Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V26657200) - [query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V26657200),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)],[],alice)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V29509536),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V29509536),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V29509536),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V29509536),no)],[],alice),Return)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |drivingLicense(alice)@caState| - Subgoals: |[query(drivingLicense(alice)@caState,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V10805987),[query(get(spanishCourse,V10805987),no)],[@(proved_by(alice),elearn)],alice,@(student(alice),naplesUniversity))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V10805987),[query(get(spanishCourse,V10805987),no)],[proved_by(alice)@elearn],alice,student(alice)@naplesUniversity)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V10805987),[query(get(spanishCourse,V10805987),no)],[proved_by(alice)@elearn],alice,student(alice)@naplesUniversity)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: drivingLicense(alice)@caState - [query(drivingLicense(alice)@caState,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(drivingLicense(alice)@caState,[query(drivingLicense(alice)@caState,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V10805987)| - Subgoals: |[query(get(spanishCourse,V10805987),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |9| - originalGoal: |request(spanishCourse,V10805987)| - Goal: |request(spanishCourse,V10805987)| Subgoals: |[query(get(spanishCourse,V10805987),no)]| - Proof: |[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]| LastExpandedGoal: |student(alice)@naplesUniversity|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(drivingLicense(alice),caState),[],[@(signed(r(@(drivingLicense(alice),caState),[],[]),caState,signature(caState)),alice)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |drivingLicense(alice)@caState| - Subgoals: |[]| - Proof: |[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V6386542)?,student(alice)@naplesUniversity?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request student(alice)@naplesUniversity to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@fd68b1 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |4| - originalGoal: |student(alice)@hanoverUniversity| - Goal: |student(alice)@hanoverUniversity| Subgoals: |[query(student(alice)@hanoverUniversity,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: student(alice)@hanoverUniversity
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |5| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree drivingLicense(alice)@caState answered
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: student(alice)@hanoverUniversity
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |student(alice)@hanoverUniversity| - Subgoals: |[query(student(alice)@hanoverUniversity,no)]| Requester: |elearn|
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: student(alice)@hanoverUniversity - [query(student(alice)@hanoverUniversity,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(student(alice)@hanoverUniversity,[query(student(alice)@hanoverUniversity,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(student(alice),hanoverUniversity),[query(@(student(alice),hanoverUniversity),no)],[],elearn)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |6| - originalGoal: |student(alice)@naplesUniversity| - Goal: |student(alice)@naplesUniversity| Subgoals: |[query(student(alice)@naplesUniversity,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: student(alice)@naplesUniversity
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: student(alice)@naplesUniversity
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(student(alice),hanoverUniversity),[query(@(student(alice),hanoverUniversity),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(student(alice),hanoverUniversity),[],[],hanoverUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(student(alice)@hanoverUniversity,[],[],hanoverUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(student(alice)@hanoverUniversity,[],[],hanoverUniversity,student(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: hanoverUniversity
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |student(alice)@hanoverUniversity| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'hanoverUniversity' in the entities table
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'hanoverUniversity' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query student(alice)
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |1236089640| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer drivingLicense(alice)@caState to elearn with proof [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@9444d1 to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |student(alice)@naplesUniversity| - Subgoals: |[query(student(alice)@naplesUniversity,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: student(alice)@naplesUniversity - [query(student(alice)@naplesUniversity,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(student(alice)@naplesUniversity,[query(student(alice)@naplesUniversity,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(student(alice),naplesUniversity),[query(@(student(alice),naplesUniversity),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(student(alice),naplesUniversity),[query(@(student(alice),naplesUniversity),no)],[],elearn),Return)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(student(alice),naplesUniversity),[],[],naplesUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(student(alice)@naplesUniversity,[],[],naplesUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(student(alice)@naplesUniversity,[],[],naplesUniversity,student(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: naplesUniversity
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |student(alice)@naplesUniversity| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'naplesUniversity' in the entities table
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'naplesUniversity' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query student(alice)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: drivingLicense(alice)@caState and old query: old(request(spanishCourse,V5525185),drivingLicense(alice)@caState,[query(policy3(request(V16675983),alice),no),query(get(spanishCourse,V5525185),no)])
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,V11587215),[query(policy3(request(V29959477),alice),no),query(get(spanishCourse,V11587215),no)])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |10| - originalGoal: |request(spanishCourse,V11587215)| - Goal: |request(spanishCourse,V11587215)| Subgoals: |[query(policy3(request(V29959477),alice),no),query(get(spanishCourse,V11587215),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V11587215)| - Subgoals: |[query(policy3(request(V29959477),alice),no),query(get(spanishCourse,V11587215),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V11587215) - [query(policy3(request(V29959477),alice),no),query(get(spanishCourse,V11587215),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V11587215),[query(policy3(request(V29959477),alice),no),query(get(spanishCourse,V11587215),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V11124894),[query(policy3(request(V10807107),alice),no),query(get(spanishCourse,V11124894),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V11124894),[query(policy3(request(V10807107),alice),no),query(get(spanishCourse,V11124894),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V860069),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V860069),no)],[@(r(policy3(request(V26780757),alice),[@(@(employee(alice),caStatePolice),alice)],[]),elearn)],nil,nil),tree(request(spanishCourse,V5041714),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V5041714),no)],[@(r(policy3(request(V11155366),alice),[@(@(policeOfficer(alice),caStatePolice),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V860069),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)],[r(policy3(request(V26780757),alice),[employee(alice)@caStatePolice@alice],[])@elearn],nil,nil),tree(request(spanishCourse,V5041714),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)],[r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V860069),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)],[r(policy3(request(V26780757),alice),[employee(alice)@caStatePolice@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V860069)| - Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)]| - Proof: |[r(policy3(request(V26780757),alice),[employee(alice)@caStatePolice@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V5041714),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)],[r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V5041714)| - Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)]| - Proof: |[r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |11| - originalGoal: |request(spanishCourse,V860069)| - Goal: |request(spanishCourse,V860069)| Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy3(request(V26780757),alice),[employee(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |12| - originalGoal: |request(spanishCourse,V5041714)| - Goal: |request(spanishCourse,V5041714)| Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V860069)| - Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V860069) - [query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V860069),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V19627754),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V19627754),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V19627754),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V19627754),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V17901443),[query(get(spanishCourse,V17901443),no)],[@(proved_by(alice),elearn)],alice,@(employee(alice),caStatePolice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V17901443),[query(get(spanishCourse,V17901443),no)],[proved_by(alice)@elearn],alice,employee(alice)@caStatePolice)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V17901443),[query(get(spanishCourse,V17901443),no)],[proved_by(alice)@elearn],alice,employee(alice)@caStatePolice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V17901443)| - Subgoals: |[query(get(spanishCourse,V17901443),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V26780757),alice),[employee(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |13| - originalGoal: |request(spanishCourse,V17901443)| - Goal: |request(spanishCourse,V17901443)| Subgoals: |[query(get(spanishCourse,V17901443),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V26780757),alice),[employee(alice)@caStatePolice@alice],[])@elearn]| LastExpandedGoal: |employee(alice)@caStatePolice|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V6386542)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,employee(alice)@caStatePolice?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request employee(alice)@caStatePolice to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@1394894 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V5041714)| - Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V5041714) - [query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V5041714),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V12227392),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V12227392),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V12227392),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V12227392),no)],[],alice),Return)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V17007273),[query(get(spanishCourse,V17007273),no)],[@(proved_by(alice),elearn)],alice,@(policeOfficer(alice),caStatePolice))]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |employee(alice)@caStatePolice| - Goal: |employee(alice)@caStatePolice| Subgoals: |[query(employee(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V17007273),[query(get(spanishCourse,V17007273),no)],[proved_by(alice)@elearn],alice,policeOfficer(alice)@caStatePolice)]
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: employee(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V17007273),[query(get(spanishCourse,V17007273),no)],[proved_by(alice)@elearn],alice,policeOfficer(alice)@caStatePolice)
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: employee(alice)@caStatePolice
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V17007273)| - Subgoals: |[query(get(spanishCourse,V17007273),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |14| - originalGoal: |request(spanishCourse,V17007273)| - Goal: |request(spanishCourse,V17007273)| Subgoals: |[query(get(spanishCourse,V17007273),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]| LastExpandedGoal: |policeOfficer(alice)@caStatePolice|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V6386542)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request policeOfficer(alice)@caStatePolice to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@17725c4 to alice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |8| - originalGoal: |policeOfficer(alice)@caStatePolice| - Goal: |policeOfficer(alice)@caStatePolice| Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |employee(alice)@caStatePolice| - Subgoals: |[query(employee(alice)@caStatePolice,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: employee(alice)@caStatePolice - [query(employee(alice)@caStatePolice,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(employee(alice)@caStatePolice,[query(employee(alice)@caStatePolice,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(employee(alice),caStatePolice),[query(@(employee(alice),caStatePolice),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(employee(alice),caStatePolice),[query(@(employee(alice),caStatePolice),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(employee(alice),caStatePolice),[],[],caStatePolice,employee(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(employee(alice)@caStatePolice,[],[],caStatePolice,employee(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(employee(alice)@caStatePolice,[],[],caStatePolice,employee(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: caStatePolice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |employee(alice)@caStatePolice| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'caStatePolice' in the entities table
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'caStatePolice' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query employee(alice)
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |policeOfficer(alice)@caStatePolice| - Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: policeOfficer(alice)@caStatePolice - [query(policeOfficer(alice)@caStatePolice,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(policeOfficer(alice)@caStatePolice,[query(policeOfficer(alice)@caStatePolice,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(policeOfficer(alice),caStatePolice),[query(@(policeOfficer(alice),caStatePolice),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(policeOfficer(alice),caStatePolice),[query(@(policeOfficer(alice),caStatePolice),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(policeOfficer(alice),caStatePolice),[],[@(signed(r(@(policeOfficer(alice),caStatePolice),[],[]),caStatePolice,signature(caStatePolice)),alice)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(policeOfficer(alice)@caStatePolice,[],[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(policeOfficer(alice)@caStatePolice,[],[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |policeOfficer(alice)@caStatePolice| - Subgoals: |[]| - Proof: |[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |9| - originalGoal: |policeOfficer(alice)@caStatePolice| - Goal: |policeOfficer(alice)@caStatePolice| Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree policeOfficer(alice)@caStatePolice answered
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |1236089640| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer policeOfficer(alice)@caStatePolice to elearn with proof [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@3b1f38 to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |14| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: policeOfficer(alice)@caStatePolice and old query: old(request(spanishCourse,V17007273),policeOfficer(alice)@caStatePolice,[query(get(spanishCourse,V17007273),no)])
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,V5210326),[query(get(spanishCourse,V5210326),no)])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |15| - originalGoal: |request(spanishCourse,V5210326)| - Goal: |request(spanishCourse,V5210326)| Subgoals: |[query(get(spanishCourse,V5210326),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V5210326)| - Subgoals: |[query(get(spanishCourse,V5210326),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V5210326) - [query(get(spanishCourse,V5210326),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V5210326),[query(get(spanishCourse,V5210326),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V26440236),[query(get(spanishCourse,V26440236),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V26440236),[query(get(spanishCourse,V26440236),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,session1),[],[@(r(get(spanishCourse,session1),hidden,hidden),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,session1),[],[r(get(spanishCourse,session1),hidden,hidden)@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,session1),[],[r(get(spanishCourse,session1),hidden,hidden)@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,session1)| - Subgoals: |[]| - Proof: |[r(get(spanishCourse,session1),hidden,hidden)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |16| - originalGoal: |request(spanishCourse,V5210326)| - Goal: |request(spanishCourse,V5210326)| Subgoals: |[query(get(spanishCourse,V5210326),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree request(spanishCourse,session1) answered
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |942910978| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer request(spanishCourse,session1) to alice with proof [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice,r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@3e89c3 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: request(spanishCourse,session1) and old query: old(request(spanishCourse,V6386542)@elearn,request(spanishCourse,V6386542),[])
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,session1)@elearn,[])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: request(spanishCourse,session1)
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |10| - originalGoal: |request(spanishCourse,session1)@elearn| - Goal: |request(spanishCourse,session1)@elearn| Subgoals: |[]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice,r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |1236089640| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer request(spanishCourse,session1)@elearn to client with proof [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice,r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to null:-1 from alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoClient/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.alice - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoClient/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 32000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = alice
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = alice
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(alice) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = alice - host = localhost - port = 32000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.TrustClient
DEBUG main org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.meta.Tree - Parsing proof: []
DEBUG main org.peertrust.meta.Tree - Created: Id: |1| - originalGoal: |request(spanishCourse,Session) @ elearn| - Goal: |request(spanishCourse,Session) @ elearn| Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG main org.peertrust.meta.MetaInterpreter - New query received from client: request(spanishCourse,Session) @ elearn
DEBUG main org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,Session) @ elearn| - Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| Requester: |client|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,Session) @ elearn - [query(request(spanishCourse,Session) @ elearn,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,Session) @ elearn,[query(request(spanishCourse,Session) @ elearn,no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(request(spanishCourse,V6151022),elearn),[query(@(request(spanishCourse,V6151022),elearn),no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(request(spanishCourse,V6151022),elearn),[query(@(request(spanishCourse,V6151022),elearn),no)],[],client),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(request(spanishCourse,V28524838),elearn),[],[],elearn,request(spanishCourse,V28524838))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V28524838)@elearn,[],[],elearn,request(spanishCourse,V28524838))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V28524838)@elearn,[],[],elearn,request(spanishCourse,V28524838))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: elearn
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V28524838)@elearn| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'elearn' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == elearn
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |request(spanishCourse,V28524838)@elearn| - Goal: |request(spanishCourse,V28524838)@elearn| Subgoals: |[]| - Proof: |[]| LastExpandedGoal: |request(spanishCourse,V28524838)|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: client
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V28524838)?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request request(spanishCourse,V28524838) to elearn from alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@18c74 to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |17| - originalGoal: |request(spanishCourse,V28524838)| - Goal: |request(spanishCourse,V28524838)| Subgoals: |[query(request(spanishCourse,V28524838),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from alice: request(spanishCourse,V28524838)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from alice: request(spanishCourse,V28524838)
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V28524838)| - Subgoals: |[query(request(spanishCourse,V28524838),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V28524838) - [query(request(spanishCourse,V28524838),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V28524838),[query(request(spanishCourse,V28524838),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V20634710),[query(request(spanishCourse,V20634710),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V20634710),[query(request(spanishCourse,V20634710),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V7579563),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V7579563),no)],[@(r($(request(spanishCourse,V7579563),alice),[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)]),elearn)],nil,nil),tree(request(spanishCourse,V17103608),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V17103608),no)],[@(r($(request(spanishCourse,V17103608),alice),[policy2(request(spanishCourse),alice)],[get(spanishCourse,V17103608)]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V7579563),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V7579563),no)],[r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn],nil,nil),tree(request(spanishCourse,V17103608),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V17103608),no)],[r(request(spanishCourse,V17103608)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V17103608)])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V7579563),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V7579563),no)],[r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V7579563)| - Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V7579563),no)]| - Proof: |[r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V17103608),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V17103608),no)],[r(request(spanishCourse,V17103608)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V17103608)])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V17103608)| - Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V17103608),no)]| - Proof: |[r(request(spanishCourse,V17103608)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V17103608)])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |18| - originalGoal: |request(spanishCourse,V7579563)| - Goal: |request(spanishCourse,V7579563)| Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V7579563),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |19| - originalGoal: |request(spanishCourse,V17103608)| - Goal: |request(spanishCourse,V17103608)| Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V17103608),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V17103608)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V17103608)])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V7579563)| - Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V7579563),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V7579563) - [query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V7579563),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V7579563),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V7579563),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V33081055),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V33081055),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V33081055),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V33081055),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V2859291),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V6166426),alice),no),query(get(spanishCourse,V2859291),no)],[@(r(policy1(request(spanishCourse),alice),[@(@(drivingLicense(alice),caState),alice),policy3(request(V6166426),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V2859291),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V6166426),alice),no),query(get(spanishCourse,V2859291),no)],[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V2859291),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V6166426),alice),no),query(get(spanishCourse,V2859291),no)],[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V2859291)| - Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V6166426),alice),no),query(get(spanishCourse,V2859291),no)]| - Proof: |[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |20| - originalGoal: |request(spanishCourse,V2859291)| - Goal: |request(spanishCourse,V2859291)| Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V6166426),alice),no),query(get(spanishCourse,V2859291),no)]| - Proof: |[r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V17103608)| - Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V17103608),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V17103608) - [query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V17103608),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V17103608),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V17103608),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V23047631),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V23047631),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V23047631),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V23047631),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V16842840),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V16842840),no)],[@(r(policy2(request(spanishCourse),alice),[@(@(student(alice),hanoverUniversity),alice)],[]),elearn)],nil,nil),tree(request(spanishCourse,V12430225),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V12430225),no)],[@(r(policy2(request(spanishCourse),alice),[@(@(student(alice),naplesUniversity),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V16842840),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V16842840),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn],nil,nil),tree(request(spanishCourse,V12430225),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V12430225),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V16842840),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V16842840),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V16842840)| - Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V16842840),no)]| - Proof: |[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V12430225),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V12430225),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V12430225)| - Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V12430225),no)]| - Proof: |[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V17103608)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V17103608)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |21| - originalGoal: |request(spanishCourse,V16842840)| - Goal: |request(spanishCourse,V16842840)| Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V16842840),no)]| - Proof: |[r(request(spanishCourse,V17103608)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V17103608)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V17103608)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V17103608)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |22| - originalGoal: |request(spanishCourse,V12430225)| - Goal: |request(spanishCourse,V12430225)| Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V12430225),no)]| - Proof: |[r(request(spanishCourse,V17103608)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V17103608)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V2859291)| - Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V6166426),alice),no),query(get(spanishCourse,V2859291),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V2859291) - [query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V6166426),alice),no),query(get(spanishCourse,V2859291),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V2859291),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V6166426),alice),no),query(get(spanishCourse,V2859291),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V4898828),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V25582376),alice),no),query(get(spanishCourse,V4898828),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V4898828),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V25582376),alice),no),query(get(spanishCourse,V4898828),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V8897128),[query(policy3(request(V15485575),alice),no),query(get(spanishCourse,V8897128),no)],[@(proved_by(alice),elearn)],alice,@(drivingLicense(alice),caState))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V8897128),[query(policy3(request(V15485575),alice),no),query(get(spanishCourse,V8897128),no)],[proved_by(alice)@elearn],alice,drivingLicense(alice)@caState)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V8897128),[query(policy3(request(V15485575),alice),no),query(get(spanishCourse,V8897128),no)],[proved_by(alice)@elearn],alice,drivingLicense(alice)@caState)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V8897128)| - Subgoals: |[query(policy3(request(V15485575),alice),no),query(get(spanishCourse,V8897128),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |23| - originalGoal: |request(spanishCourse,V8897128)| - Goal: |request(spanishCourse,V8897128)| Subgoals: |[query(policy3(request(V15485575),alice),no),query(get(spanishCourse,V8897128),no)]| - Proof: |[r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn]| LastExpandedGoal: |drivingLicense(alice)@caState|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V28524838)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request drivingLicense(alice)@caState to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@110fe28 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V16842840)| - Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V16842840),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V16842840) - [query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V16842840),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V16842840),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V16842840),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V17431955),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V17431955),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V17431955),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V17431955),no)],[],alice),Return)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V32079775),[query(get(spanishCourse,V32079775),no)],[@(proved_by(alice),elearn)],alice,@(student(alice),hanoverUniversity))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V32079775),[query(get(spanishCourse,V32079775),no)],[proved_by(alice)@elearn],alice,student(alice)@hanoverUniversity)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V32079775),[query(get(spanishCourse,V32079775),no)],[proved_by(alice)@elearn],alice,student(alice)@hanoverUniversity)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V32079775)| - Subgoals: |[query(get(spanishCourse,V32079775),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V17103608)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V17103608)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |24| - originalGoal: |request(spanishCourse,V32079775)| - Goal: |request(spanishCourse,V32079775)| Subgoals: |[query(get(spanishCourse,V32079775),no)]| - Proof: |[r(request(spanishCourse,V17103608)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V17103608)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]| LastExpandedGoal: |student(alice)@hanoverUniversity|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V28524838)?,student(alice)@hanoverUniversity?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request student(alice)@hanoverUniversity to alice from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@b9b538 to alice
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |3| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: drivingLicense(alice)@caState
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: drivingLicense(alice)@caState
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V12430225)| - Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V12430225),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V12430225) - [query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V12430225),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V12430225),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V12430225),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V31564808),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V31564808),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V31564808),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V31564808),no)],[],alice),Return)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V19330907),[query(get(spanishCourse,V19330907),no)],[@(proved_by(alice),elearn)],alice,@(student(alice),naplesUniversity))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V19330907),[query(get(spanishCourse,V19330907),no)],[proved_by(alice)@elearn],alice,student(alice)@naplesUniversity)]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V19330907),[query(get(spanishCourse,V19330907),no)],[proved_by(alice)@elearn],alice,student(alice)@naplesUniversity)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V19330907)| - Subgoals: |[query(get(spanishCourse,V19330907),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |4| - originalGoal: |student(alice)@hanoverUniversity| - Goal: |student(alice)@hanoverUniversity| Subgoals: |[query(student(alice)@hanoverUniversity,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: student(alice)@hanoverUniversity
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V17103608)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V17103608)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |25| - originalGoal: |request(spanishCourse,V19330907)| - Goal: |request(spanishCourse,V19330907)| Subgoals: |[query(get(spanishCourse,V19330907),no)]| - Proof: |[r(request(spanishCourse,V17103608)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V17103608)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]| LastExpandedGoal: |student(alice)@naplesUniversity|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V28524838)?,student(alice)@naplesUniversity?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request student(alice)@naplesUniversity to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@139b78e to alice
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: student(alice)@hanoverUniversity
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |5| - originalGoal: |student(alice)@naplesUniversity| - Goal: |student(alice)@naplesUniversity| Subgoals: |[query(student(alice)@naplesUniversity,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: student(alice)@naplesUniversity
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: student(alice)@naplesUniversity
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |drivingLicense(alice)@caState| - Subgoals: |[query(drivingLicense(alice)@caState,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: drivingLicense(alice)@caState - [query(drivingLicense(alice)@caState,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(drivingLicense(alice)@caState,[query(drivingLicense(alice)@caState,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(drivingLicense(alice),caState),[],[@(signed(r(@(drivingLicense(alice),caState),[],[]),caState,signature(caState)),alice)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |drivingLicense(alice)@caState| - Subgoals: |[]| - Proof: |[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |6| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree drivingLicense(alice)@caState answered
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |student(alice)@hanoverUniversity| - Subgoals: |[query(student(alice)@hanoverUniversity,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: student(alice)@hanoverUniversity - [query(student(alice)@hanoverUniversity,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(student(alice)@hanoverUniversity,[query(student(alice)@hanoverUniversity,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(student(alice),hanoverUniversity),[query(@(student(alice),hanoverUniversity),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(student(alice),hanoverUniversity),[query(@(student(alice),hanoverUniversity),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(student(alice),hanoverUniversity),[],[],hanoverUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(student(alice)@hanoverUniversity,[],[],hanoverUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(student(alice)@hanoverUniversity,[],[],hanoverUniversity,student(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: hanoverUniversity
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |student(alice)@hanoverUniversity| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'hanoverUniversity' in the entities table
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'hanoverUniversity' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query student(alice)
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |student(alice)@naplesUniversity| - Subgoals: |[query(student(alice)@naplesUniversity,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: student(alice)@naplesUniversity - [query(student(alice)@naplesUniversity,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(student(alice)@naplesUniversity,[query(student(alice)@naplesUniversity,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(student(alice),naplesUniversity),[query(@(student(alice),naplesUniversity),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(student(alice),naplesUniversity),[query(@(student(alice),naplesUniversity),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(student(alice),naplesUniversity),[],[],naplesUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(student(alice)@naplesUniversity,[],[],naplesUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(student(alice)@naplesUniversity,[],[],naplesUniversity,student(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: naplesUniversity
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |student(alice)@naplesUniversity| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'naplesUniversity' in the entities table
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'naplesUniversity' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query student(alice)
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |-1137479399| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer drivingLicense(alice)@caState to elearn with proof [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@1f4e571 to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |23| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: drivingLicense(alice)@caState and old query: old(request(spanishCourse,V8897128),drivingLicense(alice)@caState,[query(policy3(request(V15485575),alice),no),query(get(spanishCourse,V8897128),no)])
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,V16868914),[query(policy3(request(V14445175),alice),no),query(get(spanishCourse,V16868914),no)])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |26| - originalGoal: |request(spanishCourse,V16868914)| - Goal: |request(spanishCourse,V16868914)| Subgoals: |[query(policy3(request(V14445175),alice),no),query(get(spanishCourse,V16868914),no)]| - Proof: |[r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V16868914)| - Subgoals: |[query(policy3(request(V14445175),alice),no),query(get(spanishCourse,V16868914),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V16868914) - [query(policy3(request(V14445175),alice),no),query(get(spanishCourse,V16868914),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V16868914),[query(policy3(request(V14445175),alice),no),query(get(spanishCourse,V16868914),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V13756574),[query(policy3(request(V16713087),alice),no),query(get(spanishCourse,V13756574),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V13756574),[query(policy3(request(V16713087),alice),no),query(get(spanishCourse,V13756574),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V17459938),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V17459938),no)],[@(r(policy3(request(V15674464),alice),[@(@(employee(alice),caStatePolice),alice)],[]),elearn)],nil,nil),tree(request(spanishCourse,V4877503),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V4877503),no)],[@(r(policy3(request(V2730814),alice),[@(@(policeOfficer(alice),caStatePolice),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V17459938),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V17459938),no)],[r(policy3(request(V15674464),alice),[employee(alice)@caStatePolice@alice],[])@elearn],nil,nil),tree(request(spanishCourse,V4877503),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V4877503),no)],[r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V17459938),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V17459938),no)],[r(policy3(request(V15674464),alice),[employee(alice)@caStatePolice@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V17459938)| - Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V17459938),no)]| - Proof: |[r(policy3(request(V15674464),alice),[employee(alice)@caStatePolice@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V4877503),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V4877503),no)],[r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V4877503)| - Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V4877503),no)]| - Proof: |[r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |27| - originalGoal: |request(spanishCourse,V17459938)| - Goal: |request(spanishCourse,V17459938)| Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V17459938),no)]| - Proof: |[r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy3(request(V15674464),alice),[employee(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |28| - originalGoal: |request(spanishCourse,V4877503)| - Goal: |request(spanishCourse,V4877503)| Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V4877503),no)]| - Proof: |[r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V17459938)| - Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V17459938),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V17459938) - [query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V17459938),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V17459938),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V17459938),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V24622029),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V24622029),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V24622029),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V24622029),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V22323092),[query(get(spanishCourse,V22323092),no)],[@(proved_by(alice),elearn)],alice,@(employee(alice),caStatePolice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V22323092),[query(get(spanishCourse,V22323092),no)],[proved_by(alice)@elearn],alice,employee(alice)@caStatePolice)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V22323092),[query(get(spanishCourse,V22323092),no)],[proved_by(alice)@elearn],alice,employee(alice)@caStatePolice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V22323092)| - Subgoals: |[query(get(spanishCourse,V22323092),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V15674464),alice),[employee(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |29| - originalGoal: |request(spanishCourse,V22323092)| - Goal: |request(spanishCourse,V22323092)| Subgoals: |[query(get(spanishCourse,V22323092),no)]| - Proof: |[r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V15674464),alice),[employee(alice)@caStatePolice@alice],[])@elearn]| LastExpandedGoal: |employee(alice)@caStatePolice|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V28524838)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,employee(alice)@caStatePolice?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request employee(alice)@caStatePolice to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@12611a7 to alice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V4877503)| - Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V4877503),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V4877503) - [query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V4877503),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V4877503),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V4877503),no)],[],alice)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V7866553),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V7866553),no)],[],alice)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V7866553),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V7866553),no)],[],alice),Return)
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |employee(alice)@caStatePolice| - Goal: |employee(alice)@caStatePolice| Subgoals: |[query(employee(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V20727434),[query(get(spanishCourse,V20727434),no)],[@(proved_by(alice),elearn)],alice,@(policeOfficer(alice),caStatePolice))]
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: employee(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V20727434),[query(get(spanishCourse,V20727434),no)],[proved_by(alice)@elearn],alice,policeOfficer(alice)@caStatePolice)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V20727434),[query(get(spanishCourse,V20727434),no)],[proved_by(alice)@elearn],alice,policeOfficer(alice)@caStatePolice)
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: employee(alice)@caStatePolice
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V20727434)| - Subgoals: |[query(get(spanishCourse,V20727434),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |30| - originalGoal: |request(spanishCourse,V20727434)| - Goal: |request(spanishCourse,V20727434)| Subgoals: |[query(get(spanishCourse,V20727434),no)]| - Proof: |[r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]| LastExpandedGoal: |policeOfficer(alice)@caStatePolice|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V28524838)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request policeOfficer(alice)@caStatePolice to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@3b1d04 to alice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |8| - originalGoal: |policeOfficer(alice)@caStatePolice| - Goal: |policeOfficer(alice)@caStatePolice| Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |employee(alice)@caStatePolice| - Subgoals: |[query(employee(alice)@caStatePolice,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: employee(alice)@caStatePolice - [query(employee(alice)@caStatePolice,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(employee(alice)@caStatePolice,[query(employee(alice)@caStatePolice,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(employee(alice),caStatePolice),[query(@(employee(alice),caStatePolice),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(employee(alice),caStatePolice),[query(@(employee(alice),caStatePolice),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(employee(alice),caStatePolice),[],[],caStatePolice,employee(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(employee(alice)@caStatePolice,[],[],caStatePolice,employee(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(employee(alice)@caStatePolice,[],[],caStatePolice,employee(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: caStatePolice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |employee(alice)@caStatePolice| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'caStatePolice' in the entities table
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'caStatePolice' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query employee(alice)
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |policeOfficer(alice)@caStatePolice| - Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: policeOfficer(alice)@caStatePolice - [query(policeOfficer(alice)@caStatePolice,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(policeOfficer(alice)@caStatePolice,[query(policeOfficer(alice)@caStatePolice,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(policeOfficer(alice),caStatePolice),[query(@(policeOfficer(alice),caStatePolice),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(policeOfficer(alice),caStatePolice),[query(@(policeOfficer(alice),caStatePolice),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(policeOfficer(alice),caStatePolice),[],[@(signed(r(@(policeOfficer(alice),caStatePolice),[],[]),caStatePolice,signature(caStatePolice)),alice)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(policeOfficer(alice)@caStatePolice,[],[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(policeOfficer(alice)@caStatePolice,[],[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |policeOfficer(alice)@caStatePolice| - Subgoals: |[]| - Proof: |[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |9| - originalGoal: |policeOfficer(alice)@caStatePolice| - Goal: |policeOfficer(alice)@caStatePolice| Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree policeOfficer(alice)@caStatePolice answered
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |-1137479399| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer policeOfficer(alice)@caStatePolice to elearn with proof [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@1a6684f to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |30| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: policeOfficer(alice)@caStatePolice and old query: old(request(spanishCourse,V20727434),policeOfficer(alice)@caStatePolice,[query(get(spanishCourse,V20727434),no)])
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,V9688764),[query(get(spanishCourse,V9688764),no)])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |31| - originalGoal: |request(spanishCourse,V9688764)| - Goal: |request(spanishCourse,V9688764)| Subgoals: |[query(get(spanishCourse,V9688764),no)]| - Proof: |[r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V9688764)| - Subgoals: |[query(get(spanishCourse,V9688764),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V9688764) - [query(get(spanishCourse,V9688764),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V9688764),[query(get(spanishCourse,V9688764),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V32956236),[query(get(spanishCourse,V32956236),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V32956236),[query(get(spanishCourse,V32956236),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,session1),[],[@(r(get(spanishCourse,session1),hidden,hidden),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,session1),[],[r(get(spanishCourse,session1),hidden,hidden)@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,session1),[],[r(get(spanishCourse,session1),hidden,hidden)@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,session1)| - Subgoals: |[]| - Proof: |[r(get(spanishCourse,session1),hidden,hidden)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |32| - originalGoal: |request(spanishCourse,V9688764)| - Goal: |request(spanishCourse,V9688764)| Subgoals: |[query(get(spanishCourse,V9688764),no)]| - Proof: |[r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree request(spanishCourse,session1) answered
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |942910978| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer request(spanishCourse,session1) to alice with proof [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice,r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@c9131c to alice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: request(spanishCourse,session1) and old query: old(request(spanishCourse,V28524838)@elearn,request(spanishCourse,V28524838),[])
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,session1)@elearn,[])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: request(spanishCourse,session1)
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |10| - originalGoal: |request(spanishCourse,session1)@elearn| - Goal: |request(spanishCourse,session1)@elearn| Subgoals: |[]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice,r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |-1137479399| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer request(spanishCourse,session1)@elearn to client with proof [r(request(spanishCourse,V7579563)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V7579563)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V6166426),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V2730814),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice,r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to null:-1 from alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoServer/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.eLearn - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoServer/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 37000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = elearn
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = elearn
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(elearn) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = elearn - host = localhost - port = 37000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoClient/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.alice - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoClient/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 32000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = alice
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = alice
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(alice) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = alice - host = localhost - port = 32000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.TrustClient
DEBUG main org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.meta.Tree - Parsing proof: []
DEBUG main org.peertrust.meta.Tree - Created: Id: |1| - originalGoal: |request(spanishCourse,Session) @ elearn| - Goal: |request(spanishCourse,Session) @ elearn| Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG main org.peertrust.meta.MetaInterpreter - New query received from client: request(spanishCourse,Session) @ elearn
DEBUG main org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,Session) @ elearn| - Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| Requester: |client|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,Session) @ elearn - [query(request(spanishCourse,Session) @ elearn,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,Session) @ elearn,[query(request(spanishCourse,Session) @ elearn,no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(request(spanishCourse,V6151022),elearn),[query(@(request(spanishCourse,V6151022),elearn),no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(request(spanishCourse,V6151022),elearn),[query(@(request(spanishCourse,V6151022),elearn),no)],[],client),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(request(spanishCourse,V28524838),elearn),[],[],elearn,request(spanishCourse,V28524838))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V28524838)@elearn,[],[],elearn,request(spanishCourse,V28524838))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V28524838)@elearn,[],[],elearn,request(spanishCourse,V28524838))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: elearn
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V28524838)@elearn| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'elearn' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == elearn
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |request(spanishCourse,V28524838)@elearn| - Goal: |request(spanishCourse,V28524838)@elearn| Subgoals: |[]| - Proof: |[]| LastExpandedGoal: |request(spanishCourse,V28524838)|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: client
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V28524838)?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request request(spanishCourse,V28524838) to elearn from alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@18c74 to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - Added peer 'alice' to the entities table
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |1| - originalGoal: |request(spanishCourse,V28524838)| - Goal: |request(spanishCourse,V28524838)| Subgoals: |[query(request(spanishCourse,V28524838),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from alice: request(spanishCourse,V28524838)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from alice: request(spanishCourse,V28524838)
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V28524838)| - Subgoals: |[query(request(spanishCourse,V28524838),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V28524838) - [query(request(spanishCourse,V28524838),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V28524838),[query(request(spanishCourse,V28524838),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V29346106),[query(request(spanishCourse,V29346106),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V29346106),[query(request(spanishCourse,V29346106),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V10703525),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)],[@(r($(request(spanishCourse,V10703525),alice),[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)]),elearn)],nil,nil),tree(request(spanishCourse,V8846886),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)],[@(r($(request(spanishCourse,V8846886),alice),[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V10703525),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)],[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn],nil,nil),tree(request(spanishCourse,V8846886),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)],[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V10703525),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)],[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V10703525)| - Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V8846886),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)],[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V8846886)| - Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)]| - Proof: |[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |request(spanishCourse,V10703525)| - Goal: |request(spanishCourse,V10703525)| Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |3| - originalGoal: |request(spanishCourse,V8846886)| - Goal: |request(spanishCourse,V8846886)| Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V10703525)| - Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V10703525) - [query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V10703525),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V10703525),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V2081531),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V2081531),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V2771331),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)],[@(r(policy1(request(spanishCourse),alice),[@(@(drivingLicense(alice),caState),alice),policy3(request(V4219289),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V2771331),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)],[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V2771331),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)],[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V2771331)| - Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)]| - Proof: |[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |4| - originalGoal: |request(spanishCourse,V2771331)| - Goal: |request(spanishCourse,V2771331)| Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V8846886)| - Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V8846886) - [query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V8846886),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V8846886),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V32961174),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V32961174),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V32961174),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V32961174),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V28954187),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V28954187),no)],[@(r(policy2(request(spanishCourse),alice),[@(@(student(alice),hanoverUniversity),alice)],[]),elearn)],nil,nil),tree(request(spanishCourse,V26657200),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V26657200),no)],[@(r(policy2(request(spanishCourse),alice),[@(@(student(alice),naplesUniversity),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V28954187),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn],nil,nil),tree(request(spanishCourse,V26657200),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V28954187),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V28954187)| - Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)]| - Proof: |[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V26657200),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V26657200)| - Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)]| - Proof: |[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |5| - originalGoal: |request(spanishCourse,V28954187)| - Goal: |request(spanishCourse,V28954187)| Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)]| - Proof: |[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |6| - originalGoal: |request(spanishCourse,V26657200)| - Goal: |request(spanishCourse,V26657200)| Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)]| - Proof: |[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V2771331)| - Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V2771331) - [query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V2771331),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V4219289),alice),no),query(get(spanishCourse,V2771331),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V5450181),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V31156635),alice),no),query(get(spanishCourse,V5450181),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V5450181),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V31156635),alice),no),query(get(spanishCourse,V5450181),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V5525185),[query(policy3(request(V16675983),alice),no),query(get(spanishCourse,V5525185),no)],[@(proved_by(alice),elearn)],alice,@(drivingLicense(alice),caState))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V5525185),[query(policy3(request(V16675983),alice),no),query(get(spanishCourse,V5525185),no)],[proved_by(alice)@elearn],alice,drivingLicense(alice)@caState)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V5525185),[query(policy3(request(V16675983),alice),no),query(get(spanishCourse,V5525185),no)],[proved_by(alice)@elearn],alice,drivingLicense(alice)@caState)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V5525185)| - Subgoals: |[query(policy3(request(V16675983),alice),no),query(get(spanishCourse,V5525185),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |request(spanishCourse,V5525185)| - Goal: |request(spanishCourse,V5525185)| Subgoals: |[query(policy3(request(V16675983),alice),no),query(get(spanishCourse,V5525185),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn]| LastExpandedGoal: |drivingLicense(alice)@caState|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V28524838)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request drivingLicense(alice)@caState to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@1968e23 to alice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V28954187)| - Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)]| Requester: |alice|
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V28954187) - [query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V28954187),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V28954187),no)],[],alice)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |3| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V17308974),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V17308974),no)],[],alice)
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: drivingLicense(alice)@caState
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V17308974),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V17308974),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V8146001),[query(get(spanishCourse,V8146001),no)],[@(proved_by(alice),elearn)],alice,@(student(alice),hanoverUniversity))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V8146001),[query(get(spanishCourse,V8146001),no)],[proved_by(alice)@elearn],alice,student(alice)@hanoverUniversity)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V8146001),[query(get(spanishCourse,V8146001),no)],[proved_by(alice)@elearn],alice,student(alice)@hanoverUniversity)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V8146001)| - Subgoals: |[query(get(spanishCourse,V8146001),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |8| - originalGoal: |request(spanishCourse,V8146001)| - Goal: |request(spanishCourse,V8146001)| Subgoals: |[query(get(spanishCourse,V8146001),no)]| - Proof: |[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]| LastExpandedGoal: |student(alice)@hanoverUniversity|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V28524838)?,student(alice)@hanoverUniversity?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request student(alice)@hanoverUniversity to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@e80842 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V26657200)| - Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V26657200) - [query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)]
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V26657200),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V26657200),no)],[],alice)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V29509536),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V29509536),no)],[],alice)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V29509536),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V29509536),no)],[],alice),Return)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |drivingLicense(alice)@caState| - Subgoals: |[query(drivingLicense(alice)@caState,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: drivingLicense(alice)@caState - [query(drivingLicense(alice)@caState,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(drivingLicense(alice)@caState,[query(drivingLicense(alice)@caState,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V10805987),[query(get(spanishCourse,V10805987),no)],[@(proved_by(alice),elearn)],alice,@(student(alice),naplesUniversity))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V10805987),[query(get(spanishCourse,V10805987),no)],[proved_by(alice)@elearn],alice,student(alice)@naplesUniversity)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V10805987),[query(get(spanishCourse,V10805987),no)],[proved_by(alice)@elearn],alice,student(alice)@naplesUniversity)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V10805987)| - Subgoals: |[query(get(spanishCourse,V10805987),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |4| - originalGoal: |student(alice)@hanoverUniversity| - Goal: |student(alice)@hanoverUniversity| Subgoals: |[query(student(alice)@hanoverUniversity,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: student(alice)@hanoverUniversity
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |9| - originalGoal: |request(spanishCourse,V10805987)| - Goal: |request(spanishCourse,V10805987)| Subgoals: |[query(get(spanishCourse,V10805987),no)]| - Proof: |[r(request(spanishCourse,V8846886)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V8846886)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]| LastExpandedGoal: |student(alice)@naplesUniversity|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: student(alice)@hanoverUniversity
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(drivingLicense(alice),caState),[],[@(signed(r(@(drivingLicense(alice),caState),[],[]),caState,signature(caState)),alice)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V28524838)?,student(alice)@naplesUniversity?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request student(alice)@naplesUniversity to alice from elearn
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@fd68b1 to alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |drivingLicense(alice)@caState| - Subgoals: |[]| - Proof: |[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |5| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree drivingLicense(alice)@caState answered
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |student(alice)@hanoverUniversity| - Subgoals: |[query(student(alice)@hanoverUniversity,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: student(alice)@hanoverUniversity - [query(student(alice)@hanoverUniversity,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(student(alice)@hanoverUniversity,[query(student(alice)@hanoverUniversity,no)],[],elearn)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(student(alice),hanoverUniversity),[query(@(student(alice),hanoverUniversity),no)],[],elearn)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(student(alice),hanoverUniversity),[query(@(student(alice),hanoverUniversity),no)],[],elearn),Return)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |6| - originalGoal: |student(alice)@naplesUniversity| - Goal: |student(alice)@naplesUniversity| Subgoals: |[query(student(alice)@naplesUniversity,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: student(alice)@naplesUniversity
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: student(alice)@naplesUniversity
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(student(alice),hanoverUniversity),[],[],hanoverUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(student(alice)@hanoverUniversity,[],[],hanoverUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(student(alice)@hanoverUniversity,[],[],hanoverUniversity,student(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: hanoverUniversity
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |student(alice)@hanoverUniversity| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'hanoverUniversity' in the entities table
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'hanoverUniversity' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query student(alice)
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |105182928| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer drivingLicense(alice)@caState to elearn with proof [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@e35bb7 to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |student(alice)@naplesUniversity| - Subgoals: |[query(student(alice)@naplesUniversity,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: student(alice)@naplesUniversity - [query(student(alice)@naplesUniversity,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(student(alice)@naplesUniversity,[query(student(alice)@naplesUniversity,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(student(alice),naplesUniversity),[query(@(student(alice),naplesUniversity),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(student(alice),naplesUniversity),[query(@(student(alice),naplesUniversity),no)],[],elearn),Return)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: drivingLicense(alice)@caState and old query: old(request(spanishCourse,V5525185),drivingLicense(alice)@caState,[query(policy3(request(V16675983),alice),no),query(get(spanishCourse,V5525185),no)])
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(student(alice),naplesUniversity),[],[],naplesUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(student(alice)@naplesUniversity,[],[],naplesUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(student(alice)@naplesUniversity,[],[],naplesUniversity,student(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: naplesUniversity
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |student(alice)@naplesUniversity| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'naplesUniversity' in the entities table
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'naplesUniversity' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query student(alice)
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,V11587215),[query(policy3(request(V29959477),alice),no),query(get(spanishCourse,V11587215),no)])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |10| - originalGoal: |request(spanishCourse,V11587215)| - Goal: |request(spanishCourse,V11587215)| Subgoals: |[query(policy3(request(V29959477),alice),no),query(get(spanishCourse,V11587215),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V11587215)| - Subgoals: |[query(policy3(request(V29959477),alice),no),query(get(spanishCourse,V11587215),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V11587215) - [query(policy3(request(V29959477),alice),no),query(get(spanishCourse,V11587215),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V11587215),[query(policy3(request(V29959477),alice),no),query(get(spanishCourse,V11587215),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V11124894),[query(policy3(request(V10807107),alice),no),query(get(spanishCourse,V11124894),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V11124894),[query(policy3(request(V10807107),alice),no),query(get(spanishCourse,V11124894),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V860069),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V860069),no)],[@(r(policy3(request(V26780757),alice),[@(@(employee(alice),caStatePolice),alice)],[]),elearn)],nil,nil),tree(request(spanishCourse,V5041714),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V5041714),no)],[@(r(policy3(request(V11155366),alice),[@(@(policeOfficer(alice),caStatePolice),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V860069),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)],[r(policy3(request(V26780757),alice),[employee(alice)@caStatePolice@alice],[])@elearn],nil,nil),tree(request(spanishCourse,V5041714),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)],[r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V860069),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)],[r(policy3(request(V26780757),alice),[employee(alice)@caStatePolice@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V860069)| - Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)]| - Proof: |[r(policy3(request(V26780757),alice),[employee(alice)@caStatePolice@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V5041714),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)],[r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V5041714)| - Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)]| - Proof: |[r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |11| - originalGoal: |request(spanishCourse,V860069)| - Goal: |request(spanishCourse,V860069)| Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy3(request(V26780757),alice),[employee(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |12| - originalGoal: |request(spanishCourse,V5041714)| - Goal: |request(spanishCourse,V5041714)| Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V860069)| - Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V860069) - [query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V860069),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V860069),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V19627754),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V19627754),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V19627754),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V19627754),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V17901443),[query(get(spanishCourse,V17901443),no)],[@(proved_by(alice),elearn)],alice,@(employee(alice),caStatePolice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V17901443),[query(get(spanishCourse,V17901443),no)],[proved_by(alice)@elearn],alice,employee(alice)@caStatePolice)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V17901443),[query(get(spanishCourse,V17901443),no)],[proved_by(alice)@elearn],alice,employee(alice)@caStatePolice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V17901443)| - Subgoals: |[query(get(spanishCourse,V17901443),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V26780757),alice),[employee(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |13| - originalGoal: |request(spanishCourse,V17901443)| - Goal: |request(spanishCourse,V17901443)| Subgoals: |[query(get(spanishCourse,V17901443),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V26780757),alice),[employee(alice)@caStatePolice@alice],[])@elearn]| LastExpandedGoal: |employee(alice)@caStatePolice|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V28524838)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,employee(alice)@caStatePolice?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request employee(alice)@caStatePolice to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@1394894 to alice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V5041714)| - Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V5041714) - [query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V5041714),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V5041714),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V12227392),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V12227392),no)],[],alice)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V12227392),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V12227392),no)],[],alice),Return)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |employee(alice)@caStatePolice| - Goal: |employee(alice)@caStatePolice| Subgoals: |[query(employee(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: employee(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V17007273),[query(get(spanishCourse,V17007273),no)],[@(proved_by(alice),elearn)],alice,@(policeOfficer(alice),caStatePolice))]
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: employee(alice)@caStatePolice
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V17007273),[query(get(spanishCourse,V17007273),no)],[proved_by(alice)@elearn],alice,policeOfficer(alice)@caStatePolice)]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |employee(alice)@caStatePolice| - Subgoals: |[query(employee(alice)@caStatePolice,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V17007273),[query(get(spanishCourse,V17007273),no)],[proved_by(alice)@elearn],alice,policeOfficer(alice)@caStatePolice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: employee(alice)@caStatePolice - [query(employee(alice)@caStatePolice,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(employee(alice)@caStatePolice,[query(employee(alice)@caStatePolice,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V17007273)| - Subgoals: |[query(get(spanishCourse,V17007273),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(employee(alice),caStatePolice),[query(@(employee(alice),caStatePolice),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(employee(alice),caStatePolice),[query(@(employee(alice),caStatePolice),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |14| - originalGoal: |request(spanishCourse,V17007273)| - Goal: |request(spanishCourse,V17007273)| Subgoals: |[query(get(spanishCourse,V17007273),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]| LastExpandedGoal: |policeOfficer(alice)@caStatePolice|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V28524838)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(employee(alice),caStatePolice),[],[],caStatePolice,employee(alice))]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request policeOfficer(alice)@caStatePolice to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(employee(alice)@caStatePolice,[],[],caStatePolice,employee(alice))]
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@17725c4 to alice
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(employee(alice)@caStatePolice,[],[],caStatePolice,employee(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: caStatePolice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |employee(alice)@caStatePolice| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'caStatePolice' in the entities table
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'caStatePolice' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query employee(alice)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |8| - originalGoal: |policeOfficer(alice)@caStatePolice| - Goal: |policeOfficer(alice)@caStatePolice| Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |policeOfficer(alice)@caStatePolice| - Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: policeOfficer(alice)@caStatePolice - [query(policeOfficer(alice)@caStatePolice,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(policeOfficer(alice)@caStatePolice,[query(policeOfficer(alice)@caStatePolice,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(policeOfficer(alice),caStatePolice),[query(@(policeOfficer(alice),caStatePolice),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(policeOfficer(alice),caStatePolice),[query(@(policeOfficer(alice),caStatePolice),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(policeOfficer(alice),caStatePolice),[],[@(signed(r(@(policeOfficer(alice),caStatePolice),[],[]),caStatePolice,signature(caStatePolice)),alice)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(policeOfficer(alice)@caStatePolice,[],[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(policeOfficer(alice)@caStatePolice,[],[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |policeOfficer(alice)@caStatePolice| - Subgoals: |[]| - Proof: |[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |9| - originalGoal: |policeOfficer(alice)@caStatePolice| - Goal: |policeOfficer(alice)@caStatePolice| Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree policeOfficer(alice)@caStatePolice answered
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |105182928| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer policeOfficer(alice)@caStatePolice to elearn with proof [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@1a6684f to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |14| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: policeOfficer(alice)@caStatePolice and old query: old(request(spanishCourse,V17007273),policeOfficer(alice)@caStatePolice,[query(get(spanishCourse,V17007273),no)])
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,V5210326),[query(get(spanishCourse,V5210326),no)])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |15| - originalGoal: |request(spanishCourse,V5210326)| - Goal: |request(spanishCourse,V5210326)| Subgoals: |[query(get(spanishCourse,V5210326),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V5210326)| - Subgoals: |[query(get(spanishCourse,V5210326),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V5210326) - [query(get(spanishCourse,V5210326),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V5210326),[query(get(spanishCourse,V5210326),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V26440236),[query(get(spanishCourse,V26440236),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V26440236),[query(get(spanishCourse,V26440236),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,session1),[],[@(r(get(spanishCourse,session1),hidden,hidden),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,session1),[],[r(get(spanishCourse,session1),hidden,hidden)@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,session1),[],[r(get(spanishCourse,session1),hidden,hidden)@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,session1)| - Subgoals: |[]| - Proof: |[r(get(spanishCourse,session1),hidden,hidden)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |16| - originalGoal: |request(spanishCourse,V5210326)| - Goal: |request(spanishCourse,V5210326)| Subgoals: |[query(get(spanishCourse,V5210326),no)]| - Proof: |[r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree request(spanishCourse,session1) answered
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |182517457| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer request(spanishCourse,session1) to alice with proof [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice,r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@3e89c3 to alice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: request(spanishCourse,session1) and old query: old(request(spanishCourse,V28524838)@elearn,request(spanishCourse,V28524838),[])
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,session1)@elearn,[])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: request(spanishCourse,session1)
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |10| - originalGoal: |request(spanishCourse,session1)@elearn| - Goal: |request(spanishCourse,session1)@elearn| Subgoals: |[]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice,r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |105182928| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer request(spanishCourse,session1)@elearn to client with proof [r(request(spanishCourse,V10703525)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V10703525)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V4219289),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V11155366),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice,r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to null:-1 from alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG main org.peertrust.meta.MetaInterpreterListener - Stopping
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoClient/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.alice - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoClient/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 32000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = alice
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = alice
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(alice) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = alice - host = localhost - port = 32000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.TrustClient
DEBUG main org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.meta.Tree - Parsing proof: []
DEBUG main org.peertrust.meta.Tree - Created: Id: |1| - originalGoal: |request(spanishCourse,Session) @ elearn| - Goal: |request(spanishCourse,Session) @ elearn| Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG main org.peertrust.meta.MetaInterpreter - New query received from client: request(spanishCourse,Session) @ elearn
DEBUG main org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,Session) @ elearn| - Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| Requester: |client|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,Session) @ elearn - [query(request(spanishCourse,Session) @ elearn,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,Session) @ elearn,[query(request(spanishCourse,Session) @ elearn,no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(request(spanishCourse,V26613121),elearn),[query(@(request(spanishCourse,V26613121),elearn),no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(request(spanishCourse,V26613121),elearn),[query(@(request(spanishCourse,V26613121),elearn),no)],[],client),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(request(spanishCourse,V6783657),elearn),[],[],elearn,request(spanishCourse,V6783657))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V6783657)@elearn,[],[],elearn,request(spanishCourse,V6783657))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V6783657)@elearn,[],[],elearn,request(spanishCourse,V6783657))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: elearn
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V6783657)@elearn| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'elearn' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == elearn
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |request(spanishCourse,V6783657)@elearn| - Goal: |request(spanishCourse,V6783657)@elearn| Subgoals: |[]| - Proof: |[]| LastExpandedGoal: |request(spanishCourse,V6783657)|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: client
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V6783657)?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request request(spanishCourse,V6783657) to elearn from alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@4c47db to elearn
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.PTEvent
DEBUG main org.peertrust.meta.MetaInterpreterListener - Stopping
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoServer/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.eLearn - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoServer/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 37000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = elearn
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = elearn
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(elearn) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = elearn - host = localhost - port = 37000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoServer/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.eLearn - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoServer/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 37000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = elearn
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = elearn
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(elearn) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = elearn - host = localhost - port = 37000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.event.SimplePeer to event org.peertrust.event.PTEvent
DEBUG main org.peertrust.event.PTEventListener - Event listener registered
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoClient/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.alice - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoClient/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 32000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = alice
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = alice
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(alice) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = alice - host = localhost - port = 32000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.tnviz.app.TNVizListener to event org.peertrust.event.PTEvent
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.TrustClient
DEBUG main org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.meta.Tree - Parsing proof: []
DEBUG main org.peertrust.meta.Tree - Created: Id: |1| - originalGoal: |request(spanishCourse,Session) @ elearn| - Goal: |request(spanishCourse,Session) @ elearn| Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG main org.peertrust.meta.MetaInterpreter - New query received from client: request(spanishCourse,Session) @ elearn
DEBUG main org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG main org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG main org.peertrust.tnviz.app.TNVizListener - New query received from client: request(spanishCourse,Session) @ elearn - 1 - []
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,Session) @ elearn| - Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| Requester: |client|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,Session) @ elearn - [query(request(spanishCourse,Session) @ elearn,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,Session) @ elearn,[query(request(spanishCourse,Session) @ elearn,no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(request(spanishCourse,V32580443),elearn),[query(@(request(spanishCourse,V32580443),elearn),no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(request(spanishCourse,V32580443),elearn),[query(@(request(spanishCourse,V32580443),elearn),no)],[],client),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(request(spanishCourse,V24791433),elearn),[],[],elearn,request(spanishCourse,V24791433))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V24791433)@elearn,[],[],elearn,request(spanishCourse,V24791433))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V24791433)@elearn,[],[],elearn,request(spanishCourse,V24791433))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: elearn
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V24791433)@elearn| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'elearn' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == elearn
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |request(spanishCourse,V24791433)@elearn| - Goal: |request(spanishCourse,V24791433)@elearn| Subgoals: |[]| - Proof: |[]| LastExpandedGoal: |request(spanishCourse,V24791433)|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: client
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request request(spanishCourse,V24791433) to elearn from alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@1ac3379 to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNVizListener - New query received from alice: request(spanishCourse,V24791433) - 2 - [request(spanishCourse,V24791433)?]
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - Added peer 'alice' to the entities table
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |1| - originalGoal: |request(spanishCourse,V24791433)| - Goal: |request(spanishCourse,V24791433)| Subgoals: |[query(request(spanishCourse,V24791433),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from alice: request(spanishCourse,V24791433)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventListener - New query request(spanishCourse,V24791433) from alice to elearn
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from alice: request(spanishCourse,V24791433)
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?]
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?]length 1
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V24791433)| - Subgoals: |[query(request(spanishCourse,V24791433),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V24791433) - [query(request(spanishCourse,V24791433),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V24791433),[query(request(spanishCourse,V24791433),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V31544005),[query(request(spanishCourse,V31544005),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V31544005),[query(request(spanishCourse,V31544005),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V2081531),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)],[@(r($(request(spanishCourse,V2081531),alice),[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)]),elearn)],nil,nil),tree(request(spanishCourse,V20573914),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)],[@(r($(request(spanishCourse,V20573914),alice),[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V2081531),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)],[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn],nil,nil),tree(request(spanishCourse,V20573914),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)],[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V2081531),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)],[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V2081531)| - Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V20573914),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)],[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V20573914)| - Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)]| - Proof: |[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |request(spanishCourse,V2081531)| - Goal: |request(spanishCourse,V2081531)| Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |3| - originalGoal: |request(spanishCourse,V20573914)| - Goal: |request(spanishCourse,V20573914)| Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V2081531)| - Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V2081531) - [query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V2081531),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V28637909),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V28637909),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V28637909),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V28637909),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V28349544),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)],[@(r(policy1(request(spanishCourse),alice),[@(@(drivingLicense(alice),caState),alice),policy3(request(V31414927),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V28349544),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)],[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V28349544),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)],[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V28349544)| - Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)]| - Proof: |[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |4| - originalGoal: |request(spanishCourse,V28349544)| - Goal: |request(spanishCourse,V28349544)| Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V20573914)| - Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V20573914) - [query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V20573914),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V31538514),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V31538514),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V31538514),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V31538514),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V19475750),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V19475750),no)],[@(r(policy2(request(spanishCourse),alice),[@(@(student(alice),hanoverUniversity),alice)],[]),elearn)],nil,nil),tree(request(spanishCourse,V5450181),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V5450181),no)],[@(r(policy2(request(spanishCourse),alice),[@(@(student(alice),naplesUniversity),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V19475750),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn],nil,nil),tree(request(spanishCourse,V5450181),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V19475750),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V19475750)| - Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)]| - Proof: |[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V5450181),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V5450181)| - Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)]| - Proof: |[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |5| - originalGoal: |request(spanishCourse,V19475750)| - Goal: |request(spanishCourse,V19475750)| Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)]| - Proof: |[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |6| - originalGoal: |request(spanishCourse,V5450181)| - Goal: |request(spanishCourse,V5450181)| Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)]| - Proof: |[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V28349544)| - Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V28349544) - [query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V28349544),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V17764792),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V5525185),alice),no),query(get(spanishCourse,V17764792),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V17764792),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V5525185),alice),no),query(get(spanishCourse,V17764792),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V26174005),[query(policy3(request(V7905810),alice),no),query(get(spanishCourse,V26174005),no)],[@(proved_by(alice),elearn)],alice,@(drivingLicense(alice),caState))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V26174005),[query(policy3(request(V7905810),alice),no),query(get(spanishCourse,V26174005),no)],[proved_by(alice)@elearn],alice,drivingLicense(alice)@caState)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V26174005),[query(policy3(request(V7905810),alice),no),query(get(spanishCourse,V26174005),no)],[proved_by(alice)@elearn],alice,drivingLicense(alice)@caState)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V26174005)| - Subgoals: |[query(policy3(request(V7905810),alice),no),query(get(spanishCourse,V26174005),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |request(spanishCourse,V26174005)| - Goal: |request(spanishCourse,V26174005)| Subgoals: |[query(policy3(request(V7905810),alice),no),query(get(spanishCourse,V26174005),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn]| LastExpandedGoal: |drivingLicense(alice)@caState|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request drivingLicense(alice)@caState to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@1d85f79 to alice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query drivingLicense(alice)@caState from elearn to alice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V19475750)| - Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V19475750) - [query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V19475750),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V8146001),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V8146001),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V8146001),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V8146001),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V24531886),[query(get(spanishCourse,V24531886),no)],[@(proved_by(alice),elearn)],alice,@(student(alice),hanoverUniversity))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V24531886),[query(get(spanishCourse,V24531886),no)],[proved_by(alice)@elearn],alice,student(alice)@hanoverUniversity)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V24531886),[query(get(spanishCourse,V24531886),no)],[proved_by(alice)@elearn],alice,student(alice)@hanoverUniversity)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V24531886)| - Subgoals: |[query(get(spanishCourse,V24531886),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |8| - originalGoal: |request(spanishCourse,V24531886)| - Goal: |request(spanishCourse,V24531886)| Subgoals: |[query(get(spanishCourse,V24531886),no)]| - Proof: |[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]| LastExpandedGoal: |student(alice)@hanoverUniversity|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,student(alice)@hanoverUniversity?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request student(alice)@hanoverUniversity to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@d02b51 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query student(alice)@hanoverUniversity from elearn to alice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V5450181)| - Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V5450181) - [query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V5450181),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V18983808),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V18983808),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V18983808),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V18983808),no)],[],alice),Return)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V30411188),[query(get(spanishCourse,V30411188),no)],[@(proved_by(alice),elearn)],alice,@(student(alice),naplesUniversity))]
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V30411188),[query(get(spanishCourse,V30411188),no)],[proved_by(alice)@elearn],alice,student(alice)@naplesUniversity)]
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V30411188),[query(get(spanishCourse,V30411188),no)],[proved_by(alice)@elearn],alice,student(alice)@naplesUniversity)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |3| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V30411188)| - Subgoals: |[query(get(spanishCourse,V30411188),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |9| - originalGoal: |request(spanishCourse,V30411188)| - Goal: |request(spanishCourse,V30411188)| Subgoals: |[query(get(spanishCourse,V30411188),no)]| - Proof: |[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]| LastExpandedGoal: |student(alice)@naplesUniversity|
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNVizListener - New query received from elearn: drivingLicense(alice)@caState - 7 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,student(alice)@naplesUniversity?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request student(alice)@naplesUniversity to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@b0ce8f to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query student(alice)@naplesUniversity from elearn to alice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |drivingLicense(alice)@caState| - Subgoals: |[query(drivingLicense(alice)@caState,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: drivingLicense(alice)@caState - [query(drivingLicense(alice)@caState,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(drivingLicense(alice)@caState,[query(drivingLicense(alice)@caState,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(drivingLicense(alice),caState),[],[@(signed(r(@(drivingLicense(alice),caState),[],[]),caState,signature(caState)),alice)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |drivingLicense(alice)@caState| - Subgoals: |[]| - Proof: |[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |4| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree drivingLicense(alice)@caState answered
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |-809046689| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer drivingLicense(alice)@caState to elearn with proof [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@9c2715 to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventListener - New answer drivingLicense(alice)@caState from alice to elearn
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNVizListener - New answer received from alice: drivingLicense(alice)@caState - 7 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>]
INFO MetaInterpreterListener org.peertrust.event.PTEventListener - Request successful
INFO MetaInterpreterListener org.peertrust.event.PTEventListener - The answer is drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: drivingLicense(alice)@caState and old query: old(request(spanishCourse,V26174005),drivingLicense(alice)@caState,[query(policy3(request(V7905810),alice),no),query(get(spanishCourse,V26174005),no)])
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,V11582167),[query(policy3(request(V12227392),alice),no),query(get(spanishCourse,V11582167),no)])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |10| - originalGoal: |request(spanishCourse,V11582167)| - Goal: |request(spanishCourse,V11582167)| Subgoals: |[query(policy3(request(V12227392),alice),no),query(get(spanishCourse,V11582167),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V11582167)| - Subgoals: |[query(policy3(request(V12227392),alice),no),query(get(spanishCourse,V11582167),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V11582167) - [query(policy3(request(V12227392),alice),no),query(get(spanishCourse,V11582167),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V11582167),[query(policy3(request(V12227392),alice),no),query(get(spanishCourse,V11582167),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V18450577),[query(policy3(request(V22355327),alice),no),query(get(spanishCourse,V18450577),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V18450577),[query(policy3(request(V22355327),alice),no),query(get(spanishCourse,V18450577),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V13185532),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V13185532),no)],[@(r(policy3(request(V15778003),alice),[@(@(employee(alice),caStatePolice),alice)],[]),elearn)],nil,nil),tree(request(spanishCourse,V229902),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V229902),no)],[@(r(policy3(request(V5210326),alice),[@(@(policeOfficer(alice),caStatePolice),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V13185532),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)],[r(policy3(request(V15778003),alice),[employee(alice)@caStatePolice@alice],[])@elearn],nil,nil),tree(request(spanishCourse,V229902),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)],[r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V13185532),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)],[r(policy3(request(V15778003),alice),[employee(alice)@caStatePolice@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V13185532)| - Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)]| - Proof: |[r(policy3(request(V15778003),alice),[employee(alice)@caStatePolice@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V229902),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)],[r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V229902)| - Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)]| - Proof: |[r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |11| - originalGoal: |request(spanishCourse,V13185532)| - Goal: |request(spanishCourse,V13185532)| Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy3(request(V15778003),alice),[employee(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |12| - originalGoal: |request(spanishCourse,V229902)| - Goal: |request(spanishCourse,V229902)| Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V13185532)| - Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V13185532) - [query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V13185532),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V26440236),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V26440236),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V26440236),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V26440236),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V27602911),[query(get(spanishCourse,V27602911),no)],[@(proved_by(alice),elearn)],alice,@(employee(alice),caStatePolice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V27602911),[query(get(spanishCourse,V27602911),no)],[proved_by(alice)@elearn],alice,employee(alice)@caStatePolice)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V27602911),[query(get(spanishCourse,V27602911),no)],[proved_by(alice)@elearn],alice,employee(alice)@caStatePolice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V27602911)| - Subgoals: |[query(get(spanishCourse,V27602911),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V15778003),alice),[employee(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |13| - originalGoal: |request(spanishCourse,V27602911)| - Goal: |request(spanishCourse,V27602911)| Subgoals: |[query(get(spanishCourse,V27602911),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V15778003),alice),[employee(alice)@caStatePolice@alice],[])@elearn]| LastExpandedGoal: |employee(alice)@caStatePolice|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,employee(alice)@caStatePolice?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request employee(alice)@caStatePolice to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@1ea0252 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query employee(alice)@caStatePolice from elearn to alice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V229902)| - Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V229902) - [query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V229902),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V22522451),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V22522451),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V22522451),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V22522451),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V7579563),[query(get(spanishCourse,V7579563),no)],[@(proved_by(alice),elearn)],alice,@(policeOfficer(alice),caStatePolice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V7579563),[query(get(spanishCourse,V7579563),no)],[proved_by(alice)@elearn],alice,policeOfficer(alice)@caStatePolice)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V7579563),[query(get(spanishCourse,V7579563),no)],[proved_by(alice)@elearn],alice,policeOfficer(alice)@caStatePolice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V7579563)| - Subgoals: |[query(get(spanishCourse,V7579563),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |14| - originalGoal: |request(spanishCourse,V7579563)| - Goal: |request(spanishCourse,V7579563)| Subgoals: |[query(get(spanishCourse,V7579563),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]| LastExpandedGoal: |policeOfficer(alice)@caStatePolice|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request policeOfficer(alice)@caStatePolice to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@104faf8 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query policeOfficer(alice)@caStatePolice from elearn to alice
DEBUG main org.peertrust.meta.MetaInterpreterListener - Stopping
DEBUG Thread-1 org.peertrust.meta.MetaInterpreterListener - Stopping
DEBUG Thread-1 org.peertrust.meta.MetaInterpreterListener - Stopping
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoServer/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.eLearn - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoServer/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoServer/demoPolicies.eLearn loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 37000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = elearn
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = elearn
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(elearn) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = elearn - host = localhost - port = 37000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.event.SimplePeer to event org.peertrust.event.PTEvent
DEBUG main org.peertrust.event.PTEventListener - Event listener registered
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoClient/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.alice - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoClient/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 32000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = alice
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = alice
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(alice) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = alice - host = localhost - port = 32000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.tnviz.app.TNVizListener to event org.peertrust.event.PTEvent
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.TrustClient
DEBUG main org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.meta.Tree - Parsing proof: []
DEBUG main org.peertrust.meta.Tree - Created: Id: |1| - originalGoal: |request(spanishCourse,Session) @ elearn| - Goal: |request(spanishCourse,Session) @ elearn| Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG main org.peertrust.meta.MetaInterpreter - New query received from client: request(spanishCourse,Session) @ elearn
DEBUG main org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG main org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG main org.peertrust.tnviz.app.TNVizListener - New query received from client: request(spanishCourse,Session) @ elearn - 1 - []
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,Session) @ elearn| - Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| Requester: |client|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,Session) @ elearn - [query(request(spanishCourse,Session) @ elearn,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,Session) @ elearn,[query(request(spanishCourse,Session) @ elearn,no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(request(spanishCourse,V32580443),elearn),[query(@(request(spanishCourse,V32580443),elearn),no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(request(spanishCourse,V32580443),elearn),[query(@(request(spanishCourse,V32580443),elearn),no)],[],client),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(request(spanishCourse,V24791433),elearn),[],[],elearn,request(spanishCourse,V24791433))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V24791433)@elearn,[],[],elearn,request(spanishCourse,V24791433))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V24791433)@elearn,[],[],elearn,request(spanishCourse,V24791433))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: elearn
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V24791433)@elearn| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'elearn' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == elearn
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |request(spanishCourse,V24791433)@elearn| - Goal: |request(spanishCourse,V24791433)@elearn| Subgoals: |[]| - Proof: |[]| LastExpandedGoal: |request(spanishCourse,V24791433)|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: client
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request request(spanishCourse,V24791433) to elearn from alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@1ac3379 to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNVizListener - New query received from alice: request(spanishCourse,V24791433) - 2 - [request(spanishCourse,V24791433)?]
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - Added peer 'alice' to the entities table
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |1| - originalGoal: |request(spanishCourse,V24791433)| - Goal: |request(spanishCourse,V24791433)| Subgoals: |[query(request(spanishCourse,V24791433),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from alice: request(spanishCourse,V24791433)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventListener - New query request(spanishCourse,V24791433) from alice to elearn
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from alice: request(spanishCourse,V24791433)
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?]
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?]length 1
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V24791433)| - Subgoals: |[query(request(spanishCourse,V24791433),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V24791433) - [query(request(spanishCourse,V24791433),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V24791433),[query(request(spanishCourse,V24791433),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V31544005),[query(request(spanishCourse,V31544005),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V31544005),[query(request(spanishCourse,V31544005),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V2081531),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)],[@(r($(request(spanishCourse,V2081531),alice),[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)]),elearn)],nil,nil),tree(request(spanishCourse,V20573914),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)],[@(r($(request(spanishCourse,V20573914),alice),[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V2081531),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)],[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn],nil,nil),tree(request(spanishCourse,V20573914),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)],[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V2081531),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)],[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V2081531)| - Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V20573914),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)],[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V20573914)| - Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)]| - Proof: |[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |request(spanishCourse,V2081531)| - Goal: |request(spanishCourse,V2081531)| Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |3| - originalGoal: |request(spanishCourse,V20573914)| - Goal: |request(spanishCourse,V20573914)| Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V2081531)| - Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V2081531) - [query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V2081531),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V2081531),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V28637909),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V28637909),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V28637909),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V28637909),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V28349544),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)],[@(r(policy1(request(spanishCourse),alice),[@(@(drivingLicense(alice),caState),alice),policy3(request(V31414927),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V28349544),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)],[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V28349544),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)],[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V28349544)| - Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)]| - Proof: |[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |4| - originalGoal: |request(spanishCourse,V28349544)| - Goal: |request(spanishCourse,V28349544)| Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V20573914)| - Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V20573914) - [query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V20573914),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V20573914),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V31538514),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V31538514),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V31538514),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V31538514),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V19475750),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V19475750),no)],[@(r(policy2(request(spanishCourse),alice),[@(@(student(alice),hanoverUniversity),alice)],[]),elearn)],nil,nil),tree(request(spanishCourse,V5450181),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V5450181),no)],[@(r(policy2(request(spanishCourse),alice),[@(@(student(alice),naplesUniversity),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V19475750),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn],nil,nil),tree(request(spanishCourse,V5450181),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V19475750),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V19475750)| - Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)]| - Proof: |[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V5450181),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V5450181)| - Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)]| - Proof: |[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |5| - originalGoal: |request(spanishCourse,V19475750)| - Goal: |request(spanishCourse,V19475750)| Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)]| - Proof: |[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |6| - originalGoal: |request(spanishCourse,V5450181)| - Goal: |request(spanishCourse,V5450181)| Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)]| - Proof: |[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V28349544)| - Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V28349544) - [query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V28349544),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V31414927),alice),no),query(get(spanishCourse,V28349544),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V17764792),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V5525185),alice),no),query(get(spanishCourse,V17764792),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V17764792),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V5525185),alice),no),query(get(spanishCourse,V17764792),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V26174005),[query(policy3(request(V7905810),alice),no),query(get(spanishCourse,V26174005),no)],[@(proved_by(alice),elearn)],alice,@(drivingLicense(alice),caState))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V26174005),[query(policy3(request(V7905810),alice),no),query(get(spanishCourse,V26174005),no)],[proved_by(alice)@elearn],alice,drivingLicense(alice)@caState)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V26174005),[query(policy3(request(V7905810),alice),no),query(get(spanishCourse,V26174005),no)],[proved_by(alice)@elearn],alice,drivingLicense(alice)@caState)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V26174005)| - Subgoals: |[query(policy3(request(V7905810),alice),no),query(get(spanishCourse,V26174005),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |request(spanishCourse,V26174005)| - Goal: |request(spanishCourse,V26174005)| Subgoals: |[query(policy3(request(V7905810),alice),no),query(get(spanishCourse,V26174005),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn]| LastExpandedGoal: |drivingLicense(alice)@caState|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request drivingLicense(alice)@caState to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@1d85f79 to alice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query drivingLicense(alice)@caState from elearn to alice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V19475750)| - Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V19475750) - [query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |3| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V19475750),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V19475750),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V8146001),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V8146001),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V8146001),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V8146001),no)],[],alice),Return)
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNVizListener - New query received from elearn: drivingLicense(alice)@caState - 7 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V24531886),[query(get(spanishCourse,V24531886),no)],[@(proved_by(alice),elearn)],alice,@(student(alice),hanoverUniversity))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V24531886),[query(get(spanishCourse,V24531886),no)],[proved_by(alice)@elearn],alice,student(alice)@hanoverUniversity)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V24531886),[query(get(spanishCourse,V24531886),no)],[proved_by(alice)@elearn],alice,student(alice)@hanoverUniversity)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V24531886)| - Subgoals: |[query(get(spanishCourse,V24531886),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |8| - originalGoal: |request(spanishCourse,V24531886)| - Goal: |request(spanishCourse,V24531886)| Subgoals: |[query(get(spanishCourse,V24531886),no)]| - Proof: |[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]| LastExpandedGoal: |student(alice)@hanoverUniversity|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,student(alice)@hanoverUniversity?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request student(alice)@hanoverUniversity to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@d02b51 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |drivingLicense(alice)@caState| - Subgoals: |[query(drivingLicense(alice)@caState,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: drivingLicense(alice)@caState - [query(drivingLicense(alice)@caState,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(drivingLicense(alice)@caState,[query(drivingLicense(alice)@caState,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(drivingLicense(alice),caState),[],[@(signed(r(@(drivingLicense(alice),caState),[],[]),caState,signature(caState)),alice)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)]
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query student(alice)@hanoverUniversity from elearn to alice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V5450181)| - Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V5450181) - [query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V5450181),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V5450181),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V18983808),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V18983808),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V18983808),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V18983808),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |drivingLicense(alice)@caState| - Subgoals: |[]| - Proof: |[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V30411188),[query(get(spanishCourse,V30411188),no)],[@(proved_by(alice),elearn)],alice,@(student(alice),naplesUniversity))]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V30411188),[query(get(spanishCourse,V30411188),no)],[proved_by(alice)@elearn],alice,student(alice)@naplesUniversity)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V30411188),[query(get(spanishCourse,V30411188),no)],[proved_by(alice)@elearn],alice,student(alice)@naplesUniversity)
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |4| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V30411188)| - Subgoals: |[query(get(spanishCourse,V30411188),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree drivingLicense(alice)@caState answered
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |1819450527| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer drivingLicense(alice)@caState to elearn with proof [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |9| - originalGoal: |request(spanishCourse,V30411188)| - Goal: |request(spanishCourse,V30411188)| Subgoals: |[query(get(spanishCourse,V30411188),no)]| - Proof: |[r(request(spanishCourse,V20573914)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V20573914)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]| LastExpandedGoal: |student(alice)@naplesUniversity|
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@1c391c3 to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,student(alice)@naplesUniversity?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request student(alice)@naplesUniversity to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@b0ce8f to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNVizListener - New answer received from alice: drivingLicense(alice)@caState - 7 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>]
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventListener - New answer drivingLicense(alice)@caState from alice to elearn
INFO MetaInterpreterListener org.peertrust.event.PTEventListener - Request successful
INFO MetaInterpreterListener org.peertrust.event.PTEventListener - The answer is drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: drivingLicense(alice)@caState and old query: old(request(spanishCourse,V26174005),drivingLicense(alice)@caState,[query(policy3(request(V7905810),alice),no),query(get(spanishCourse,V26174005),no)])
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,V11582167),[query(policy3(request(V12227392),alice),no),query(get(spanishCourse,V11582167),no)])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |10| - originalGoal: |request(spanishCourse,V11582167)| - Goal: |request(spanishCourse,V11582167)| Subgoals: |[query(policy3(request(V12227392),alice),no),query(get(spanishCourse,V11582167),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query student(alice)@naplesUniversity from elearn to alice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V11582167)| - Subgoals: |[query(policy3(request(V12227392),alice),no),query(get(spanishCourse,V11582167),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V11582167) - [query(policy3(request(V12227392),alice),no),query(get(spanishCourse,V11582167),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V11582167),[query(policy3(request(V12227392),alice),no),query(get(spanishCourse,V11582167),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V18450577),[query(policy3(request(V22355327),alice),no),query(get(spanishCourse,V18450577),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V18450577),[query(policy3(request(V22355327),alice),no),query(get(spanishCourse,V18450577),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V13185532),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V13185532),no)],[@(r(policy3(request(V15778003),alice),[@(@(employee(alice),caStatePolice),alice)],[]),elearn)],nil,nil),tree(request(spanishCourse,V229902),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V229902),no)],[@(r(policy3(request(V5210326),alice),[@(@(policeOfficer(alice),caStatePolice),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V13185532),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)],[r(policy3(request(V15778003),alice),[employee(alice)@caStatePolice@alice],[])@elearn],nil,nil),tree(request(spanishCourse,V229902),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)],[r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V13185532),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)],[r(policy3(request(V15778003),alice),[employee(alice)@caStatePolice@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V13185532)| - Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)]| - Proof: |[r(policy3(request(V15778003),alice),[employee(alice)@caStatePolice@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V229902),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)],[r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V229902)| - Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)]| - Proof: |[r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |11| - originalGoal: |request(spanishCourse,V13185532)| - Goal: |request(spanishCourse,V13185532)| Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy3(request(V15778003),alice),[employee(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |12| - originalGoal: |request(spanishCourse,V229902)| - Goal: |request(spanishCourse,V229902)| Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V13185532)| - Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V13185532) - [query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V13185532),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V13185532),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V26440236),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V26440236),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V26440236),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V26440236),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V27602911),[query(get(spanishCourse,V27602911),no)],[@(proved_by(alice),elearn)],alice,@(employee(alice),caStatePolice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V27602911),[query(get(spanishCourse,V27602911),no)],[proved_by(alice)@elearn],alice,employee(alice)@caStatePolice)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V27602911),[query(get(spanishCourse,V27602911),no)],[proved_by(alice)@elearn],alice,employee(alice)@caStatePolice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V27602911)| - Subgoals: |[query(get(spanishCourse,V27602911),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V15778003),alice),[employee(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |13| - originalGoal: |request(spanishCourse,V27602911)| - Goal: |request(spanishCourse,V27602911)| Subgoals: |[query(get(spanishCourse,V27602911),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V15778003),alice),[employee(alice)@caStatePolice@alice],[])@elearn]| LastExpandedGoal: |employee(alice)@caStatePolice|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,employee(alice)@caStatePolice?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request employee(alice)@caStatePolice to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@1ea0252 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query employee(alice)@caStatePolice from elearn to alice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V229902)| - Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V229902) - [query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V229902),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V229902),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V29131495),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V29131495),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V29131495),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V29131495),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V31822120),[query(get(spanishCourse,V31822120),no)],[@(proved_by(alice),elearn)],alice,@(policeOfficer(alice),caStatePolice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V31822120),[query(get(spanishCourse,V31822120),no)],[proved_by(alice)@elearn],alice,policeOfficer(alice)@caStatePolice)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V31822120),[query(get(spanishCourse,V31822120),no)],[proved_by(alice)@elearn],alice,policeOfficer(alice)@caStatePolice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V31822120)| - Subgoals: |[query(get(spanishCourse,V31822120),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |14| - originalGoal: |request(spanishCourse,V31822120)| - Goal: |request(spanishCourse,V31822120)| Subgoals: |[query(get(spanishCourse,V31822120),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]| LastExpandedGoal: |policeOfficer(alice)@caStatePolice|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request policeOfficer(alice)@caStatePolice to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@9ced8e to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query policeOfficer(alice)@caStatePolice from elearn to alice
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |5| - originalGoal: |student(alice)@hanoverUniversity| - Goal: |student(alice)@hanoverUniversity| Subgoals: |[query(student(alice)@hanoverUniversity,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: student(alice)@hanoverUniversity
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNVizListener - New query received from elearn: student(alice)@hanoverUniversity - 8 - [request(spanishCourse,V24791433)?,student(alice)@hanoverUniversity?]
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?,student(alice)@hanoverUniversity?]
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: student(alice)@hanoverUniversity
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |6| - originalGoal: |student(alice)@naplesUniversity| - Goal: |student(alice)@naplesUniversity| Subgoals: |[query(student(alice)@naplesUniversity,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: student(alice)@naplesUniversity
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNVizListener - New query received from elearn: student(alice)@naplesUniversity - 9 - [request(spanishCourse,V24791433)?,student(alice)@naplesUniversity?]
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?,student(alice)@naplesUniversity?]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |student(alice)@hanoverUniversity| - Subgoals: |[query(student(alice)@hanoverUniversity,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: student(alice)@hanoverUniversity - [query(student(alice)@hanoverUniversity,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(student(alice)@hanoverUniversity,[query(student(alice)@hanoverUniversity,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(student(alice),hanoverUniversity),[query(@(student(alice),hanoverUniversity),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(student(alice),hanoverUniversity),[query(@(student(alice),hanoverUniversity),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(student(alice),hanoverUniversity),[],[],hanoverUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(student(alice)@hanoverUniversity,[],[],hanoverUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(student(alice)@hanoverUniversity,[],[],hanoverUniversity,student(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: hanoverUniversity
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |student(alice)@hanoverUniversity| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'hanoverUniversity' in the entities table
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'hanoverUniversity' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query student(alice)
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |student(alice)@naplesUniversity| - Subgoals: |[query(student(alice)@naplesUniversity,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: student(alice)@naplesUniversity - [query(student(alice)@naplesUniversity,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(student(alice)@naplesUniversity,[query(student(alice)@naplesUniversity,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(student(alice),naplesUniversity),[query(@(student(alice),naplesUniversity),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(student(alice),naplesUniversity),[query(@(student(alice),naplesUniversity),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(student(alice),naplesUniversity),[],[],naplesUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(student(alice)@naplesUniversity,[],[],naplesUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(student(alice)@naplesUniversity,[],[],naplesUniversity,student(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: naplesUniversity
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |student(alice)@naplesUniversity| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'naplesUniversity' in the entities table
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'naplesUniversity' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query student(alice)
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: student(alice)@naplesUniversity
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |employee(alice)@caStatePolice| - Goal: |employee(alice)@caStatePolice| Subgoals: |[query(employee(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: employee(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNVizListener - New query received from elearn: employee(alice)@caStatePolice - 13 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,employee(alice)@caStatePolice?]
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,employee(alice)@caStatePolice?]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |employee(alice)@caStatePolice| - Subgoals: |[query(employee(alice)@caStatePolice,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: employee(alice)@caStatePolice - [query(employee(alice)@caStatePolice,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(employee(alice)@caStatePolice,[query(employee(alice)@caStatePolice,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(employee(alice),caStatePolice),[query(@(employee(alice),caStatePolice),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(employee(alice),caStatePolice),[query(@(employee(alice),caStatePolice),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(employee(alice),caStatePolice),[],[],caStatePolice,employee(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(employee(alice)@caStatePolice,[],[],caStatePolice,employee(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(employee(alice)@caStatePolice,[],[],caStatePolice,employee(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: caStatePolice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |employee(alice)@caStatePolice| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'caStatePolice' in the entities table
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'caStatePolice' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query employee(alice)
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: employee(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |8| - originalGoal: |policeOfficer(alice)@caStatePolice| - Goal: |policeOfficer(alice)@caStatePolice| Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNVizListener - New query received from elearn: policeOfficer(alice)@caStatePolice - 14 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?]
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?]
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |policeOfficer(alice)@caStatePolice| - Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: policeOfficer(alice)@caStatePolice - [query(policeOfficer(alice)@caStatePolice,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(policeOfficer(alice)@caStatePolice,[query(policeOfficer(alice)@caStatePolice,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(policeOfficer(alice),caStatePolice),[query(@(policeOfficer(alice),caStatePolice),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(policeOfficer(alice),caStatePolice),[query(@(policeOfficer(alice),caStatePolice),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(policeOfficer(alice),caStatePolice),[],[@(signed(r(@(policeOfficer(alice),caStatePolice),[],[]),caStatePolice,signature(caStatePolice)),alice)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(policeOfficer(alice)@caStatePolice,[],[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(policeOfficer(alice)@caStatePolice,[],[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |policeOfficer(alice)@caStatePolice| - Subgoals: |[]| - Proof: |[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |9| - originalGoal: |policeOfficer(alice)@caStatePolice| - Goal: |policeOfficer(alice)@caStatePolice| Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree policeOfficer(alice)@caStatePolice answered
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |1819450527| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer policeOfficer(alice)@caStatePolice to elearn with proof [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@46b90a to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNVizListener - New answer received from alice: policeOfficer(alice)@caStatePolice - 14 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?,<policeOfficer(alice)@caStatePolice>]
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventListener - New answer policeOfficer(alice)@caStatePolice from alice to elearn
INFO MetaInterpreterListener org.peertrust.event.PTEventListener - Request successful
INFO MetaInterpreterListener org.peertrust.event.PTEventListener - The answer is policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |14| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: policeOfficer(alice)@caStatePolice and old query: old(request(spanishCourse,V31822120),policeOfficer(alice)@caStatePolice,[query(get(spanishCourse,V31822120),no)])
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,V31401995),[query(get(spanishCourse,V31401995),no)])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |15| - originalGoal: |request(spanishCourse,V31401995)| - Goal: |request(spanishCourse,V31401995)| Subgoals: |[query(get(spanishCourse,V31401995),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V31401995)| - Subgoals: |[query(get(spanishCourse,V31401995),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V31401995) - [query(get(spanishCourse,V31401995),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V31401995),[query(get(spanishCourse,V31401995),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V13459339),[query(get(spanishCourse,V13459339),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V13459339),[query(get(spanishCourse,V13459339),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,session1),[],[@(r(get(spanishCourse,session1),hidden,hidden),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,session1),[],[r(get(spanishCourse,session1),hidden,hidden)@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,session1),[],[r(get(spanishCourse,session1),hidden,hidden)@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,session1)| - Subgoals: |[]| - Proof: |[r(get(spanishCourse,session1),hidden,hidden)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |16| - originalGoal: |request(spanishCourse,V31401995)| - Goal: |request(spanishCourse,V31401995)| Subgoals: |[query(get(spanishCourse,V31401995),no)]| - Proof: |[r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree request(spanishCourse,session1) answered
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |1512420905| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer request(spanishCourse,session1) to alice with proof [r(request(spanishCourse,V2081531)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V2081531)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V31414927),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V5210326),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice,r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@73a7ab to alice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New answer request(spanishCourse,session1) from elearn to alice
INFO MetaInterpreter org.peertrust.event.PTEventListener - Request successful
INFO MetaInterpreter org.peertrust.event.PTEventListener - The answer is request(spanishCourse,session1)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNVizListener - New answer received from elearn: request(spanishCourse,session1) - 2 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?,<policeOfficer(alice)@caStatePolice>,<request(spanishCourse,session1)>]
DEBUG Thread-1 org.peertrust.meta.MetaInterpreterListener - Stopping
DEBUG main org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoClient/entities.dat
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - $Id: SimpleSocketFactory.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.alice - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoClient/ - License = minervagui.mca
DEBUG main org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice into the inference engine
DEBUG main org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice loaded
DEBUG main org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ServerSocket
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - port: 32000
DEBUG main org.peertrust.net.socket.SimpleServerSocket - $Id: SimpleServerSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main org.peertrust.meta.MetaInterpreter - PeerName = alice
DEBUG main org.peertrust.meta.MetaInterpreter - (Init) PeerName = alice
DEBUG main org.peertrust.inference.MinervaProlog - Inserting peerName(alice) in the KB
DEBUG main org.peertrust.net.socket.SimpleSocketFactory - Creating new ClientSocket
DEBUG main org.peertrust.net.socket.SimpleClientSocket - $Id: SimpleClientSocket.java,v 1.2 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main org.peertrust.meta.MetaInterpreter - Local Peer: alias = alice - host = localhost - port = 32000
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.meta.MetaInterpreter to event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - start
DEBUG main org.peertrust.event.PTEventDispatcher - .registering org.peertrust.tnviz.app.TNVizListener to event org.peertrust.event.PTEvent
DEBUG main org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.TrustClient
DEBUG main org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG main org.peertrust.meta.Tree - Parsing proof: []
DEBUG main org.peertrust.meta.Tree - Created: Id: |1| - originalGoal: |request(spanishCourse,Session) @ elearn| - Goal: |request(spanishCourse,Session) @ elearn| Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG main org.peertrust.meta.MetaInterpreter - New query received from client: request(spanishCourse,Session) @ elearn
DEBUG main org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG main org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG main org.peertrust.tnviz.app.TNVizListener - New query received from client: request(spanishCourse,Session) @ elearn - 1 - []
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,Session) @ elearn| - Subgoals: |[query(request(spanishCourse,Session) @ elearn,no)]| Requester: |client|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,Session) @ elearn - [query(request(spanishCourse,Session) @ elearn,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,Session) @ elearn,[query(request(spanishCourse,Session) @ elearn,no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(request(spanishCourse,V32580443),elearn),[query(@(request(spanishCourse,V32580443),elearn),no)],[],client)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(request(spanishCourse,V32580443),elearn),[query(@(request(spanishCourse,V32580443),elearn),no)],[],client),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(request(spanishCourse,V24791433),elearn),[],[],elearn,request(spanishCourse,V24791433))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V24791433)@elearn,[],[],elearn,request(spanishCourse,V24791433))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V24791433)@elearn,[],[],elearn,request(spanishCourse,V24791433))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: elearn
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V24791433)@elearn| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'elearn' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == elearn
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |request(spanishCourse,V24791433)@elearn| - Goal: |request(spanishCourse,V24791433)@elearn| Subgoals: |[]| - Proof: |[]| LastExpandedGoal: |request(spanishCourse,V24791433)|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: client
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request request(spanishCourse,V24791433) to elearn from alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@1ac3379 to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |17| - originalGoal: |request(spanishCourse,V24791433)| - Goal: |request(spanishCourse,V24791433)| Subgoals: |[query(request(spanishCourse,V24791433),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from alice: request(spanishCourse,V24791433)
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNVizListener - New query received from alice: request(spanishCourse,V24791433) - 2 - [request(spanishCourse,V24791433)?]
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventListener - New query request(spanishCourse,V24791433) from alice to elearn
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from alice: request(spanishCourse,V24791433)
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?]
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?]length 1
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V24791433)| - Subgoals: |[query(request(spanishCourse,V24791433),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V24791433) - [query(request(spanishCourse,V24791433),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V24791433),[query(request(spanishCourse,V24791433),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V16496587),[query(request(spanishCourse,V16496587),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V16496587),[query(request(spanishCourse,V16496587),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V12430225),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V12430225),no)],[@(r($(request(spanishCourse,V12430225),alice),[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)]),elearn)],nil,nil),tree(request(spanishCourse,V4898828),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V4898828),no)],[@(r($(request(spanishCourse,V4898828),alice),[policy2(request(spanishCourse),alice)],[get(spanishCourse,V4898828)]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V12430225),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V12430225),no)],[r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn],nil,nil),tree(request(spanishCourse,V4898828),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V4898828),no)],[r(request(spanishCourse,V4898828)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V4898828)])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V12430225),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V12430225),no)],[r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V12430225)| - Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V12430225),no)]| - Proof: |[r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V4898828),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V4898828),no)],[r(request(spanishCourse,V4898828)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V4898828)])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V4898828)| - Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V4898828),no)]| - Proof: |[r(request(spanishCourse,V4898828)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V4898828)])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |18| - originalGoal: |request(spanishCourse,V12430225)| - Goal: |request(spanishCourse,V12430225)| Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V12430225),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |19| - originalGoal: |request(spanishCourse,V4898828)| - Goal: |request(spanishCourse,V4898828)| Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V4898828),no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V4898828)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V4898828)])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V12430225)| - Subgoals: |[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V12430225),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V12430225) - [query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V12430225),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V12430225),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V12430225),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V25582376),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V25582376),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V25582376),[query(policy1(request(spanishCourse),alice),no),query(get(spanishCourse,V25582376),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V22725577),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V32233307),alice),no),query(get(spanishCourse,V22725577),no)],[@(r(policy1(request(spanishCourse),alice),[@(@(drivingLicense(alice),caState),alice),policy3(request(V32233307),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V22725577),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V32233307),alice),no),query(get(spanishCourse,V22725577),no)],[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V22725577),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V32233307),alice),no),query(get(spanishCourse,V22725577),no)],[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V22725577)| - Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V32233307),alice),no),query(get(spanishCourse,V22725577),no)]| - Proof: |[r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |20| - originalGoal: |request(spanishCourse,V22725577)| - Goal: |request(spanishCourse,V22725577)| Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V32233307),alice),no),query(get(spanishCourse,V22725577),no)]| - Proof: |[r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V4898828)| - Subgoals: |[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V4898828),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V4898828) - [query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V4898828),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V4898828),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V4898828),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V2478770),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V2478770),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V2478770),[query(policy2(request(spanishCourse),alice),no),query(get(spanishCourse,V2478770),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V15138573),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V15138573),no)],[@(r(policy2(request(spanishCourse),alice),[@(@(student(alice),hanoverUniversity),alice)],[]),elearn)],nil,nil),tree(request(spanishCourse,V24306761),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V24306761),no)],[@(r(policy2(request(spanishCourse),alice),[@(@(student(alice),naplesUniversity),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V15138573),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V15138573),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn],nil,nil),tree(request(spanishCourse,V24306761),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V24306761),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V15138573),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V15138573),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V15138573)| - Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V15138573),no)]| - Proof: |[r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V24306761),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V24306761),no)],[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V24306761)| - Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V24306761),no)]| - Proof: |[r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V4898828)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V4898828)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |21| - originalGoal: |request(spanishCourse,V15138573)| - Goal: |request(spanishCourse,V15138573)| Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V15138573),no)]| - Proof: |[r(request(spanishCourse,V4898828)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V4898828)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V4898828)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V4898828)])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |22| - originalGoal: |request(spanishCourse,V24306761)| - Goal: |request(spanishCourse,V24306761)| Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V24306761),no)]| - Proof: |[r(request(spanishCourse,V4898828)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V4898828)])@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V22725577)| - Subgoals: |[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V32233307),alice),no),query(get(spanishCourse,V22725577),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V22725577) - [query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V32233307),alice),no),query(get(spanishCourse,V22725577),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V22725577),[query(drivingLicense(alice)@caState@alice,no),query(policy3(request(V32233307),alice),no),query(get(spanishCourse,V22725577),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V32079775),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V12170552),alice),no),query(get(spanishCourse,V32079775),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V32079775),[query(@(@(drivingLicense(alice),caState),alice),no),query(policy3(request(V12170552),alice),no),query(get(spanishCourse,V32079775),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V9489155),[query(policy3(request(V27832),alice),no),query(get(spanishCourse,V9489155),no)],[@(proved_by(alice),elearn)],alice,@(drivingLicense(alice),caState))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V9489155),[query(policy3(request(V27832),alice),no),query(get(spanishCourse,V9489155),no)],[proved_by(alice)@elearn],alice,drivingLicense(alice)@caState)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V9489155),[query(policy3(request(V27832),alice),no),query(get(spanishCourse,V9489155),no)],[proved_by(alice)@elearn],alice,drivingLicense(alice)@caState)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V9489155)| - Subgoals: |[query(policy3(request(V27832),alice),no),query(get(spanishCourse,V9489155),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |23| - originalGoal: |request(spanishCourse,V9489155)| - Goal: |request(spanishCourse,V9489155)| Subgoals: |[query(policy3(request(V27832),alice),no),query(get(spanishCourse,V9489155),no)]| - Proof: |[r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn]| LastExpandedGoal: |drivingLicense(alice)@caState|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request drivingLicense(alice)@caState to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@1e1a408 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query drivingLicense(alice)@caState from elearn to alice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V15138573)| - Subgoals: |[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V15138573),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V15138573) - [query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V15138573),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V15138573),[query(student(alice)@hanoverUniversity@alice,no),query(get(spanishCourse,V15138573),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V14065758),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V14065758),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V14065758),[query(@(@(student(alice),hanoverUniversity),alice),no),query(get(spanishCourse,V14065758),no)],[],alice),Return)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V12546448),[query(get(spanishCourse,V12546448),no)],[@(proved_by(alice),elearn)],alice,@(student(alice),hanoverUniversity))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V12546448),[query(get(spanishCourse,V12546448),no)],[proved_by(alice)@elearn],alice,student(alice)@hanoverUniversity)]
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V12546448),[query(get(spanishCourse,V12546448),no)],[proved_by(alice)@elearn],alice,student(alice)@hanoverUniversity)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V12546448)| - Subgoals: |[query(get(spanishCourse,V12546448),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V4898828)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V4898828)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |24| - originalGoal: |request(spanishCourse,V12546448)| - Goal: |request(spanishCourse,V12546448)| Subgoals: |[query(get(spanishCourse,V12546448),no)]| - Proof: |[r(request(spanishCourse,V4898828)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V4898828)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@hanoverUniversity@alice],[])@elearn]| LastExpandedGoal: |student(alice)@hanoverUniversity|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |3| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,student(alice)@hanoverUniversity?]
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: drivingLicense(alice)@caState
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request student(alice)@hanoverUniversity to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@b8bef7 to alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNVizListener - New query received from elearn: drivingLicense(alice)@caState - 23 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query student(alice)@hanoverUniversity from elearn to alice
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V24306761)| - Subgoals: |[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V24306761),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V24306761) - [query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V24306761),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V24306761),[query(student(alice)@naplesUniversity@alice,no),query(get(spanishCourse,V24306761),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V12115695),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V12115695),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V12115695),[query(@(@(student(alice),naplesUniversity),alice),no),query(get(spanishCourse,V12115695),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V15674464),[query(get(spanishCourse,V15674464),no)],[@(proved_by(alice),elearn)],alice,@(student(alice),naplesUniversity))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V15674464),[query(get(spanishCourse,V15674464),no)],[proved_by(alice)@elearn],alice,student(alice)@naplesUniversity)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V15674464),[query(get(spanishCourse,V15674464),no)],[proved_by(alice)@elearn],alice,student(alice)@naplesUniversity)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V15674464)| - Subgoals: |[query(get(spanishCourse,V15674464),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V4898828)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V4898828)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |25| - originalGoal: |request(spanishCourse,V15674464)| - Goal: |request(spanishCourse,V15674464)| Subgoals: |[query(get(spanishCourse,V15674464),no)]| - Proof: |[r(request(spanishCourse,V4898828)$alice,[policy2(request(spanishCourse),alice)],[get(spanishCourse,V4898828)])@elearn,r(policy2(request(spanishCourse),alice),[student(alice)@naplesUniversity@alice],[])@elearn]| LastExpandedGoal: |student(alice)@naplesUniversity|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,student(alice)@naplesUniversity?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request student(alice)@naplesUniversity to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@8e32e7 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query student(alice)@naplesUniversity from elearn to alice
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |drivingLicense(alice)@caState| - Subgoals: |[query(drivingLicense(alice)@caState,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: drivingLicense(alice)@caState - [query(drivingLicense(alice)@caState,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(drivingLicense(alice)@caState,[query(drivingLicense(alice)@caState,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(drivingLicense(alice),caState),[],[@(signed(r(@(drivingLicense(alice),caState),[],[]),caState,signature(caState)),alice)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |drivingLicense(alice)@caState| - Subgoals: |[]| - Proof: |[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]|
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |4| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree drivingLicense(alice)@caState answered
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |1243881497| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer drivingLicense(alice)@caState to elearn with proof [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:37000 from alice
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@19e215b to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |5| - originalGoal: |student(alice)@hanoverUniversity| - Goal: |student(alice)@hanoverUniversity| Subgoals: |[query(student(alice)@hanoverUniversity,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: student(alice)@hanoverUniversity
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNVizListener - New query received from elearn: student(alice)@hanoverUniversity - 24 - [request(spanishCourse,V24791433)?,student(alice)@hanoverUniversity?]
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?,student(alice)@hanoverUniversity?]
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventListener - New answer drivingLicense(alice)@caState from alice to elearn
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
INFO MetaInterpreterListener org.peertrust.event.PTEventListener - Request successful
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNVizListener - New answer received from alice: drivingLicense(alice)@caState - 23 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>]
INFO MetaInterpreterListener org.peertrust.event.PTEventListener - The answer is drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |23| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: drivingLicense(alice)@caState and old query: old(request(spanishCourse,V9489155),drivingLicense(alice)@caState,[query(policy3(request(V27832),alice),no),query(get(spanishCourse,V9489155),no)])
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,V12110054),[query(policy3(request(V26056784),alice),no),query(get(spanishCourse,V12110054),no)])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: drivingLicense(alice)@caState
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |26| - originalGoal: |request(spanishCourse,V12110054)| - Goal: |request(spanishCourse,V12110054)| Subgoals: |[query(policy3(request(V26056784),alice),no),query(get(spanishCourse,V12110054),no)]| - Proof: |[r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |student(alice)@hanoverUniversity| - Subgoals: |[query(student(alice)@hanoverUniversity,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: student(alice)@hanoverUniversity - [query(student(alice)@hanoverUniversity,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(student(alice)@hanoverUniversity,[query(student(alice)@hanoverUniversity,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(student(alice),hanoverUniversity),[query(@(student(alice),hanoverUniversity),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(student(alice),hanoverUniversity),[query(@(student(alice),hanoverUniversity),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V12110054)| - Subgoals: |[query(policy3(request(V26056784),alice),no),query(get(spanishCourse,V12110054),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V12110054) - [query(policy3(request(V26056784),alice),no),query(get(spanishCourse,V12110054),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V12110054),[query(policy3(request(V26056784),alice),no),query(get(spanishCourse,V12110054),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V2628939),[query(policy3(request(V26956311),alice),no),query(get(spanishCourse,V2628939),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V2628939),[query(policy3(request(V26956311),alice),no),query(get(spanishCourse,V2628939),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(student(alice),hanoverUniversity),[],[],hanoverUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(student(alice)@hanoverUniversity,[],[],hanoverUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(student(alice)@hanoverUniversity,[],[],hanoverUniversity,student(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: hanoverUniversity
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |student(alice)@hanoverUniversity| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'hanoverUniversity' in the entities table
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'hanoverUniversity' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query student(alice)
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: student(alice)@hanoverUniversity
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V25197736),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V25197736),no)],[@(r(policy3(request(V7866553),alice),[@(@(employee(alice),caStatePolice),alice)],[]),elearn)],nil,nil),tree(request(spanishCourse,V8706595),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V8706595),no)],[@(r(policy3(request(V867695),alice),[@(@(policeOfficer(alice),caStatePolice),alice)],[]),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V25197736),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V25197736),no)],[r(policy3(request(V7866553),alice),[employee(alice)@caStatePolice@alice],[])@elearn],nil,nil),tree(request(spanishCourse,V8706595),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V8706595),no)],[r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V25197736),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V25197736),no)],[r(policy3(request(V7866553),alice),[employee(alice)@caStatePolice@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V25197736)| - Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V25197736),no)]| - Proof: |[r(policy3(request(V7866553),alice),[employee(alice)@caStatePolice@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V8706595),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V8706595),no)],[r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V8706595)| - Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V8706595),no)]| - Proof: |[r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 2
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |27| - originalGoal: |request(spanishCourse,V25197736)| - Goal: |request(spanishCourse,V25197736)| Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V25197736),no)]| - Proof: |[r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy3(request(V7866553),alice),[employee(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |28| - originalGoal: |request(spanishCourse,V8706595)| - Goal: |request(spanishCourse,V8706595)| Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V8706595),no)]| - Proof: |[r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V25197736)| - Subgoals: |[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V25197736),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V25197736) - [query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V25197736),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V25197736),[query(employee(alice)@caStatePolice@alice,no),query(get(spanishCourse,V25197736),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V20727434),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V20727434),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V20727434),[query(@(@(employee(alice),caStatePolice),alice),no),query(get(spanishCourse,V20727434),no)],[],alice),Return)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |6| - originalGoal: |student(alice)@naplesUniversity| - Goal: |student(alice)@naplesUniversity| Subgoals: |[query(student(alice)@naplesUniversity,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V2929821),[query(get(spanishCourse,V2929821),no)],[@(proved_by(alice),elearn)],alice,@(employee(alice),caStatePolice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V2929821),[query(get(spanishCourse,V2929821),no)],[proved_by(alice)@elearn],alice,employee(alice)@caStatePolice)]
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: student(alice)@naplesUniversity
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V2929821),[query(get(spanishCourse,V2929821),no)],[proved_by(alice)@elearn],alice,employee(alice)@caStatePolice)
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNVizListener - New query received from elearn: student(alice)@naplesUniversity - 25 - [request(spanishCourse,V24791433)?,student(alice)@naplesUniversity?]
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?,student(alice)@naplesUniversity?]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V2929821)| - Subgoals: |[query(get(spanishCourse,V2929821),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V7866553),alice),[employee(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |29| - originalGoal: |request(spanishCourse,V2929821)| - Goal: |request(spanishCourse,V2929821)| Subgoals: |[query(get(spanishCourse,V2929821),no)]| - Proof: |[r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V7866553),alice),[employee(alice)@caStatePolice@alice],[])@elearn]| LastExpandedGoal: |employee(alice)@caStatePolice|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,employee(alice)@caStatePolice?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request employee(alice)@caStatePolice to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@105d88a to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query employee(alice)@caStatePolice from elearn to alice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V8706595)| - Subgoals: |[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V8706595),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V8706595) - [query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V8706595),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V8706595),[query(policeOfficer(alice)@caStatePolice@alice,no),query(get(spanishCourse,V8706595),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V13177628),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V13177628),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V13177628),[query(@(@(policeOfficer(alice),caStatePolice),alice),no),query(get(spanishCourse,V13177628),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,V13508999),[query(get(spanishCourse,V13508999),no)],[@(proved_by(alice),elearn)],alice,@(policeOfficer(alice),caStatePolice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,V13508999),[query(get(spanishCourse,V13508999),no)],[proved_by(alice)@elearn],alice,policeOfficer(alice)@caStatePolice)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,V13508999),[query(get(spanishCourse,V13508999),no)],[proved_by(alice)@elearn],alice,policeOfficer(alice)@caStatePolice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: alice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,V13508999)| - Subgoals: |[query(get(spanishCourse,V13508999),no)]| - Proof: |[proved_by(alice)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'alice' in the entities table
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == alice
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |30| - originalGoal: |request(spanishCourse,V13508999)| - Goal: |request(spanishCourse,V13508999)| Subgoals: |[query(get(spanishCourse,V13508999),no)]| - Proof: |[r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn]| LastExpandedGoal: |policeOfficer(alice)@caStatePolice|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Initial requester: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegated to: alice
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Trace is:[request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending request policeOfficer(alice)@caStatePolice to alice from elearn
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send query to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Query@fb56b1 to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New query policeOfficer(alice)@caStatePolice from elearn to alice
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: student(alice)@naplesUniversity
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |student(alice)@naplesUniversity| - Subgoals: |[query(student(alice)@naplesUniversity,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: student(alice)@naplesUniversity - [query(student(alice)@naplesUniversity,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(student(alice)@naplesUniversity,[query(student(alice)@naplesUniversity,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(student(alice),naplesUniversity),[query(@(student(alice),naplesUniversity),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(student(alice),naplesUniversity),[query(@(student(alice),naplesUniversity),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(student(alice),naplesUniversity),[],[],naplesUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(student(alice)@naplesUniversity,[],[],naplesUniversity,student(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(student(alice)@naplesUniversity,[],[],naplesUniversity,student(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: naplesUniversity
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |student(alice)@naplesUniversity| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'naplesUniversity' in the entities table
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'naplesUniversity' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query student(alice)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |employee(alice)@caStatePolice| - Goal: |employee(alice)@caStatePolice| Subgoals: |[query(employee(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: employee(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNVizListener - New query received from elearn: employee(alice)@caStatePolice - 29 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,employee(alice)@caStatePolice?]
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,employee(alice)@caStatePolice?]
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: employee(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |employee(alice)@caStatePolice| - Subgoals: |[query(employee(alice)@caStatePolice,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: employee(alice)@caStatePolice - [query(employee(alice)@caStatePolice,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(employee(alice)@caStatePolice,[query(employee(alice)@caStatePolice,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(employee(alice),caStatePolice),[query(@(employee(alice),caStatePolice),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(employee(alice),caStatePolice),[query(@(employee(alice),caStatePolice),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(employee(alice),caStatePolice),[],[],caStatePolice,employee(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(employee(alice)@caStatePolice,[],[],caStatePolice,employee(alice))]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(employee(alice)@caStatePolice,[],[],caStatePolice,employee(alice))
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: caStatePolice
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |employee(alice)@caStatePolice| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Searching for delegator 'caStatePolice' in the entities table
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator 'caStatePolice' is unknown
WARN MetaInterpreter org.peertrust.meta.MetaInterpreter - Ignoring query employee(alice)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.QueryEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |8| - originalGoal: |policeOfficer(alice)@caStatePolice| - Goal: |policeOfficer(alice)@caStatePolice| Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreter - New query received from elearn: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNVizListener - New query received from elearn: policeOfficer(alice)@caStatePolice - 30 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?]
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNTreeDiagramm - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?]
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New query received from elearn: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |policeOfficer(alice)@caStatePolice| - Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| Requester: |elearn|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: policeOfficer(alice)@caStatePolice - [query(policeOfficer(alice)@caStatePolice,no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(policeOfficer(alice)@caStatePolice,[query(policeOfficer(alice)@caStatePolice,no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(policeOfficer(alice),caStatePolice),[query(@(policeOfficer(alice),caStatePolice),no)],[],elearn)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(policeOfficer(alice),caStatePolice),[query(@(policeOfficer(alice),caStatePolice),no)],[],elearn),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(policeOfficer(alice),caStatePolice),[],[@(signed(r(@(policeOfficer(alice),caStatePolice),[],[]),caStatePolice,signature(caStatePolice)),alice)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(policeOfficer(alice)@caStatePolice,[],[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(policeOfficer(alice)@caStatePolice,[],[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |policeOfficer(alice)@caStatePolice| - Subgoals: |[]| - Proof: |[signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |9| - originalGoal: |policeOfficer(alice)@caStatePolice| - Goal: |policeOfficer(alice)@caStatePolice| Subgoals: |[query(policeOfficer(alice)@caStatePolice,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree policeOfficer(alice)@caStatePolice answered
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |1243881497| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer policeOfficer(alice)@caStatePolice to elearn with proof [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:37000 from alice
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@b23d12 to elearn
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from alice
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventListener - New answer policeOfficer(alice)@caStatePolice from alice to elearn
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
INFO MetaInterpreterListener org.peertrust.event.PTEventListener - Request successful
INFO MetaInterpreterListener org.peertrust.event.PTEventListener - The answer is policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNVizListener - New answer received from alice: policeOfficer(alice)@caStatePolice - 30 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?,<policeOfficer(alice)@caStatePolice>]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |30| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: policeOfficer(alice)@caStatePolice and old query: old(request(spanishCourse,V13508999),policeOfficer(alice)@caStatePolice,[query(get(spanishCourse,V13508999),no)])
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,V10351444),[query(get(spanishCourse,V10351444),no)])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: policeOfficer(alice)@caStatePolice
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |31| - originalGoal: |request(spanishCourse,V10351444)| - Goal: |request(spanishCourse,V10351444)| Subgoals: |[query(get(spanishCourse,V10351444),no)]| - Proof: |[r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn]
DEBUG MetaInterpreter org.peertrust.inference.LogicQuery - Created: Query: |request(spanishCourse,V10351444)| - Subgoals: |[query(get(spanishCourse,V10351444),no)]| Requester: |alice|
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Process logic query: request(spanishCourse,V10351444) - [query(get(spanishCourse,V10351444),no)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Query: tree(request(spanishCourse,V10351444),[query(get(spanishCourse,V10351444),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Minerva Query: tree(request(spanishCourse,V30549415),[query(get(spanishCourse,V30549415),no)],[],alice)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(request(spanishCourse,V30549415),[query(get(spanishCourse,V30549415),no)],[],alice),Return)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(request(spanishCourse,session1),[],[@(r(get(spanishCourse,session1),hidden,hidden),elearn)],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(spanishCourse,session1),[],[r(get(spanishCourse,session1),hidden,hidden)@elearn],nil,nil)]
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Current tree string: tree(request(spanishCourse,session1),[],[r(get(spanishCourse,session1),hidden,hidden)@elearn],nil,nil)
DEBUG MetaInterpreter org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter org.peertrust.inference.LogicAnswer - Created: Goal: |request(spanishCourse,session1)| - Subgoals: |[]| - Proof: |[r(get(spanishCourse,session1),hidden,hidden)@elearn]|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |32| - originalGoal: |request(spanishCourse,V10351444)| - Goal: |request(spanishCourse,V10351444)| Subgoals: |[query(get(spanishCourse,V10351444),no)]| - Proof: |[r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: [r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Tree request(spanishCourse,session1) answered
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |1512420905| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer request(spanishCourse,session1) to alice with proof [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice,r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to localhost:32000 from elearn
DEBUG MetaInterpreter org.peertrust.net.socket.SimpleClientSocket - Send() org.peertrust.net.Answer@ef137d to alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Socket connection received
DEBUG MetaInterpreter org.peertrust.event.PTEventListener - New answer request(spanishCourse,session1) from elearn to alice
INFO MetaInterpreter org.peertrust.event.PTEventListener - Request successful
INFO MetaInterpreter org.peertrust.event.PTEventListener - The answer is request(spanishCourse,session1)
DEBUG MetaInterpreterListener org.peertrust.net.socket.SimpleServerSocket - Message received from elearn
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener org.peertrust.tnviz.app.TNVizListener - New answer received from elearn: request(spanishCourse,session1) - 2 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?,<policeOfficer(alice)@caStatePolice>,<request(spanishCourse,session1)>]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unify new query: request(spanishCourse,session1) and old query: old(request(spanishCourse,V24791433)@elearn,request(spanishCourse,V24791433),[])
DEBUG MetaInterpreterListener org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(spanishCourse,session1)@elearn,[])
DEBUG MetaInterpreterListener org.peertrust.meta.MetaInterpreterListener - New answer received: request(spanishCourse,session1)
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Created: Id: |10| - originalGoal: |request(spanishCourse,session1)@elearn| - Goal: |request(spanishCourse,session1)@elearn| Subgoals: |[]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice,r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreterListener org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter org.peertrust.meta.Tree - Created: Id: |1243881497| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Sending answer request(spanishCourse,session1)@elearn to client with proof [r(request(spanishCourse,V12430225)$alice,[policy1(request(spanishCourse),alice)],[get(spanishCourse,V12430225)])@elearn,r(policy1(request(spanishCourse),alice),[drivingLicense(alice)@caState@alice,policy3(request(V32233307),alice)],[])@elearn,proved_by(alice)@elearn,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V867695),alice),[policeOfficer(alice)@caStatePolice@alice],[])@elearn,proved_by(alice)@elearn,signed(r(policeOfficer(alice)@caStatePolice,[],[]),caStatePolice,signature(caStatePolice))@alice,r(get(spanishCourse,session1),hidden,hidden)@elearn]
DEBUG MetaInterpreter org.peertrust.meta.MetaInterpreter - Send answer to null:-1 from alice
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Distributing event org.peertrust.event.AnswerEvent from org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - No listeners registered to catch event org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - 1 elements registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event org.peertrust.event.PTEvent
DEBUG MetaInterpreter org.peertrust.tnviz.app.TNVizListener - New answer received from alice: request(spanishCourse,session1)@elearn - 1 - [request(spanishCourse,V24791433)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,policeOfficer(alice)@caStatePolice?,<policeOfficer(alice)@caStatePolice>,<request(spanishCourse,session1)>,<request(spanishCourse,session1)@elearn>]
DEBUG main org.peertrust.meta.MetaInterpreterListener - Stopping
DEBUG Thread-1 org.peertrust.meta.MetaInterpreterListener - Stopping
DEBUG Thread-1 org.peertrust.meta.MetaInterpreterListener - Stopping
DEBUG main g4mfs.impl.org.peertrust.net.EntitiesTable - $Id: EntitiesTable.java,v 1.3 2005/05/22 17:56:44 dolmedilla Exp $
DEBUG main g4mfs.impl.org.peertrust.net.EntitiesTable - (Init) Entities file: /home/ionut/PeertrustFiles/demoClient/entities.dat1
DEBUG main g4mfs.impl.org.peertrust.event.PTEventDispatcher - $Id: PTEventDispatcher.java,v 1.5 2005/05/22 17:56:46 dolmedilla Exp $
DEBUG main g4mfs.impl.org.peertrust.inference.MinervaProlog - $Id: MinervaProlog.java,v 1.8 2005/05/22 17:56:47 dolmedilla Exp $
DEBUG main g4mfs.impl.org.peertrust.inference.MinervaProlog - (Init) PrologFiles = demoPolicies.alice1 - RdfFiles = null - _baseFolder = /home/ionut/PeertrustFiles/demoClient/ - License = minervagui.mca
DEBUG main g4mfs.impl.org.peertrust.inference.MinervaProlog - Engine initialized
DEBUG main g4mfs.impl.org.peertrust.inference.MinervaProlog - Inserting debug_on in the KB
DEBUG main g4mfs.impl.org.peertrust.inference.MinervaProlog - Program loaded
DEBUG main g4mfs.impl.org.peertrust.inference.MinervaProlog - Loading file /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice1 into the inference engine
DEBUG main g4mfs.impl.org.peertrust.inference.MinervaProlog - File /home/ionut/PeertrustFiles/demoClient/demoPolicies.alice1 loaded
DEBUG main g4mfs.impl.org.peertrust.meta.MetaInterpreterListener - $Id: MetaInterpreterListener.java,v 1.12 2005/05/22 17:56:49 dolmedilla Exp $
DEBUG main g4mfs.impl.org.peertrust.meta.MetaInterpreter - $Id: MetaInterpreter.java,v 1.17 2005/05/22 17:56:49 dolmedilla Exp $
INFO main g4mfs.impl.org.peertrust.meta.MetaInterpreter - PeerName = alice
DEBUG main g4mfs.impl.org.peertrust.meta.MetaInterpreter - (Init) PeerName = alice
DEBUG main g4mfs.impl.org.peertrust.inference.MinervaProlog - Inserting peerName(alice) in the KB
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.MetaInterpreterListener - start
INFO MetaInterpreterListener g4mfs.impl.org.peertrust.meta.MetaInterpreterListener - System ready
DEBUG main g4mfs.impl.org.peertrust.meta.MetaInterpreter - Local Peer: alias = alice - host = http://www.globus.org/gt4ide/example/MathServiceTrustNegotiation - port = 0
DEBUG main g4mfs.impl.org.peertrust.event.PTEventDispatcher - .registering g4mfs.impl.org.peertrust.meta.MetaInterpreter to event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - start
DEBUG main g4mfs.impl.org.peertrust.event.PTEventDispatcher - .registering g4mfs.impl.org.peertrust.tnviz.app.TNVizListener to event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG main g4mfs.impl.org.peertrust.PTEngine - $Id: PTEngine.java,v 1.4 2005/05/22 17:56:45 dolmedilla Exp $
DEBUG main g4mfs.impl.org.peertrust.event.PTEventDispatcher - Distributing event g4mfs.impl.org.peertrust.event.QueryEvent from g4mfs.impl.org.peertrust.TrustClient
DEBUG main g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG main g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG main g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: []
DEBUG main g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |1| - originalGoal: |request(add,Session) @ hpclinuxcluster| - Goal: |request(add,Session) @ hpclinuxcluster| Subgoals: |[query(request(add,Session) @ hpclinuxcluster,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG main g4mfs.impl.org.peertrust.meta.MetaInterpreter - New query received from client: request(add,Session) @ hpclinuxcluster
DEBUG main g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG main g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG main g4mfs.impl.org.peertrust.tnviz.app.TNVizListener - New query received from client: request(add,Session) @ hpclinuxcluster - 1 - []
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicQuery - Created: Query: |request(add,Session) @ hpclinuxcluster| - Subgoals: |[query(request(add,Session) @ hpclinuxcluster,no)]| Requester: |client|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Process logic query: request(add,Session) @ hpclinuxcluster - [query(request(add,Session) @ hpclinuxcluster,no)]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Query: tree(request(add,Session) @ hpclinuxcluster,[query(request(add,Session) @ hpclinuxcluster,no)],[],client)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(request(add,V23803180),hpclinuxcluster),[query(@(request(add,V23803180),hpclinuxcluster),no)],[],client)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(request(add,V23803180),hpclinuxcluster),[query(@(request(add,V23803180),hpclinuxcluster),no)],[],client),Return)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(request(add,V20336357),hpclinuxcluster),[],[],hpclinuxcluster,request(add,V20336357))]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Parsed results: [tree(request(add,V20336357)@hpclinuxcluster,[],[],hpclinuxcluster,request(add,V20336357))]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Current tree string: tree(request(add,V20336357)@hpclinuxcluster,[],[],hpclinuxcluster,request(add,V20336357))
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Delegator: hpclinuxcluster
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicAnswer - Created: Goal: |request(add,V20336357)@hpclinuxcluster| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Searching for delegator 'hpclinuxcluster' in the entities table
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Delegator == hpclinuxcluster
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |request(add,V20336357)@hpclinuxcluster| - Goal: |request(add,V20336357)@hpclinuxcluster| Subgoals: |[]| - Proof: |[]| LastExpandedGoal: |request(add,V20336357)|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Initial requester: client
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Delegated to: hpclinuxcluster
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Trace is:[request(add,V20336357)?]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Sending request request(add,V20336357) to hpclinuxcluster from alice
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Send query to https://127.0.0.1:8443/wsrf/services/ionut/services/MathService:0 from alice
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - Distributing event g4mfs.impl.org.peertrust.event.QueryEvent from g4mfs.impl.org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.tnviz.app.TNVizListener - New query received from alice: request(add,V20336357) - 2 - [request(add,V20336357)?]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.tnviz.app.TNTreeDiagramm - [request(add,V20336357)?]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.tnviz.app.TNTreeDiagramm - [request(add,V20336357)?]length 1
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Distributing event g4mfs.impl.org.peertrust.event.QueryEvent from g4mfs.impl.org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |3| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.MetaInterpreter - New query received from hpclinuxcluster: drivingLicense(alice)@caState
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.tnviz.app.TNVizListener - New query received from hpclinuxcluster: drivingLicense(alice)@caState - 25 - [request(add,V20336357)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.tnviz.app.TNTreeDiagramm - [request(add,V20336357)?,drivingLicense(alice)@caState?]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicQuery - Created: Query: |drivingLicense(alice)@caState| - Subgoals: |[query(drivingLicense(alice)@caState,no)]| Requester: |hpclinuxcluster|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Process logic query: drivingLicense(alice)@caState - [query(drivingLicense(alice)@caState,no)]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Query: tree(drivingLicense(alice)@caState,[query(drivingLicense(alice)@caState,no)],[],hpclinuxcluster)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],hpclinuxcluster)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(drivingLicense(alice),caState),[query(@(drivingLicense(alice),caState),no)],[],hpclinuxcluster),Return)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(drivingLicense(alice),caState),[],[@(signed(r(@(drivingLicense(alice),caState),[],[]),caState,signature(caState)),alice)],nil,nil)]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Parsed results: [tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Current tree string: tree(drivingLicense(alice)@caState,[],[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice],nil,nil)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicAnswer - Created: Goal: |drivingLicense(alice)@caState| - Subgoals: |[]| - Proof: |[signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - subqueries == []
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |4| - originalGoal: |drivingLicense(alice)@caState| - Goal: |drivingLicense(alice)@caState| Subgoals: |[query(drivingLicense(alice)@caState,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Tree drivingLicense(alice)@caState answered
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |-418896499| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Sending answer drivingLicense(alice)@caState to hpclinuxcluster with proof [signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Send answer to https://127.0.0.1:8443/wsrf/services/ionut/services/MathService:0 from alice
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - Distributing event g4mfs.impl.org.peertrust.event.AnswerEvent from g4mfs.impl.org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - No listeners registered to catch event g4mfs.impl.org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.tnviz.app.TNVizListener - New answer received from alice: drivingLicense(alice)@caState - 25 - [request(add,V20336357)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Distributing event g4mfs.impl.org.peertrust.event.QueryEvent from g4mfs.impl.org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |5| - originalGoal: |student(alice)@naplesUniversity| - Goal: |student(alice)@naplesUniversity| Subgoals: |[query(student(alice)@naplesUniversity,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.MetaInterpreter - New query received from hpclinuxcluster: student(alice)@naplesUniversity
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.tnviz.app.TNVizListener - New query received from hpclinuxcluster: student(alice)@naplesUniversity - 27 - [request(add,V20336357)?,student(alice)@naplesUniversity?]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.tnviz.app.TNTreeDiagramm - [request(add,V20336357)?,student(alice)@naplesUniversity?]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicQuery - Created: Query: |student(alice)@naplesUniversity| - Subgoals: |[query(student(alice)@naplesUniversity,no)]| Requester: |hpclinuxcluster|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Process logic query: student(alice)@naplesUniversity - [query(student(alice)@naplesUniversity,no)]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Query: tree(student(alice)@naplesUniversity,[query(student(alice)@naplesUniversity,no)],[],hpclinuxcluster)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(student(alice),naplesUniversity),[query(@(student(alice),naplesUniversity),no)],[],hpclinuxcluster)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(student(alice),naplesUniversity),[query(@(student(alice),naplesUniversity),no)],[],hpclinuxcluster),Return)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(student(alice),naplesUniversity),[],[],naplesUniversity,student(alice))]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Parsed results: [tree(student(alice)@naplesUniversity,[],[],naplesUniversity,student(alice))]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Current tree string: tree(student(alice)@naplesUniversity,[],[],naplesUniversity,student(alice))
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Delegator: naplesUniversity
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicAnswer - Created: Goal: |student(alice)@naplesUniversity| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Searching for delegator 'naplesUniversity' in the entities table
WARN MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Delegator 'naplesUniversity' is unknown
WARN MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Ignoring query student(alice)
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Distributing event g4mfs.impl.org.peertrust.event.QueryEvent from g4mfs.impl.org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |6| - originalGoal: |student(alice)@hanoverUniversity| - Goal: |student(alice)@hanoverUniversity| Subgoals: |[query(student(alice)@hanoverUniversity,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.MetaInterpreter - New query received from hpclinuxcluster: student(alice)@hanoverUniversity
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.tnviz.app.TNVizListener - New query received from hpclinuxcluster: student(alice)@hanoverUniversity - 26 - [request(add,V20336357)?,student(alice)@hanoverUniversity?]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.tnviz.app.TNTreeDiagramm - [request(add,V20336357)?,student(alice)@hanoverUniversity?]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicQuery - Created: Query: |student(alice)@hanoverUniversity| - Subgoals: |[query(student(alice)@hanoverUniversity,no)]| Requester: |hpclinuxcluster|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Process logic query: student(alice)@hanoverUniversity - [query(student(alice)@hanoverUniversity,no)]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Query: tree(student(alice)@hanoverUniversity,[query(student(alice)@hanoverUniversity,no)],[],hpclinuxcluster)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(student(alice),hanoverUniversity),[query(@(student(alice),hanoverUniversity),no)],[],hpclinuxcluster)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(student(alice),hanoverUniversity),[query(@(student(alice),hanoverUniversity),no)],[],hpclinuxcluster),Return)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(student(alice),hanoverUniversity),[],[],hanoverUniversity,student(alice))]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Parsed results: [tree(student(alice)@hanoverUniversity,[],[],hanoverUniversity,student(alice))]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Current tree string: tree(student(alice)@hanoverUniversity,[],[],hanoverUniversity,student(alice))
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Delegator: hanoverUniversity
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicAnswer - Created: Goal: |student(alice)@hanoverUniversity| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Searching for delegator 'hanoverUniversity' in the entities table
WARN MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Delegator 'hanoverUniversity' is unknown
WARN MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Ignoring query student(alice)
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Distributing event g4mfs.impl.org.peertrust.event.QueryEvent from g4mfs.impl.org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |7| - originalGoal: |manager(alice)@ibm| - Goal: |manager(alice)@ibm| Subgoals: |[query(manager(alice)@ibm,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.MetaInterpreter - New query received from hpclinuxcluster: manager(alice)@ibm
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.tnviz.app.TNVizListener - New query received from hpclinuxcluster: manager(alice)@ibm - 32 - [request(add,V20336357)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,manager(alice)@ibm?]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.tnviz.app.TNTreeDiagramm - [request(add,V20336357)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,manager(alice)@ibm?]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicQuery - Created: Query: |manager(alice)@ibm| - Subgoals: |[query(manager(alice)@ibm,no)]| Requester: |hpclinuxcluster|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Process logic query: manager(alice)@ibm - [query(manager(alice)@ibm,no)]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Query: tree(manager(alice)@ibm,[query(manager(alice)@ibm,no)],[],hpclinuxcluster)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(manager(alice),ibm),[query(@(manager(alice),ibm),no)],[],hpclinuxcluster)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(manager(alice),ibm),[query(@(manager(alice),ibm),no)],[],hpclinuxcluster),Return)
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Distributing event g4mfs.impl.org.peertrust.event.QueryEvent from g4mfs.impl.org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(manager(alice),ibm),[query(@(@(bbbMember(hpclinuxcluster),bbb),hpclinuxcluster),no)],[@(signed(r(@(manager(alice),ibm),[],[]),ibm,signature(ibm)),alice),@(policy(@(manager(alice),ibm),[@(@(bbbMember(hpclinuxcluster),bbb),hpclinuxcluster)]),alice)],nil,nil)]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Parsed results: [tree(manager(alice)@ibm,[query(bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster,no)],[signed(r(manager(alice)@ibm,[],[]),ibm,signature(ibm))@alice,policy(manager(alice)@ibm,[bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster])@alice],nil,nil)]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Current tree string: tree(manager(alice)@ibm,[query(bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster,no)],[signed(r(manager(alice)@ibm,[],[]),ibm,signature(ibm))@alice,policy(manager(alice)@ibm,[bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster])@alice],nil,nil)
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Delegator: nil
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicAnswer - Created: Goal: |manager(alice)@ibm| - Subgoals: |[query(bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster,no)]| - Proof: |[signed(r(manager(alice)@ibm,[],[]),ibm,signature(ibm))@alice,policy(manager(alice)@ibm,[bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster])@alice]|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Delegator == null
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |9| - originalGoal: |manager(alice)@ibm| - Goal: |manager(alice)@ibm| Subgoals: |[query(bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: [signed(r(manager(alice)@ibm,[],[]),ibm,signature(ibm))@alice,policy(manager(alice)@ibm,[bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster])@alice]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicQuery - Created: Query: |manager(alice)@ibm| - Subgoals: |[query(bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster,no)]| Requester: |hpclinuxcluster|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Process logic query: manager(alice)@ibm - [query(bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster,no)]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Query: tree(manager(alice)@ibm,[query(bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster,no)],[],hpclinuxcluster)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(manager(alice),ibm),[query(@(@(bbbMember(hpclinuxcluster),bbb),hpclinuxcluster),no)],[],hpclinuxcluster)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(manager(alice),ibm),[query(@(@(bbbMember(hpclinuxcluster),bbb),hpclinuxcluster),no)],[],hpclinuxcluster),Return)
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |8| - originalGoal: |employee(alice)@ibm| - Goal: |employee(alice)@ibm| Subgoals: |[query(employee(alice)@ibm,no)]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.MetaInterpreter - New query received from hpclinuxcluster: employee(alice)@ibm
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.tnviz.app.TNVizListener - New query received from hpclinuxcluster: employee(alice)@ibm - 31 - [request(add,V20336357)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,employee(alice)@ibm?]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.tnviz.app.TNTreeDiagramm - [request(add,V20336357)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,employee(alice)@ibm?]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(manager(alice),ibm),[],[@(proved_by(hpclinuxcluster),alice)],hpclinuxcluster,@(bbbMember(hpclinuxcluster),bbb))]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Parsed results: [tree(manager(alice)@ibm,[],[proved_by(hpclinuxcluster)@alice],hpclinuxcluster,bbbMember(hpclinuxcluster)@bbb)]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Current tree string: tree(manager(alice)@ibm,[],[proved_by(hpclinuxcluster)@alice],hpclinuxcluster,bbbMember(hpclinuxcluster)@bbb)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Delegator: hpclinuxcluster
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicAnswer - Created: Goal: |manager(alice)@ibm| - Subgoals: |[]| - Proof: |[proved_by(hpclinuxcluster)@alice]|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Searching for delegator 'hpclinuxcluster' in the entities table
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Delegator == hpclinuxcluster
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: [signed(r(manager(alice)@ibm,[],[]),ibm,signature(ibm))@alice,policy(manager(alice)@ibm,[bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster])@alice]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |10| - originalGoal: |manager(alice)@ibm| - Goal: |manager(alice)@ibm| Subgoals: |[]| - Proof: |[signed(r(manager(alice)@ibm,[],[]),ibm,signature(ibm))@alice,policy(manager(alice)@ibm,[bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster])@alice]| LastExpandedGoal: |bbbMember(hpclinuxcluster)@bbb|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: [proved_by(hpclinuxcluster)@alice]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Initial requester: hpclinuxcluster
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Delegated to: hpclinuxcluster
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Trace is:[request(add,V20336357)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,manager(alice)@ibm?,bbbMember(hpclinuxcluster)@bbb?]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Sending request bbbMember(hpclinuxcluster)@bbb to hpclinuxcluster from alice
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Send query to https://127.0.0.1:8443/wsrf/services/ionut/services/MathService:0 from alice
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - Distributing event g4mfs.impl.org.peertrust.event.QueryEvent from g4mfs.impl.org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.QueryEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.tnviz.app.TNVizListener - New query received from alice: bbbMember(hpclinuxcluster)@bbb - 10 - [request(add,V20336357)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,manager(alice)@ibm?,bbbMember(hpclinuxcluster)@bbb?]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.tnviz.app.TNTreeDiagramm - [request(add,V20336357)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,manager(alice)@ibm?,bbbMember(hpclinuxcluster)@bbb?]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicQuery - Created: Query: |employee(alice)@ibm| - Subgoals: |[query(employee(alice)@ibm,no)]| Requester: |hpclinuxcluster|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Process logic query: employee(alice)@ibm - [query(employee(alice)@ibm,no)]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Query: tree(employee(alice)@ibm,[query(employee(alice)@ibm,no)],[],hpclinuxcluster)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Minerva Query: tree(@(employee(alice),ibm),[query(@(employee(alice),ibm),no)],[],hpclinuxcluster)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Sending to the engine:processTree(tree(@(employee(alice),ibm),[query(@(employee(alice),ibm),no)],[],hpclinuxcluster),Return)
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Receiving from the engine:[tree(@(employee(alice),ibm),[],[],ibm,employee(alice))]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Parsed results: [tree(employee(alice)@ibm,[],[],ibm,employee(alice))]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Current tree string: tree(employee(alice)@ibm,[],[],ibm,employee(alice))
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.MinervaProlog - Delegator: ibm
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.inference.LogicAnswer - Created: Goal: |employee(alice)@ibm| - Subgoals: |[]| - Proof: |[]|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - results == 1
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Searching for delegator 'ibm' in the entities table
WARN MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Delegator 'ibm' is unknown
WARN MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Ignoring query employee(alice)
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Distributing event g4mfs.impl.org.peertrust.event.AnswerEvent from g4mfs.impl.org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - No listeners registered to catch event g4mfs.impl.org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.tnviz.app.TNVizListener - New answer received from hpclinuxcluster: bbbMember(hpclinuxcluster)@bbb - 10 - [request(add,V20336357)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,manager(alice)@ibm?,bbbMember(hpclinuxcluster)@bbb?,<bbbMember(hpclinuxcluster)@bbb>]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |10| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.inference.MinervaProlog - Unify new query: bbbMember(hpclinuxcluster)@bbb and old query: old(manager(alice)@ibm,bbbMember(hpclinuxcluster)@bbb,[])
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.inference.MinervaProlog - Unified parsed results: new(manager(alice)@ibm,[])
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.MetaInterpreterListener - New answer received: bbbMember(hpclinuxcluster)@bbb
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: [signed(r(manager(alice)@ibm,[],[]),ibm,signature(ibm))@alice,policy(manager(alice)@ibm,[bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster])@alice,proved_by(hpclinuxcluster)@alice]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |11| - originalGoal: |manager(alice)@ibm| - Goal: |manager(alice)@ibm| Subgoals: |[]| - Proof: |[signed(r(manager(alice)@ibm,[],[]),ibm,signature(ibm))@alice,policy(manager(alice)@ibm,[bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster])@alice,proved_by(hpclinuxcluster)@alice]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: [signed(r(bbbMember(hpclinuxcluster)@bbb,[],[]),bbb,signature(bbb))@hpclinuxcluster]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: [signed(r(manager(alice)@ibm,[],[]),ibm,signature(ibm))@alice,policy(manager(alice)@ibm,[bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster])@alice,proved_by(hpclinuxcluster)@alice]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |-418896499| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Sending answer manager(alice)@ibm to hpclinuxcluster with proof [signed(r(manager(alice)@ibm,[],[]),ibm,signature(ibm))@alice,policy(manager(alice)@ibm,[bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster])@alice,proved_by(hpclinuxcluster)@alice,signed(r(bbbMember(hpclinuxcluster)@bbb,[],[]),bbb,signature(bbb))@hpclinuxcluster]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Send answer to https://127.0.0.1:8443/wsrf/services/ionut/services/MathService:0 from alice
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - Distributing event g4mfs.impl.org.peertrust.event.AnswerEvent from g4mfs.impl.org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - No listeners registered to catch event g4mfs.impl.org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.tnviz.app.TNVizListener - New answer received from alice: manager(alice)@ibm - 32 - [request(add,V20336357)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,manager(alice)@ibm?,bbbMember(hpclinuxcluster)@bbb?,<bbbMember(hpclinuxcluster)@bbb>,<manager(alice)@ibm>]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Distributing event g4mfs.impl.org.peertrust.event.AnswerEvent from g4mfs.impl.org.peertrust.meta.MetaInterpreterListener
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - No listeners registered to catch event g4mfs.impl.org.peertrust.event.AnswerEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.tnviz.app.TNVizListener - New answer received from hpclinuxcluster: request(add,session1) - 2 - [request(add,V20336357)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,manager(alice)@ibm?,bbbMember(hpclinuxcluster)@bbb?,<bbbMember(hpclinuxcluster)@bbb>,<manager(alice)@ibm>,<request(add,session1)>]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |2| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.inference.MinervaProlog - Unify new query: request(add,session1) and old query: old(request(add,V20336357)@hpclinuxcluster,request(add,V20336357),[])
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.inference.MinervaProlog - Unified parsed results: new(request(add,session1)@hpclinuxcluster,[])
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.MetaInterpreterListener - New answer received: request(add,session1)
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |12| - originalGoal: |request(add,session1)@hpclinuxcluster| - Goal: |request(add,session1)@hpclinuxcluster| Subgoals: |[]| - Proof: |[]| LastExpandedGoal: |null|
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: [r(request(add,V7345919)$alice,[policy1(request(add),alice)],[get(add,V7345919)])@hpclinuxcluster,r(policy1(request(add),alice),[drivingLicense(alice)@caState@alice,policy3(request(V29335124),alice)],[])@hpclinuxcluster,proved_by(alice)@hpclinuxcluster,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V28107769),alice),[manager(alice)@ibm@alice],[])@hpclinuxcluster,proved_by(alice)@hpclinuxcluster,signed(r(manager(alice)@ibm,[],[]),ibm,signature(ibm))@alice,policy(manager(alice)@ibm,[bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster])@alice,proved_by(hpclinuxcluster)@alice,signed(r(bbbMember(hpclinuxcluster)@bbb,[],[]),bbb,signature(bbb))@hpclinuxcluster,r(get(add,session1),hidden,hidden)@hpclinuxcluster]
DEBUG MetaInterpreterListener g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: []
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Parsing proof: null
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.Tree - Created: Id: |-418896499| - originalGoal: |null| - Goal: |null| Subgoals: |null| - Proof: |null| LastExpandedGoal: |null|
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Sending answer request(add,session1)@hpclinuxcluster to client with proof [r(request(add,V7345919)$alice,[policy1(request(add),alice)],[get(add,V7345919)])@hpclinuxcluster,r(policy1(request(add),alice),[drivingLicense(alice)@caState@alice,policy3(request(V29335124),alice)],[])@hpclinuxcluster,proved_by(alice)@hpclinuxcluster,signed(r(drivingLicense(alice)@caState,[],[]),caState,signature(caState))@alice,r(policy3(request(V28107769),alice),[manager(alice)@ibm@alice],[])@hpclinuxcluster,proved_by(alice)@hpclinuxcluster,signed(r(manager(alice)@ibm,[],[]),ibm,signature(ibm))@alice,policy(manager(alice)@ibm,[bbbMember(hpclinuxcluster)@bbb@hpclinuxcluster])@alice,proved_by(hpclinuxcluster)@alice,signed(r(bbbMember(hpclinuxcluster)@bbb,[],[]),bbb,signature(bbb))@hpclinuxcluster,r(get(add,session1),hidden,hidden)@hpclinuxcluster]
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.meta.MetaInterpreter - Send answer to null:-1 from alice
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - Distributing event g4mfs.impl.org.peertrust.event.AnswerEvent from g4mfs.impl.org.peertrust.meta.MetaInterpreter
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - No listeners registered to catch event g4mfs.impl.org.peertrust.event.AnswerEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - 1 elements registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.event.PTEventDispatcher - Broadcasting event to listeners registered for the event g4mfs.impl.org.peertrust.event.PTEvent
DEBUG MetaInterpreter g4mfs.impl.org.peertrust.tnviz.app.TNVizListener - New answer received from alice: request(add,session1)@hpclinuxcluster - 1 - [request(add,V20336357)?,drivingLicense(alice)@caState?,<drivingLicense(alice)@caState>,manager(alice)@ibm?,bbbMember(hpclinuxcluster)@bbb?,<bbbMember(hpclinuxcluster)@bbb>,<manager(alice)@ibm>,<request(add,session1)>,<request(add,session1)@hpclinuxcluster>]
DEBUG Thread-2 g4mfs.impl.org.peertrust.meta.MetaInterpreterListener - Stopping
