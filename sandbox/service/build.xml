<?xml version="1.0" encoding="UTF-8"?>

<!-- ==========================================================================

                        * ====================== *
                        |  How to build Edutella |
                        * ====================== *

           Adaption from the FOP build.xml written by Stefano Mazzocchi
                by Giacomo Pati with some addition by Fotis Jannidis
           Adapted by Andreas Rueckert, Alejandro Ramirez, Andrew Smith
	        and Ingo Brunkhorst

Introduction
============

This project is a multi-staged effort to scope,
specify, architect and implement an RDF-based
metadata infrastructure for JXTA. 
The homepage of Edutella is http://edutella.jxta.org/, which is
hosted on Suns Free P2P Project JXTA site.

Installing the build tools
==========================

Building the latest versions of Edutella is automated
using Ant which is a little but very handy tool that 
uses a build file written in XML (this file) as building instructions.
 
For more information refer to "http://ant.apache.org/".

Additionally you have to make sure, that the "JAVA_HOME" environment
property should be set to match the JVM you want to use. That's it.

Building instructions
=====================

First, make sure your current working directory is where 
this very file is located. Then just type

	ant

or, if it doesn't work

	build

to create the settings for an environment to suit Ant.

After the above command you should see a help screen
describing the usage of the Ant facility if everything is set up properly.

Property Settings
=================

You may place a simple text file named ".ant.properties" in your home
directory using which you can change certain properties. 
For example, by adding a line to .ant.properties you can change
the compiler to be used:

build.compiler=jikes
(without a blank after "jikes"!).

This will force Ant to compile with jikes if you have it on your system.
The other alternatives for this setting are:

build.compiler=modern
to use the most up-to-date version available to you
which for Sun is currently javac from jdk1.3

or the default if no explicit setting is made anywhere;

build.compiler=classic
to use a compiler/Virtual Machine combination compatible with jdk1.2.

On machines using Windows the home directory is selected to be C:\
so the instructions in the build file will look there for .ant.properties.

The filename is necessary for commonality with UNIX/LINUX systems
but you will not be able to save or rename a file to this
form of name using the Windows GUI directly. 
At least two workarounds are possible
(i) use Notepad (NOT Wordpad) to create, edit, rename or save the file
(ii) go into a DOS window and use the DOS command Edit to create,
edit, rename or save the file.
After these operations the file will still be visible in the GUI.

Compilation instructions for Edutella
=====================================

If you want to compile Edutella, you need to have following:
- your compiler in your PATH
- JAVA_HOME correctly set to where Java2 is installed
- ANT_HOME correctly set to where ANT is installed
- the additional libraries (edutella-rdql-provider.jar) in lib and ../../lib

when these are right the command

     build compile

will do the job.
With this arrangement problems with the set size of environment
may arise for DOS command line windows,
but a setting of 4096b should be ample on the Memory page 
of the Property dialogue box.

If something went wrong, go to the FAQ section below.

Also, you'll note that reusing a single JVM instance for each task,
increases tremendously the performance of the whole build system,
compared to other tools (i.e. make or shell scripts) where a new JVM
is started for each task.

Build targets
=============
See the usage target.

=================================== FAQ =======================================

1) Why some of the classes present in the original jar are not built anymore?

The Edutella build system is very flexible:
if a module requires a package that
is not present in the classpath at build time, 
the module is skipped but
the built process is not stopped.

2) I see a lot of warnings starting like this:
        "Warning: file modified in the future:"
Sometimes ant gives out this warnings,
but the build is finished without any problems

3) "ant run" doesn't work, XML classes are not found, what's wrong?
Maybe you have hard-coded your ANT_HOME variable in the ant
start-script.  This way it doesn't find it's own XML-libs.
You need to set ANT_HOME in your shell.

=========================================================================== -->

<!-- ======================================================================
     'build.xml' for Edutella...
     $Id: build.xml,v 1.1 2004/08/07 12:51:55 magik Exp $
     ====================================================================== -->

<project name="edutella" default="jar" basedir=".">

  <!-- ====================================================================
       Global Definitions
       ==================================================================== -->
  <target name="init">

    <tstamp/>

    <property environment="user"/>
    <property name="project" value="edutella"/>
    <property name="mainclass" 
              value="net.jxta.edutella.peer.PeerServiceRegistry"/>
    <property name="src" value="${basedir}/src"/>
    <property name="lib" value="${basedir}/lib"/>
    <property name="build" value="${basedir}/build"/>
    <property name="classes" value="${build}/classes"/>
    <property name="dist" value="${build}/dist"/>
    <property name="doc" value="${build}/doc"/>
    <property name="bin" value="${build}/bin"/>
    <property name="release" value="1.0"/>

    <property name="html" value="${user.HOME}/public_html/javadoc/${name}"/>  

    <property name="Name" value="Edutella"/>
    <property name="name" value="edutella"/>

    <property name="version" value="${release}-${DSTAMP}"/>
    <property name="year" value="2004"/>

    <property file="${user.home}/.edutella.properties"/>
    <property file=".edutella.properties"/>

    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="off"/>
    <property name="verbose" value="off"/>

    <echo message="============= ${Name} ${version} [${year}] =============="/>

    <!-- Classpath for compiling base stuff, like EQM -->
    <path id="common.classpath">
      <fileset dir="${lib}">
        <include name="jena.jar"/>
        <include name="log4j.jar"/>
        <include name="commons-logging.jar"/>
        <include name="concurrent-1.3.0.jar"/>
        <include name="grappa.jar"/>
      </fileset>
    </path>

    <!-- Classpath for compiling the implementation and everything else -->
    <path id="build.classpath">
      <fileset dir="${lib}">
        <include name="jxta.jar"/>
        <include name="jxtasecurity.jar"/>
        <include name="antlr.jar"/>
        <include name="axis.jar"/>
      	<include name="jaxrpc.jar"/>
      	<include name="sqiservice.jar"/>
       	<include name="bouncyCastle.jar"/>
       	<include name="jdepend.jar"/>
       	<include name="jsse.jar"/>
       	<include name="minrt.jar"/>
      </fileset>
      <path refid="common.classpath"/>
    </path>
    
    <path id="minirun.classpath">
      <path refid="build.classpath"/>
      <fileset dir="${lib}">
        <include name="jxtaptls.jar"/>
        <include name="cryptix32.jar"/>
        <include name="cryptix-asn1.jar"/>
        <include name="xercesImpl.jar"/>
        <include name="xmlParserAPIs.jar"/>
        <include name="voc.jar"/>
        <include name="icu4j.jar"/>
      </fileset>
    </path>

    <!-- Classpath for compiling things that need all Edutella -->
    <path id="edutella.classpath">
      <path refid="build.classpath"/>
      <pathelement location="${dist}/${name}.jar"/>
    </path>

    <!-- Classpath for running the basic Edutella systems -->
    <path id="commonrun.classpath">
      <path refid="edutella.classpath"/>
      <fileset dir="${lib}">
        <include name="jxtaptls.jar"/>
        <include name="cryptix32.jar"/>
        <include name="cryptix-asn1.jar"/>
        <include name="xercesImpl.jar"/>
        <include name="xmlParserAPIs.jar"/>
        <include name="icu4j.jar"/>
        <include name="servlet.jar"/>
		<include name="bcprov-jdk14.jar"/>
        <include name="org.mortbay.jetty.jar"/>
        <include name="jakarta-oro-2.0.5.jar"/>
       	<include name="bouncyCastle.jar"/>
       	<include name="jdepend.jar"/>
       	<include name="jsse.jar"/>
       	<include name="minrt.jar"/>
      </fileset>
    </path>

    <path id="jdepend.classpath">
      <pathelement location="${lib}/jdepend.jar"/>
    </path>

    <path id="rdqlprovider.classpath">
      <path refid="commonrun.classpath"/>
      <fileset dir="${lib}">
        <include name="rql.jar"/>
      </fileset>
    </path>

    <path id="kaonprovider.classpath">
      <path refid="commonrun.classpath"/>
      <fileset dir="${lib}">
        <include name="rdfapi.jar"/>
      </fileset>
    </path>

  	<path id="sqi.classpath">
      <path refid="commonrun.classpath"/>
      <fileset dir="${lib}">
        <include name="axis.jar"/>
        <include name="commons-discovery.jar"/>
      	<include name="jaxrpc.jar"/>
      	<include name="saaj.jar"/>
      	<include name="sqiservice.jar"/>
      	<include name="wsdl4j.jar"/>
      </fileset>
    </path>
  	
	<path id="allrun.classpath">
      <path refid="rdqlprovider.classpath"/>
      <fileset dir="${lib}">
      </fileset>
	</path>

  </target>


  <!-- ====================================================================
       Prepare the environment
       ==================================================================== -->
  <target name="prepare" depends="init">
    <echo message="================= Preparing Environment ================="/>
    <mkdir dir="${build}"/>
  </target>

  <target name="preparecompile" depends="prepare">
    <echo message="=========== Preparing Compilation of Edutella ==========="/>
    <delete dir="${classes}"/>
    <mkdir dir="${classes}"/>
  </target>


  <!-- ====================================================================
       Create the eqm.jar-archive
  <target name="eqm" depends="preparecompile">
  <description>eqm:
        Compiles Edutella Query Model API.
  </description>
    <echo message="======== Compiling the Edutella Query Model API ========="/>
    <tstamp prefix="eqm"/>
    <property name="eqmdir" value="${build}/${eqm}"/>
    <delete file="${lib}/${eqm}.jar"/>
    <delete dir="${eqmdir}"/>
    <mkdir dir="${eqmdir}"/>
    <javac debug="on"
           destdir="${eqmdir}"
	   srcdir="${src}"
	   includes="net/jxta/edutella/eqm/**"
	   verbose="${verbose}"
	   deprecation="${deprecation}">
      <classpath refid="common.classpath"/>
    </javac>
    <jar basedir="${eqmdir}"
         jarfile="${lib}/${eqm}.jar">
    </jar>
  </target>
       ==================================================================== -->


  <!-- ====================================================================
       Compile Everything except provider peers
       ==================================================================== -->
  <target name="compile" depends="preparecompile">
  <description>
  compile:
        Compiles everything, except provider-backends, www and test.
  </description>
    <echo message="=============== Compiling basic Edutella ================"/>
    <javac debug="${debug}"
       destdir="${classes}"
	   includes="net/jxta/edutella/**"
	   verbose="${verbose}"
	   optimize="${optimize}"
	   deprecation="${deprecation}">
	   <exclude name="net/jxta/edutella/provider/conceptbase/**"/>
	   <exclude name="net/jxta/edutella/provider/datalog/**"/>
	   <exclude name="net/jxta/edutella/provider/dbxml/**"/>
	   <exclude name="net/jxta/edutella/provider/kaon/**"/>
	   <exclude name="net/jxta/edutella/provider/old/**"/>
	   <exclude name="net/jxta/edutella/provider/olr/**"/>
	   <exclude name="net/jxta/edutella/provider/rdql/**"/>
	   <exclude name="net/jxta/edutella/provider/rql/**"/>
	   <exclude name="net/jxta/edutella/provider/serql/**"/>
 	   <exclude name="net/jxta/edutella/sqi/**"/>
  	   <exclude name="net/jxta/edutella/service/publishsubscribe/**"/>
	   <exclude name="net/jxta/edutella/www/**"/>
	   <exclude name="net/jxta/edutella/sample/**"/>
	   <exclude name="test/**"/>
      <classpath refid="build.classpath"/>
      <src path="${src}"/>
    </javac>
  </target>

  <!-- ====================================================================
       Compile Everything except provider peers
       ==================================================================== -->
  <target name="compileall" depends="preparecompile">
  <description>
  compileall:
        Compiles everything.
  </description>
    <echo message="=============== Compiling basic Edutella ================"/>
    <mkdir dir="${classes}"/>
    <javac debug="${debug}"
       destdir="${classes}"
	   verbose="${verbose}"
	   optimize="${optimize}"
	   deprecation="${deprecation}">
      <classpath refid="allrun.classpath"/>
      <src path="${src}"/>
    </javac>
  </target>



  <!-- ====================================================================
       Compile the rdql-Provider
       ==================================================================== -->
  <target name="rdql" depends="jar">
  <description>
  rdql:
        Compiles RDQL provider classes and make jar from them.
  </description>
    <echo message="============== Compiling the RDQL Provider =============="/>
    <property name="rdql" value="${build}/rdql"/>
    <delete file="${lib}/${name}-provider-rdql.jar"/>
    <mkdir dir="${rdql}"/>
    <javac debug="${debug}"
           destdir="${rdql}"
	   verbose="${verbose}"
	   includes="net/jxta/edutella/provider/rdql/**"
	   optimize="${optimize}"
	   deprecation="${deprecation}">
      <classpath refid="rdqlprovider.classpath"/>
      <src path="${src}"/>
    </javac>
    <jar basedir="${rdql}"
         jarfile="${dist}/${name}-provider-rdql.jar">
    </jar>
    <copy file="${dist}/${name}-provider-rdql.jar"
          todir="${lib}"/>
    <delete dir="${rdql}"/>
  </target>

  <!-- ====================================================================
       Compile the kaon-Provider
       ==================================================================== -->
  <target name="kaon" depends="jar">
  <description>
  rdql:
        Compiles kaon provider classes and make jar from them.
  </description>
    <echo message="============== Compiling the kaon Provider =============="/>
    <property name="kaon" value="${build}/kaon"/>
    <delete file="${lib}/${name}-provider-kaon.jar"/>
    <mkdir dir="${kaon}"/>
    <javac debug="${debug}"
           destdir="${kaon}"
	   verbose="${verbose}"
	   includes="net/jxta/edutella/provider/kaon/**"
	   optimize="${optimize}"
	   deprecation="${deprecation}">
      <classpath refid="kaonprovider.classpath"/>
      <src path="${src}"/>
    </javac>
    <jar basedir="${kaon}"
         jarfile="${dist}/${name}-provider-kaon.jar">
    </jar>
    <copy file="${dist}/${name}-provider-kaon.jar"
          todir="${lib}"/>
    <delete dir="${kaon}"/>
  </target>


  <!-- ====================================================================
       Create the jar-archive
       ==================================================================== -->
  <target name="jar" depends="compile">
  <description>
  jar:
        Creates java archive (.jar) from all the basic classes.
  </description>
    <echo message="============== Creating basic Edutella .jar ============="/>
    <mkdir dir="${dist}"/>
    <jar basedir="${classes}"
         jarfile="${dist}/${name}.jar">
    </jar>
  </target>


  <!-- ====================================================================
       Create the distribution-archive
       ==================================================================== -->
  <target name="dist" depends="jar">
  <description>
  dist:
        Creates an Edutella distribution archive.
  </description>
    <echo message="======== Creating all ready to use distribution ========="/>
    <property name="temp" value="${dist}/tmp"/>
    <mkdir dir="${temp}"/>
    <copy todir="${temp}">
      <fileset dir="${lib}">
        <include name="jxta.jar"/>
        <include name="jxtasecurity.jar"/>
        <include name="jena.jar"/>
        <include name="log4j.jar"/>
        <include name="concurrent-1.3.0.jar"/>
        <include name="grappa.jar"/>
        <include name="jxtaptls.jar"/>
        <include name="minimalBC.jar"/>
        <include name="cryptix32.jar"/>
        <include name="cryptix-asn1.jar"/>
        <include name="xerces.jar"/>
        <include name="icu4j.jar"/>
        <include name="org.mortbay.jetty.jar"/>
      </fileset>
      <fileset dir="${lib}">
        <include name="${eqm}.jar"/>
      </fileset>
    </copy> 
    <jar basedir="${classes}"
         jarfile="${temp}/${name}.jar">
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
	<attribute name="Main-Class" value="${mainclass}"/>
	<attribute name="Class-Path" value="./edutella.jar ./jxta.jar
       ./jxtasecurity.jar ./jena.jar ./log4j.jar
       ./concurrent-1.3.0.jar ./grappa.jar ./jxtaptls.jar
       ./minimalBC.jar ./cryptix32.jar ./cryptix-asn1.jar ./xerces.jar
       ./icu4j.jar ./org.mortbay.jetty.jar ./eqm.jar"/>
      </manifest>
    </jar>

    <zip zipfile="${dist}/${name}-${version}.zip" basedir="${temp}"
       includes="${basedir}/README.txt">
       <zipfileset dir="${temp}">
         <include name="*.jar"/>
       </zipfileset>
    </zip>
    <tar tarfile="${dist}/${name}-${version}.tar" basedir="${temp}"
       includes="${basedir}/README.txt">
       <tarfileset dir="${temp}">
         <include name="*.jar"/>
       </tarfileset>
    </tar>
    <gzip zipfile="${dist}/${name}-${version}.tar.gz"
          src="${dist}/${name}-${version}.tar" />
    <delete file="${dist}/${name}-${version}.tar"/>
    <delete dir="${temp}"/>
  </target>

  <!-- ====================================================================
       Create JDepend information about code quality
       ==================================================================== -->
  <target name="jdepend" depends="init,compile">
    <echo>
CC - Concrete Class Count 
AC - Abstract Class (and Interface) Count 
Ca - Afferent Couplings (Ca) 
Ce - Efferent Couplings (Ce) 
A - Abstractness (0-1) 
I - Instability (0-1) 
D - Distance from the Main Sequence (0-1) 
Cyclic - If the package contains a dependency cycle 

For details see http://www.clarkware.com/software/JDepend.html.
    </echo>
    <java classname="jdepend.swingui.JDepend" 
          fork="true"
          failonerror="true">
      <arg value="${classes}"/> 
      <classpath refid="jdepend.classpath"/>
    </java>
  </target>

  <!-- ====================================================================
       Create the PeerDescription.java from the vocabulary at learninglab.de
       ==================================================================== -->
  <target name="vocabulary" depends="init">
  <description>
  vocabulary:
        Creates the PeerDescription.java from 
        PeerDescription RDF-Schema at learninglab.de.
  </description>
    <echo>
Creating the PeerDescription.java from the vocabulary stored at
"http://www.learninglab.de/~brunkhor/rdf/PeerDescription"
    </echo>
    <delete dir="${classes}"/>
    <mkdir dir="${classes}"/>
    <javac debug="${debug}"
           destdir="${classes}"
           verbose="${verbose}"
           includes="net/jxta/edutella/util/VocabularyGenerator.java"
           optimize="${optimize}"
           deprecation="${deprecation}">
      <classpath refid="build.classpath"/>
      <src path="${src}"/>
    </javac>

    <jar basedir="${classes}"
         jarfile="${lib}/voc.jar">
    </jar>

    <java classname="net.jxta.edutella.util.VocabularyGenerator" 
          fork="true"
          failonerror="true">
      <arg value="http://www.learninglab.de/~brunkhor/rdf/PeerDescription"/> 
      <classpath refid="minirun.classpath"/>
    </java>
    <copy file="PeerDescription.java" todir="${src}/net/jxta/edutella/vocabulary"/>
  </target>


  <!-- ====================================================================
       Display the configuration
       ==================================================================== -->
  <target name="showconfig" depends="jar">
    <java classname="net.jxta.edutella.util.ConfigViewer" 
          fork="true"
          failonerror="true">
      <arg value="file:MyPeer.xml"/>
      <classpath refid="commonrun.classpath"/>
    </java>
  </target>

  <!-- ====================================================================
       Start simple consumer application
       ==================================================================== -->
  <target name="consumerapplication" depends="init">
    <java classname="net.jxta.edutella.consumer.ConsumerApplication" 
          fork="true"
          failonerror="true">
      <arg value="file:MyPeer.xml"/>
      <classpath refid="commonrun.classpath"/>
    </java>
  </target>

  <!-- ====================================================================
       Display the configuration
       ==================================================================== -->
  <target name="new" depends="jar">
    <java classname="net.jxta.edutella.util.JxtaServiceGenerator"
          fork="true"
          failonerror="true">
      <classpath refid="commonrun.classpath"/>
    </java>
  </target>


  <!-- ====================================================================
       Help on usage
       ==================================================================== -->
  <target name="usage" depends="init">
  <description>
  usage:
        Shows usage information of this makefile.
  </description>
    <echo>
${Name} Build file
-------------------------------------------------------------

 available targets are:

   jar        --> creates ${Name} .jar in ${dist}
   dist       --> creates ${Name} .tar.gz and .zip in ${dist}
   javadoc    --> writes the javadoc documentation to ${doc}
   clean      --> cleans up the ${build} directory
   distclean  --> cleans up the distribution directory, ${dist}
   jdepend    --> obtain design quality metrics by applying JDepend
   rdql	      --> create edutella-provider-rdql.jar in ${dist}
   usage      --> show this message (default)
   ---------------------------------------------------------------
   provider   --> starts edutella rdql-provider based on ProviderPeer.xml
   consumer   --> starts edutella consumer based on ConsumerPeer.xml
   rendezvous --> starts edutella rendezvous based on RendezVousPeer.xml
   ---------------------------------------------------------------
   provider-local --> Uses Configuration MyProvider.xml
   rendezvous-local --> Uses Configuration MyRendezVous.xml
   consumer-local --> Uses Configuration MyConsumer.xml
   ---------------------------------------------------------------
   chainsaw   --> starts a local log4j gui

 See the comments inside the build.xml file for more details.
-------------------------------------------------------------
    </echo>
  </target>


  <!-- ====================================================================
       Clean the environment
       ==================================================================== -->
  <target name="clean" depends="init">
  <description>
  clean:
        Cleans the build directory
  </description>
    <delete dir="${build}"/>
  </target>

  <!-- ====================================================================
       Clean the complete environment
       ==================================================================== -->
  <target name="distclean" depends="clean, initstart">
  <description>
  distclean:
        Cleans the build, dist and testenv directory
  </description>
    <delete dir="${dist}"/>
    <delete dir="${testenv}"/>
  </target>


  <!-- ====================================================================
       Create local javadoc documentation
       ==================================================================== -->
  <target name="javadoc" depends="jar">
  <description>
  javadoc:
        Generates local javadoc documentation from
        Java source files and writes them to doc subdirectory.
  </description>
  <property name="docdir" value="${basedir}/doc/javadoc"/>
    <javadoc
      packagenames="net.jxta.edutella.*"
      classpathref="commonrun.classpath"
      defaultexcludes="yes"
      destdir="${docdir}"
      author="true"
      version="true"
      use="true"
      source="1.4"
      windowtitle="Edutella API"
      stylesheetfile="${basedir}/doc/stylesheet.css">
      <sourcepath path="${src}"/>
      <link href="http://www.learninglab.de/~brunkhor/javadoc/j2sdk1.4.2/"/>
      <link href="http://www.learninglab.de/~brunkhor/javadoc/jena/"/>
      <link href="http://www.learninglab.de/~brunkhor/javadoc/jxta-security/"/>
      <link href="http://www.learninglab.de/~brunkhor/javadoc/jxta-platform/"/>
      <link href="http://www.learninglab.de/~brunkhor/javadoc/grappa/"/>
      <link href="http://www.learninglab.de/~brunkhor/javadoc/concurrent/"/>
    </javadoc>
    <copy file="${basedir}/doc/inherit.gif"
          todir="${docdir}"/>
    <copy file="${basedir}/doc/license.txt"
          todir="${docdir}"/>
    <copy file="${basedir}/doc/README"
          todir="${docdir}"/>
  </target>

  <!-- ====================================================================
       Create public javadoc documentation
       ==================================================================== -->
  <target name="html" depends="jar">
  <description>
  html:
        Creates javadoc in unix-style users home public_html directory
  </description>
    <property name="webdir" value="${user.HOME}/public_html/javadoc/edutella"/>
    <echo>Build will go to ${webdir}
    </echo>
    <javadoc
      packagenames="net.jxta.edutella.*"
      classpathref="commonrun.classpath"
      defaultexcludes="yes"
      destdir="${webdir}"
      author="true"
      version="true"
      use="true"
      source="1.4"
      windowtitle="Edutella API"
      stylesheetfile="${basedir}/doc/stylesheet.css">
      <sourcepath path="${src}"/>
      <link href="http://www.learninglab.de/~brunkhor/javadoc/jena/"/>
      <link href="http://www.learninglab.de/~brunkhor/javadoc/j2sdk1.4.2/"/>
      <link href="http://www.learninglab.de/~brunkhor/javadoc/jxta-security/"/>
      <link href="http://www.learninglab.de/~brunkhor/javadoc/jxta-platform/"/>
      <link href="http://www.learninglab.de/~brunkhor/javadoc/grappa/"/>
      <link href="http://www.learninglab.de/~brunkhor/javadoc/concurrent/"/>
    </javadoc>
    <copy file="${basedir}/doc/license.txt"
          todir="${webdir}"/>
    <copy file="${basedir}/doc/inherit.gif"
          todir="${webdir}"/>
    <copy file="${basedir}/doc/README"
          todir="${webdir}"/>
  </target>



  <!-- ====================================================================
       ====================================================================
                                                  #####
                  #####     ##    #####    ##### #     #
                  #    #   #  #   #    #     #         #
                  #    #  #    #  #    #     #    #####
                  #####   ######  #####      #   #
                  #       #    #  #   #      #   #
                  #       #    #  #    #     #   #######
       ====================================================================
       ==================================================================== -->


  <!-- ====================================================================

       ==================================================================== -->
  <target name="initstart" depends="init">
    <property name="startclass" value="${mainclass}"/>
    <property name="testenv" value="${basedir}/testenv"/>
    <property name="baseurl" value="http://www.learninglab.de/~brunkhor/edutella/xml/"/>
    <property name="basehome" value="${testenv}"/>
	<property name="configdir" value="${basedir}/resources/config"/>
    <mkdir dir="${basedir}"/>
    <path id="startedutella.classpath">
      <path refid="commonrun.classpath"/>
    </path>
  </target>

  <!-- ====================================================================

       ==================================================================== -->
  <target name="defaultstart">
    <property name="tls.principal" value="edutella"/>
    <property name="tls.password" value="edutella"/>
  </target>

  <!-- ====================================================================

       ==================================================================== -->
  <target name="start" depends="defaultstart">
    <echo>Starting ${startclass} in ${startdir} with ${starturl}</echo>
    <mkdir dir="${startdir}"/>
    <java classname="${startclass}"
      classpathref="startedutella.classpath"
	  maxmemory="1024m"
	  dir="${startdir}"
	  fork="true">
	<arg value="${starturl}"/>
	<jvmarg value="-Xms8m"/>
	<jvmarg value="-Xmx1024m"/>
	<jvmarg value="-Xss128k"/>
	<jvmarg value="-Dnet.jxta.tls.principal=${tls.principal}"/>
	<jvmarg value="-Dnet.jxta.tls.password=${tls.password}"/>
	<!--<jvmarg value="-DproxySet=true"/>
        <jvmarg value="-DproxyHost=10.194.100.130"/>
        <jvmarg value="-DproxyPort=8080"/> -->
        <sysproperty key="JXTA_HOME" value="${jxtahome}"/>
    </java>
  </target>
	

  <!-- ====================================================================
		   	ComplexQuery-Superpeer
		   	
	as long as the ComplexQuery things are not integrated in a superpeer, 
	this is a "ComplexQueryServicePeer"
       ==================================================================== -->
  
  <target name="cqsp" depends="initstart">
  <description>
  cqsp:
        Starts a complex query (super) peer.
  </description>
    <property name="startdir" value="${testenv}/cqsp"/>
    <property name="starturl" value="file:${configdir}/ComplexQuerySuperPeer.xml"/>
    <property name="jxtahome" value="${basehome}/cqsp/.jxta/"/>
    <mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>




  <!-- ====================================================================

       ==================================================================== -->
  <target name="provider" depends="initstart">
  <description>
  provider:
        Starts a simple RDQL based provider peer.
  </description>
    <property name="startdir" value="${testenv}/provider"/>
    <property name="starturl" value="file:${configdir}/ProviderPeer.xml"/>
    <property name="jxtahome" value="${basehome}/provider/.jxta/"/>
    <path id="startedutella.classpath">
      <path refid="rdqlprovider.classpath"/>
      <pathelement location="${dist}/${name}-provider-rdql.jar"/>
    </path>
    <mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <copy file="${basehome}/demo_provider/se_exercises/se_exercises.rdf" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>



   <!-- ====================================================================
	just a second provider to speedup building of test-environments
       ==================================================================== -->
  <target name="provider2" depends="initstart">
    <property name="startdir" value="${testenv}/provider2"/>
    <property name="starturl" value="file:${configdir}/ProviderPeer2.xml"/>
    <property name="jxtahome" value="${basehome}/provider2/.jxta/"/>
    <path id="startedutella.classpath">
      <path refid="commonrun.classpath"/>
      <pathelement location="${dist}/${name}-provider-rdql.jar"/>
    </path>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>


  <!-- ====================================================================

       ==================================================================== -->
  <target name="consumer" depends="initstart">
  <description>
  consumer:
        Starts a simple swing-based consumer peer.
  </description>
    <property name="startdir" value="${testenv}/consumer"/>
    <property name="starturl" value="file:${configdir}/ConsumerPeer.xml"/>
    <property name="jxtahome" value="${basehome}/consumer/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>

  <!-- ====================================================================

       ==================================================================== -->
  <target name="rendezvous" depends="initstart">
  <description>
  rendezvous:
        Starts a jxta rendezvous peer.
  </description>
    <property name="startdir" value="${testenv}/rendezvous"/>
    <property name="starturl" value="file:${configdir}/RendezVousPeer.xml"/>
    <property name="jxtahome" value="${basehome}/rendezvous/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>


  <!-- ====================================================================

       ==================================================================== -->
  <target name="superpeer" depends="initstart">
    <property name="startdir" value="${testenv}/superpeer"/>
    <property name="starturl" value="file:${configdir}/SuperPeer.xml"/>
    <property name="jxtahome" value="${basehome}/superpeer/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>

  <!-- ====================================================================
  	Edutella Provider Proxy
       ==================================================================== -->
  <target name="providerproxy" depends="initstart">
  <description>
  providerproxy:
        Starts a provider proxy based on ProviderProxy.xml configuration file
        in the base directory.
  </description>
    <property name="startdir" value="${testenv}/providerproxy"/>
    <property name="starturl" value="file:${configdir}/ProviderProxy.xml"/>
    <property name="jxtahome" value="${basehome}/providerproxy/.jxta/"/>
    <path id="startedutella.classpath">
      <path refid="sqi.classpath"/>
    </path>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>
	
	
  <target name="publishsubscribesuperpeer" depends="initstart">
    <property name="startdir" value="${testenv}/publishsubscribesuperpeer"/>
    <property name="starturl" value="file:${configdir}/PublishSubscribeSuperPeer.xml"/>
    <property name="jxtahome" value="${basehome}/publishsubscribesuperpeer/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>

  <target name="publishsubscribesuperpeer2" depends="initstart">
    <property name="startdir" value="${testenv}/publishsubscribesuperpeer2"/>
    <property name="starturl" value="file:${configdir}/PublishSubscribeSuperPeer2.xml"/>
    <property name="jxtahome" value="${basehome}/publishsubscribesuperpeer2/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>

  <target name="publishsubscribesuperpeer3" depends="initstart">
    <property name="startdir" value="${testenv}/publishsubscribesuperpeer3"/>
    <property name="starturl" value="file:${configdir}/PublishSubscribeSuperPeer3.xml"/>
    <property name="jxtahome" value="${basehome}/publishsubscribesuperpeer3/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>  
 
 <target name="publishsubscribesuperpeer4" depends="initstart">
    <property name="startdir" value="${testenv}/publishsubscribesuperpeer4"/>
    <property name="starturl" value="file:${configdir}/PublishSubscribeSuperPeer4.xml"/>
    <property name="jxtahome" value="${basehome}/publishsubscribesuperpeer4/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>    
   	  
  <target name="publishsubscribepeer" depends="initstart">
    <property name="startdir" value="${testenv}/publishsubscribepeer"/>
    <property name="starturl" value="file:${configdir}/PublishSubscribePeer.xml"/>
    <property name="jxtahome" value="${basehome}/publishsubscribepeer/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>

  <target name="anothersuperpeer" depends="initstart">
    <property name="startdir" value="${testenv}/anotherSuperpeer"/>
    <property name="starturl" value="file:${configdir}/AnotherSuperPeer.xml"/>
    <property name="jxtahome" value="${basehome}/anotherSuperpeer/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>

  <target name="anothersuperpeer2" depends="initstart">
    <property name="startdir" value="${testenv}/anotherSuperpeer2"/>
    <property name="starturl" value="file:${configdir}/AnotherSuperPeer2.xml"/>
    <property name="jxtahome" value="${basehome}/anotherSuperpeer2/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>


  <target name="test" depends="initstart">
    <property name="startdir" value="/tmp/jxta-test"/>
    <property name="starturl" value="file:${configdir}/PeerGroupTest.xml"/>
    <property name="jxtahome" value="/tmp/jxta-test"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>





  <!-- ====================================================================
       ====================================================================
                                                   #####
                   #####     ##    #####    ##### #     #
                   #    #   #  #   #    #     #         #
                   #    #  #    #  #    #     #    #####
                   #####   ######  #####      #         #
                   #       #    #  #   #      #   #     #
                   #       #    #  #    #     #    #####
       ====================================================================
       ==================================================================== -->



  <!-- ====================================================================

       ==================================================================== -->
  <target name="mypeer" depends="initstart">
  <description>
  mypeer:
        Starts a peer based on the MyPeer.xml configuration file
        in the base directory.
  </description>
    <property name="startdir" value="${testenv}/mypeer"/>
    <property name="starturl" value="file:${basedir}/MyPeer.xml"/>
    <property name="jxtahome" value="${basehome}/mypeer/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <path id="startedutella.classpath">
      <path refid="commonrun.classpath"/>
      <pathelement location="${dist}/${name}-provider-rdql.jar"/>
    </path>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>

  <!-- ====================================================================

       ==================================================================== -->
  <target name="consumer-local" depends="initstart">
  <description>
  </description>
    <property name="startdir" value="${testenv}/consumer"/>
    <property name="starturl" value="file:${basedir}/MyConsumerPeer.xml"/>
    <property name="jxtahome" value="${basehome}/consumer/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>

  <!-- ====================================================================

       ==================================================================== -->
  <target name="rendezvous-local" depends="initstart">
  <description>
  </description>
    <property name="startdir" value="${testenv}/rendezvous"/>
    <property name="starturl" value="file:${basedir}/MyRendezVousPeer.xml"/>
    <property name="jxtahome" value="${basehome}/rendezvous/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>


  <!-- ====================================================================
	Undocumented Test Targets
       ==================================================================== -->
  <target name="startsp1" depends="initstart">
  <description>
  </description>
    <property name="startdir" value="${testenv}/sp1"/>
    <property name="starturl" value="file:${configdir}/SP1.xml"/>
    <property name="jxtahome" value="${basehome}/sp1/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>
  <target name="startsp2" depends="initstart">
  <description>
  </description>
    <property name="startdir" value="${testenv}/sp2"/>
    <property name="starturl" value="file:${configdir}/SP2.xml"/>
    <property name="jxtahome" value="${basehome}/sp2/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>
  <target name="startsp3" depends="initstart">
  <description>
  </description>
    <property name="startdir" value="${testenv}/sp3"/>
    <property name="starturl" value="file:${configdir}/SP3.xml"/>
    <property name="jxtahome" value="${basehome}/sp3/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>
  <target name="console" depends="initstart">
  <description>
  </description>
    <property name="startdir" value="${testenv}/console"/>
    <property name="starturl" value="file:${configdir}/ConsoleTest.xml"/>
    <property name="jxtahome" value="${basehome}/console/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>
  <target name="hyper1" depends="initstart">
  <description>
  </description>
    <property name="startdir" value="${testenv}/hyper1"/>
    <property name="starturl" value="file:${configdir}/HyperCuP1.xml"/>
    <property name="jxtahome" value="${basehome}/hyper1/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>
  <target name="hyper2" depends="initstart">
  <description>
  </description>
    <property name="startdir" value="${testenv}/hyper2"/>
    <property name="starturl" value="file:${configdir}/HyperCuP2.xml"/>
    <property name="jxtahome" value="${basehome}/hyper2/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>

 <!-- ====================================================================
       ==================================================================== -->
  
  <target name="cqsuperpeer" depends="initstart">
  <description>
  </description>
    <property name="startdir" value="${testenv}/cqsuperpeer"/>
    <property name="starturl" value="file:${configdir}/CQSuperPeer.xml"/>
    <property name="jxtahome" value="${basehome}/cqsuperpeer/.jxta/"/>
    <mkdir dir="${startdir}"/>
		<delete dir="${jxtahome}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>




  <!-- ====================================================================

       ==================================================================== -->
  <target name="cqprovider" depends="initstart">
  <description>
  </description>
    <property name="startdir" value="${testenv}/cqprovider"/>
    <property name="starturl" value="file:${configdir}/CQProviderPeer.xml"/>
    <property name="jxtahome" value="${basehome}/cqprovider/.jxta/"/>
    <path id="startedutella.classpath">
      <path refid="rdqlprovider.classpath"/>
      <pathelement location="${dist}/${name}-provider-rdql.jar"/>
    </path>
    <mkdir dir="${startdir}"/>
		<delete dir="${jxtahome}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <copy file="${basehome}/demo_provider/se_exercises/se_exercises.rdf" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>


   <!-- ====================================================================
	just a second provider to speedup building of test-environments
       ==================================================================== -->
  <target name="cqprovider2" depends="initstart">
    <property name="startdir" value="${testenv}/cqprovider2"/>
    <property name="starturl" value="file:${configdir}/CQProviderPeer2.xml"/>
    <property name="jxtahome" value="${basehome}/cqprovider2/.jxta/"/>
    <path id="startedutella.classpath">
      <path refid="commonrun.classpath"/>
      <pathelement location="${dist}/${name}-provider-rdql.jar"/>
    </path>
  	<mkdir dir="${startdir}"/>
		<delete dir="${jxtahome}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <copy file="${basehome}/demo_provider/se_exercises/se_exercises.rdf" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>


  <!-- ====================================================================

       ==================================================================== -->
  <target name="cqconsumer" depends="initstart">
  <description>
  </description>
    <property name="startdir" value="${testenv}/cqconsumer"/>
    <property name="starturl" value="file:${configdir}/CQConsumerPeer.xml"/>
    <property name="jxtahome" value="${basehome}/cqconsumer/.jxta/"/>
  	<mkdir dir="${startdir}"/>
		<delete dir="${jxtahome}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>


  <!-- ====================================================================
	Chainsaw GUI for Log4J
       ==================================================================== -->
  <target name="chainsaw" depends="init">
  <description>
  </description>
    <java classname="org.apache.log4j.chainsaw.Main"
      classpathref="common.classpath" fork="true">
    </java>
  </target>
	
  <target name="coord" depends="init">
  <description>
  </description>
    <java classname="net.jxta.edutella.service.topology.hypercup.destination.CoordinatesImpl"
      classpathref="edutella.classpath"
	  maxmemory="256m"
	  fork="true">
    </java>
  </target>
  
  <!-- ====================================================================

       ==================================================================== -->
  <target name="peertrustrendezvous" depends="initstart">
  <description>
  rendezvous:
        Starts a jxta rendezvous peer.
  </description>
    <property name="startdir" value="${testenv}/peertrustrendezvous"/>
    <property name="starturl" value="file:${configdir}/PeertrustRendezVousPeer.xml"/>
    <property name="jxtahome" value="${basehome}/peertrustrendezvous/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>
  
  <!-- ====================================================================

       ==================================================================== -->
  <target name="peertrustprovider" depends="initstart">
  <description>
  provider:
        Starts a simple RDQL based provider peer.
  </description>
    <property name="startdir" value="${testenv}/peertrustprovider"/>
    <property name="starturl" value="file:${configdir}/PeertrustProvider.xml"/>
    <property name="jxtahome" value="${basehome}/peertrustprovider/.jxta/"/>
    <path id="startedutella.classpath">
      <path refid="rdqlprovider.classpath"/>
      <pathelement location="${dist}/${name}-provider-rdql.jar"/>
    </path>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <copy file="${basehome}/demo_provider/se_exercises/se_exercises.rdf" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>

  <!-- ====================================================================

       ==================================================================== -->
  <target name="peertrustprovider2" depends="initstart">
  <description>
  provider:
        Starts a simple RDQL based provider peer.
  </description>
    <property name="startdir" value="${testenv}/peertrustprovider2"/>
    <property name="starturl" value="file:${configdir}/PeertrustProvider2.xml"/>
    <property name="jxtahome" value="${basehome}/peertrustprovider2/.jxta/"/>
    <path id="startedutella.classpath">
      <path refid="rdqlprovider.classpath"/>
      <pathelement location="${dist}/${name}-provider-rdql.jar"/>
    </path>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <copy file="${basehome}/demo_provider/se_exercises/se_exercises.rdf" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>
  
  <!-- ====================================================================

       ==================================================================== -->
  <target name="peertrustconsumer" depends="initstart">
  <description>
  consumer:
        Starts a simple swing-based consumer peer.
  </description>
    <property name="startdir" value="${testenv}/peertrustconsumer"/>
    <property name="starturl" value="file:${configdir}/PeertrustConsumer.xml"/>
    <property name="jxtahome" value="${basehome}/peertrustconsumer/.jxta/"/>
	<mkdir dir="${startdir}"/>
    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>

	  <!-- ====================================================================

	       ==================================================================== -->
	  <target name="peertrustconsumer2" depends="initstart">
	  <description>
	  consumer:
	        Starts a simple swing-based consumer peer.
	  </description>
	    <property name="startdir" value="${testenv}/peertrustconsumer2"/>
	    <property name="starturl" value="file:${configdir}/PeertrustConsumer2.xml"/>
	    <property name="jxtahome" value="${basehome}/peertrustconsumer2/.jxta/"/>
		<mkdir dir="${startdir}"/>
	    <copy file="${configdir}/.logconfig" todir="${startdir}"/>
	    <antcall target="start" inheritAll="true" inheritRefs="true"/>
	  </target>
	
</project>
