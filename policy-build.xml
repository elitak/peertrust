<?xml version="1.0" encoding="UTF-8"?>

<project name="policy" default="jar" basedir=".">

  <description>
  	TODO 
  	Automated Trust Negotiation for Peers on the Semantic Web
	In the PeerTrust project we are developing and investigating policy languages to describe trust and security requirements on the Semantic Web. Such policies will be one component of a run-time system that can negotiate to establish trust on the Semantic Web. The PeerTrust system uses guarded distributed logic programs as the basis for a simple yet expressive policy and trust negotiation language, built upon the rule layer of the Semantic Web layer cake. 
  </description>
  
  <!-- ====================================================================
       Global Definitions
       ==================================================================== -->
  <target name="init">

  	<tstamp>
  	    <format property="date" pattern="yyyy-MMM-dd"/>
  		<format property="year" pattern="yyyy"/>
  	</tstamp>

    <property environment="user"/>
    <property name="project" value="policy"/>
  	
    <property name="src" value="${basedir}/src"/>
    <property name="lib" value="${basedir}/lib"/>
    <property name="build" value="${basedir}/build"/>
    <property name="classes" value="${build}/classes"/>
    <property name="dist" value="${build}/dist"/>
    <property name="doc" value="${build}/doc"/>
    <property name="bin" value="${build}/bin"/>
    <property name="configdir" value="${basedir}/config"/>
    <property name="testenv" value="${basedir}/testenv"/>

    <property name="path_javadoc" value="${basedir}/doc/javadoc"/>  

  	<!-- Name to be shown on messages -->
    <property name="Name" value="Policy Framework"/>
  	
  	<!-- Name for the jar file -->
    <property name="jar_name" value="policy"/>

  	<!-- <property name="date" value="${DSTAMP}"/> -->

    <property name="release" value="0.5"/>
    <property name="version" value="${release}-${date}"/>

  	<!--
    <property file="${user.home}/.trust.properties"/>
    <property file=".trust.properties"/> -->

    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="off"/>
    <property name="verbose" value="off"/>

  	<!-- - - - - - - - - - - - - - - - - - - -->

    <echo message="============= ${Name} ${version} [${year}] =============="/>
  	<echo message="============= Policy Framework ====================================="/>

    <!-- Classpath for compiling base stuff -->
    <path id="common.classpath">
      <fileset dir="${lib}">
        <include name="jsse.jar"/>
        <include name="bouncyCastle.jar"/>
        <include name="log4j.jar"/>
      	<include name="jena.jar"/>
      	<include name="xercesImpl.jar"/>
      	<include name="commons-logging.jar"/>
      	<include name="icu4j.jar"/>
      	<include name="jgraph.jar"/>
      	<include name="YProlog.jar"/>
  	  </fileset>
    </path>

    <!-- Classpath for compiling the implementation and everything else -->
    <path id="build.classpath">
      <fileset dir="${lib}">
        <include name="junit.jar"/>
      </fileset>
      <path refid="common.classpath"/>
      <path refid="protege.classpath"/>
    </path>
  	
    <!-- Classpath for running -->
    <path id="commonrun.classpath">
        <path refid="common.classpath"/>
        <pathelement location="${dist}/${jar_name}.jar"/>
    </path>

  	<!-- - - - - - - - - - - - - - - - - - - -->
  	
    <path id="jdepend.classpath">
      <pathelement location="${lib}/jdepend.jar"/>
    </path>
  	 
  </target>


  <!-- ====================================================================
       Prepare the environment
       ==================================================================== -->
  <target name="prepare" depends="init">
    <echo message="================= Preparing Environment ================="/>
    <mkdir dir="${build}"/>
  </target>

  <target name="preparecompile" depends="prepare">
    <echo message="=========== Preparing Compilation of Peertrust ==========="/>
    <delete dir="${classes}"/>
    <mkdir dir="${classes}"/>
  </target>

  <!-- ====================================================================
       Compile the Policy Framework
       ==================================================================== -->
  <target name="compile" depends="preparecompile">
  <description>
  compile:
        Compiles everything, except test classes
  </description>
    <echo message="=============== Compiling Policy Framework ================"/>
    <javac debug="${debug}"
       destdir="${classes}"
	   includes="**"
	   verbose="${verbose}"
	   optimize="${optimize}"
	   deprecation="${deprecation}">
      <exclude name="test/**"/>
      <exclude name="net/jxta/edutella/util/Config**"/>
      <exclude name="net/jxta/edutella/util/Option*"/>
      <exclude name="org/peertrust/**"/>
      <exclude name="org/protune/**"/>
      <exclude name="de/**"/>
    <!-- temporary -->
        <exclude name="org/policy/crypt/credentials/**"/>
        <exclude name="org/policy/reasoning/**"/>
      <classpath refid="common.classpath"/>
      <src path="${src}"/>
    </javac>
  </target>

  <!-- ====================================================================
       Create the jar-archive ( with name ${jar_name}.jar )
       ==================================================================== -->
  <target name="jar" depends="compile">
  <description>
  jar:
        Creates java archive (.jar) from all the basic classes.
  </description>
    <echo message="============== Creating basic policy.jar ============="/>
    <mkdir dir="${dist}"/>
    <jar basedir="${classes}"
         jarfile="${dist}/${jar_name}.jar">
    </jar>
  </target>
	
  <!-- ====================================================================
       Create JDepend information about code quality
       ==================================================================== -->
  <target name="jdepend" depends="init,compile">
    <echo>
CC - Concrete Class Count 
AC - Abstract Class (and Interface) Count 
Ca - Afferent Couplings (Ca) 
Ce - Efferent Couplings (Ce) 
A - Abstractness (0-1) 
I - Instability (0-1) 
D - Distance from the Main Sequence (0-1) 
Cyclic - If the package contains a dependency cycle 

For details see http://www.clarkware.com/software/JDepend.html.
    </echo>
    <java classname="jdepend.swingui.JDepend" 
          fork="true"
          failonerror="true">
      <arg value="${classes}"/> 
      <classpath refid="jdepend.classpath"/>
    </java>
  </target>

  <!-- ====================================================================
       Help on usage
       ==================================================================== -->
  <target name="usage" depends="init">
  <description>
  usage:
        Shows usage information of this makefile.
  </description>
    <echo>
${Name} Build file
-------------------------------------------------------------

 available targets are:

   jar         --> creates ${jar_name} .jar in ${dist}
   dist        --> creates ${jar_name} .tar.gz and .zip in ${dist}
   javadoc     --> writes the javadoc documentation to ${doc}
   clean       --> cleans up the build directory(${build})
   distclean   --> cleans up the build directory(${build}), distribution directory (${dist}) and the testenv directory (${testenv})
   jdepend     --> obtain design quality metrics by applying JDepend
   usage       --> show this message (default)
   ---------------------------------------------------------------
   chainsaw    --> starts a local log4j gui

 See the comments inside the build.xml file for more details.
-------------------------------------------------------------
    </echo>
  </target>


  <!-- ====================================================================
	Chainsaw GUI for Log4J
       ==================================================================== -->
  <target name="chainsaw" depends="init">
  <description>
  </description>
    <java classname="org.apache.log4j.chainsaw.Main"
      classpathref="common.classpath" fork="true">
    </java>
  </target>
	
  <!-- ====================================================================
       Clean the environment
       ==================================================================== -->
  <target name="clean" depends="init">
  <description>
  clean:
        Cleans the build directory
  </description>
    <delete dir="${build}"/>
  </target>

  <!-- ====================================================================
       Clean the complete environment
       ==================================================================== -->
  <target name="distclean" depends="clean, initstart">
  <description>
  distclean:
        Cleans the build, dist and testenv directory
  </description>
    <delete dir="${dist}"/>
    <delete dir="${testenv}"/> <!-- TODO check for removal of testenv directory -->
  </target>


  <!-- ====================================================================
       Create local javadoc documentation
       ==================================================================== -->
  <target name="javadoc" depends="jar">
  <description>
  javadoc:
        Generates local javadoc documentation from
        Java source files and writes them to doc subdirectory.
  </description>
  <property name="docdir" value="${path_javadoc}"/>
    <javadoc
      packagenames="org.*"
      classpathref="build.classpath"
      defaultexcludes="yes"
      destdir="${docdir}"
      author="true"
      version="true"
      use="true"
      source="1.5"
      windowtitle="Policy API"
      charset="iso-8859-1"
      breakiterator="yes"
      stylesheetfile="${basedir}/doc/stylesheet.css">
      <sourcepath path="${src}"/>
      <link href="http://www.l3s.de/~olmedilla/"/>
    </javadoc>
    <copy file="${basedir}/doc/inherit.gif"
          todir="${docdir}"/>
    <copy file="${basedir}/doc/license.txt"
          todir="${docdir}"/>
    <copy file="${basedir}/doc/README"
          todir="${docdir}"/>
  </target>

  <!-- ====================================================================
       Create public javadoc documentation
       ==================================================================== 
  <target name="html" depends="jar">
  <description>
  html:
        Creates javadoc in unix-style users home public_html directory
  </description>
    <property name="webdir" value="${user.HOME}/public_html/research/javadoc/peertrust"/>
    <echo>Build will go to ${webdir}
    </echo>
    <javadoc
      packagenames="org.peertrust.*"
      classpathref="build.classpath"
      defaultexcludes="yes"
      destdir="${webdir}"
      author="true"
      version="true"
      use="true"
      source="1.4"
      windowtitle="Peertrust API"
      charset="iso-8859-1"
      breakiterator="yes"
      stylesheetfile="${basedir}/doc/stylesheet.css">
      <sourcepath path="${src}"/>
      <link href="http://www.l3s.de/~olmedilla/"/>
    </javadoc>
    <copy file="${basedir}/doc/license.txt"
          todir="${webdir}"/>
    <copy file="${basedir}/doc/inherit.gif"
          todir="${webdir}"/>
    <copy file="${basedir}/doc/README"
          todir="${webdir}"/>
  </target> -->


  <!-- ====================================================================
       ====================================================================
                                                  #####
                  #####     ##    #####    ##### #     #
                  #    #   #  #   #    #     #         #
                  #    #  #    #  #    #     #    #####
                  #####   ######  #####      #   #
                  #       #    #  #   #      #   #
                  #       #    #  #    #     #   #######
       ====================================================================
       ==================================================================== -->


  <!-- ====================================================================

       ==================================================================== -->
  <target name="initstart" depends="init">
    <mkdir dir="${testenv}"/>
    <path id="start.classpath">
      <path refid="commonrun.classpath"/>
      <pathelement location="${dist}/${jar_name}.jar"/>
    </path>
  </target>

  <!-- ====================================================================

       ==================================================================== -->
  <target name="start">
    <echo>Starting ${startclass} in ${startdir}</echo>
  	<echo>using as arguments "${configFile}" and "${queryString}"</echo>
    <mkdir dir="${startdir}"/>
    <java classname="${startclass}"
      classpathref="start.classpath"
	  maxmemory="256m"
	  dir="${startdir}"
	  fork="true">
<!--    <jvmarg value="-classic"/> -->
    <arg value="${configFile}"/>
    <arg value="${queryString}"/>
<!--	<jvmarg value="-Xms128m"/>
	<jvmarg value="-Xss4m"/> -->
	<!-- <jvmarg value="-Dnet.jxta.tls.principal=${tls.principal}"/>
	<jvmarg value="-Dnet.jxta.tls.password=${tls.password}"/>  -->
    </java>
  </target>

  <target name="copyCommonFiles">
    <echo>Copying files from ${configdir} in ${startdir}</echo>
    <mkdir dir="${startdir}"/>
  	<copy file="${configdir}/logconfig" todir="${startdir}"/>
  </target>

  <!-- ====================================================================
  	Copy Needed Files
       ==================================================================== -->
  <target name="copyFiles">
  	<echo>Copying files from ${configdir} to ${startdir}</echo>
  	<antcall target="copyCommonFiles" inheritAll="true" inheritRefs="true"/>
  	<copy file="${configdir}/${configFileName}" todir="${startdir}"/>
  </target>

  <!-- ====================================================================
  	Demo Client
       ==================================================================== -->
  <target name="demoClient" depends="initstart">
  <description>
  demoClient:
        Starts a simple demo client
  </description>
    <property name="startdir" value="${testenv}/demoClient"/>
  	<property name="startclass" value="org.policy.engine.PolicyEngineClient"/>
  	<property name="configFileName" value="demoPolicyEngine.client.rdf"/>
  	<property name="configFile" value="file:${startdir}/${configFileName}"/>
  	<property name="queryString" value="Any example Query"/>
	<antcall target="copyFiles" inheritAll="true" inheritRefs="true"/>
    <antcall target="start" inheritAll="true" inheritRefs="true"/>
  </target>

</project>
